
adc_cdc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ddc  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08007f70  08007f70  00017f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fd0  08007fd0  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  08007fd0  08007fd0  00017fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007fd8  08007fd8  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fd8  08007fd8  00017fd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007fdc  08007fdc  00017fdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08007fe0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000051c4  200001ec  080081cc  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200053b0  080081cc  000253b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018172  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000349b  00000000  00000000  0003838e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011d0  00000000  00000000  0003b830  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001048  00000000  00000000  0003ca00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019bea  00000000  00000000  0003da48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010535  00000000  00000000  00057632  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009286e  00000000  00000000  00067b67  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fa3d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b18  00000000  00000000  000fa450  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200001ec 	.word	0x200001ec
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08007f58 	.word	0x08007f58

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	200001f0 	.word	0x200001f0
 80001d0:	08007f58 	.word	0x08007f58

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b972 	b.w	80004d0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	4688      	mov	r8, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14b      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000212:	428a      	cmp	r2, r1
 8000214:	4615      	mov	r5, r2
 8000216:	d967      	bls.n	80002e8 <__udivmoddi4+0xe4>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0720 	rsb	r7, r2, #32
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	fa20 f707 	lsr.w	r7, r0, r7
 800022a:	4095      	lsls	r5, r2
 800022c:	ea47 0803 	orr.w	r8, r7, r3
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbb8 f7fe 	udiv	r7, r8, lr
 800023c:	fa1f fc85 	uxth.w	ip, r5
 8000240:	fb0e 8817 	mls	r8, lr, r7, r8
 8000244:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000248:	fb07 f10c 	mul.w	r1, r7, ip
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18eb      	adds	r3, r5, r3
 8000252:	f107 30ff 	add.w	r0, r7, #4294967295
 8000256:	f080 811b 	bcs.w	8000490 <__udivmoddi4+0x28c>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8118 	bls.w	8000490 <__udivmoddi4+0x28c>
 8000260:	3f02      	subs	r7, #2
 8000262:	442b      	add	r3, r5
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0fe 	udiv	r0, r3, lr
 800026c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fc0c 	mul.w	ip, r0, ip
 8000278:	45a4      	cmp	ip, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	192c      	adds	r4, r5, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x290>
 8000286:	45a4      	cmp	ip, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x290>
 800028c:	3802      	subs	r0, #2
 800028e:	442c      	add	r4, r5
 8000290:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000294:	eba4 040c 	sub.w	r4, r4, ip
 8000298:	2700      	movs	r7, #0
 800029a:	b11e      	cbz	r6, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c6 4300 	strd	r4, r3, [r6]
 80002a4:	4639      	mov	r1, r7
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xbe>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80eb 	beq.w	800048a <__udivmoddi4+0x286>
 80002b4:	2700      	movs	r7, #0
 80002b6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ba:	4638      	mov	r0, r7
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f783 	clz	r7, r3
 80002c6:	2f00      	cmp	r7, #0
 80002c8:	d147      	bne.n	800035a <__udivmoddi4+0x156>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd0>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2c4>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	4698      	mov	r8, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa0>
 80002e2:	e9c6 4800 	strd	r4, r8, [r6]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa0>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xe8>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 808f 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f6:	1b49      	subs	r1, r1, r5
 80002f8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002fc:	fa1f f885 	uxth.w	r8, r5
 8000300:	2701      	movs	r7, #1
 8000302:	fbb1 fcfe 	udiv	ip, r1, lr
 8000306:	0c23      	lsrs	r3, r4, #16
 8000308:	fb0e 111c 	mls	r1, lr, ip, r1
 800030c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000310:	fb08 f10c 	mul.w	r1, r8, ip
 8000314:	4299      	cmp	r1, r3
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x124>
 8000318:	18eb      	adds	r3, r5, r3
 800031a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4299      	cmp	r1, r3
 8000322:	f200 80cd 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 8000326:	4684      	mov	ip, r0
 8000328:	1a59      	subs	r1, r3, r1
 800032a:	b2a3      	uxth	r3, r4
 800032c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000330:	fb0e 1410 	mls	r4, lr, r0, r1
 8000334:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000338:	fb08 f800 	mul.w	r8, r8, r0
 800033c:	45a0      	cmp	r8, r4
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x14c>
 8000340:	192c      	adds	r4, r5, r4
 8000342:	f100 33ff 	add.w	r3, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x14a>
 8000348:	45a0      	cmp	r8, r4
 800034a:	f200 80b6 	bhi.w	80004ba <__udivmoddi4+0x2b6>
 800034e:	4618      	mov	r0, r3
 8000350:	eba4 0408 	sub.w	r4, r4, r8
 8000354:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000358:	e79f      	b.n	800029a <__udivmoddi4+0x96>
 800035a:	f1c7 0c20 	rsb	ip, r7, #32
 800035e:	40bb      	lsls	r3, r7
 8000360:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000364:	ea4e 0e03 	orr.w	lr, lr, r3
 8000368:	fa01 f407 	lsl.w	r4, r1, r7
 800036c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000370:	fa21 f30c 	lsr.w	r3, r1, ip
 8000374:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000378:	4325      	orrs	r5, r4
 800037a:	fbb3 f9f8 	udiv	r9, r3, r8
 800037e:	0c2c      	lsrs	r4, r5, #16
 8000380:	fb08 3319 	mls	r3, r8, r9, r3
 8000384:	fa1f fa8e 	uxth.w	sl, lr
 8000388:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800038c:	fb09 f40a 	mul.w	r4, r9, sl
 8000390:	429c      	cmp	r4, r3
 8000392:	fa02 f207 	lsl.w	r2, r2, r7
 8000396:	fa00 f107 	lsl.w	r1, r0, r7
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1e 0303 	adds.w	r3, lr, r3
 80003a0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a4:	f080 8087 	bcs.w	80004b6 <__udivmoddi4+0x2b2>
 80003a8:	429c      	cmp	r4, r3
 80003aa:	f240 8084 	bls.w	80004b6 <__udivmoddi4+0x2b2>
 80003ae:	f1a9 0902 	sub.w	r9, r9, #2
 80003b2:	4473      	add	r3, lr
 80003b4:	1b1b      	subs	r3, r3, r4
 80003b6:	b2ad      	uxth	r5, r5
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c8:	45a2      	cmp	sl, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1e 0404 	adds.w	r4, lr, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	d26b      	bcs.n	80004ae <__udivmoddi4+0x2aa>
 80003d6:	45a2      	cmp	sl, r4
 80003d8:	d969      	bls.n	80004ae <__udivmoddi4+0x2aa>
 80003da:	3802      	subs	r0, #2
 80003dc:	4474      	add	r4, lr
 80003de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e2:	fba0 8902 	umull	r8, r9, r0, r2
 80003e6:	eba4 040a 	sub.w	r4, r4, sl
 80003ea:	454c      	cmp	r4, r9
 80003ec:	46c2      	mov	sl, r8
 80003ee:	464b      	mov	r3, r9
 80003f0:	d354      	bcc.n	800049c <__udivmoddi4+0x298>
 80003f2:	d051      	beq.n	8000498 <__udivmoddi4+0x294>
 80003f4:	2e00      	cmp	r6, #0
 80003f6:	d069      	beq.n	80004cc <__udivmoddi4+0x2c8>
 80003f8:	ebb1 050a 	subs.w	r5, r1, sl
 80003fc:	eb64 0403 	sbc.w	r4, r4, r3
 8000400:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000404:	40fd      	lsrs	r5, r7
 8000406:	40fc      	lsrs	r4, r7
 8000408:	ea4c 0505 	orr.w	r5, ip, r5
 800040c:	e9c6 5400 	strd	r5, r4, [r6]
 8000410:	2700      	movs	r7, #0
 8000412:	e747      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f703 	lsr.w	r7, r0, r3
 800041c:	4095      	lsls	r5, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	fa21 f303 	lsr.w	r3, r1, r3
 8000426:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042a:	4338      	orrs	r0, r7
 800042c:	0c01      	lsrs	r1, r0, #16
 800042e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000432:	fa1f f885 	uxth.w	r8, r5
 8000436:	fb0e 3317 	mls	r3, lr, r7, r3
 800043a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043e:	fb07 f308 	mul.w	r3, r7, r8
 8000442:	428b      	cmp	r3, r1
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x256>
 800044a:	1869      	adds	r1, r5, r1
 800044c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000450:	d22f      	bcs.n	80004b2 <__udivmoddi4+0x2ae>
 8000452:	428b      	cmp	r3, r1
 8000454:	d92d      	bls.n	80004b2 <__udivmoddi4+0x2ae>
 8000456:	3f02      	subs	r7, #2
 8000458:	4429      	add	r1, r5
 800045a:	1acb      	subs	r3, r1, r3
 800045c:	b281      	uxth	r1, r0
 800045e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000462:	fb0e 3310 	mls	r3, lr, r0, r3
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb00 f308 	mul.w	r3, r0, r8
 800046e:	428b      	cmp	r3, r1
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x27e>
 8000472:	1869      	adds	r1, r5, r1
 8000474:	f100 3cff 	add.w	ip, r0, #4294967295
 8000478:	d217      	bcs.n	80004aa <__udivmoddi4+0x2a6>
 800047a:	428b      	cmp	r3, r1
 800047c:	d915      	bls.n	80004aa <__udivmoddi4+0x2a6>
 800047e:	3802      	subs	r0, #2
 8000480:	4429      	add	r1, r5
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000488:	e73b      	b.n	8000302 <__udivmoddi4+0xfe>
 800048a:	4637      	mov	r7, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e709      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000490:	4607      	mov	r7, r0
 8000492:	e6e7      	b.n	8000264 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x8c>
 8000498:	4541      	cmp	r1, r8
 800049a:	d2ab      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 800049c:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a0:	eb69 020e 	sbc.w	r2, r9, lr
 80004a4:	3801      	subs	r0, #1
 80004a6:	4613      	mov	r3, r2
 80004a8:	e7a4      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004aa:	4660      	mov	r0, ip
 80004ac:	e7e9      	b.n	8000482 <__udivmoddi4+0x27e>
 80004ae:	4618      	mov	r0, r3
 80004b0:	e795      	b.n	80003de <__udivmoddi4+0x1da>
 80004b2:	4667      	mov	r7, ip
 80004b4:	e7d1      	b.n	800045a <__udivmoddi4+0x256>
 80004b6:	4681      	mov	r9, r0
 80004b8:	e77c      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004ba:	3802      	subs	r0, #2
 80004bc:	442c      	add	r4, r5
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0x14c>
 80004c0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c4:	442b      	add	r3, r5
 80004c6:	e72f      	b.n	8000328 <__udivmoddi4+0x124>
 80004c8:	4638      	mov	r0, r7
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xda>
 80004cc:	4637      	mov	r7, r6
 80004ce:	e6e9      	b.n	80002a4 <__udivmoddi4+0xa0>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d8:	f000 fb66 	bl	8000ba8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004dc:	f000 f81e 	bl	800051c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e0:	f000 f96e 	bl	80007c0 <MX_GPIO_Init>
  MX_DMA_Init();
 80004e4:	f000 f94c 	bl	8000780 <MX_DMA_Init>
  MX_ADC1_Init();
 80004e8:	f000 f886 	bl	80005f8 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 80004ec:	f006 ff2e 	bl	800734c <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 80004f0:	f000 f8d4 	bl	800069c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	HAL_Delay(4000);
 80004f4:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80004f8:	f000 fbc8 	bl	8000c8c <HAL_Delay>
//  HAL_ADC_Start_IT(&hadc1);
//  HAL_ADC_Start_DMA(&hadc1, (uint32_t)ADCBuffer, 1);
//	HAL_ADC_Start(&hadc1);
//	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &adc_buffer, 1);
	HAL_ADC_Start_DMA(&hadc1, ADCValues, ADC_BUFFER_SIZE);
 80004fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000500:	4903      	ldr	r1, [pc, #12]	; (8000510 <main+0x3c>)
 8000502:	4804      	ldr	r0, [pc, #16]	; (8000514 <main+0x40>)
 8000504:	f000 fc28 	bl	8000d58 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start_IT(&htim3);
 8000508:	4803      	ldr	r0, [pc, #12]	; (8000518 <main+0x44>)
 800050a:	f003 fb68 	bl	8003bde <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 800050e:	e7fe      	b.n	800050e <main+0x3a>
 8000510:	200002a0 	.word	0x200002a0
 8000514:	20000258 	.word	0x20000258
 8000518:	20000218 	.word	0x20000218

0800051c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b094      	sub	sp, #80	; 0x50
 8000520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000522:	f107 0320 	add.w	r3, r7, #32
 8000526:	2230      	movs	r2, #48	; 0x30
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f007 fc52 	bl	8007dd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000530:	f107 030c 	add.w	r3, r7, #12
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
 800053a:	609a      	str	r2, [r3, #8]
 800053c:	60da      	str	r2, [r3, #12]
 800053e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000540:	2300      	movs	r3, #0
 8000542:	60bb      	str	r3, [r7, #8]
 8000544:	4b2a      	ldr	r3, [pc, #168]	; (80005f0 <SystemClock_Config+0xd4>)
 8000546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000548:	4a29      	ldr	r2, [pc, #164]	; (80005f0 <SystemClock_Config+0xd4>)
 800054a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800054e:	6413      	str	r3, [r2, #64]	; 0x40
 8000550:	4b27      	ldr	r3, [pc, #156]	; (80005f0 <SystemClock_Config+0xd4>)
 8000552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000558:	60bb      	str	r3, [r7, #8]
 800055a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800055c:	2300      	movs	r3, #0
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	4b24      	ldr	r3, [pc, #144]	; (80005f4 <SystemClock_Config+0xd8>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000568:	4a22      	ldr	r2, [pc, #136]	; (80005f4 <SystemClock_Config+0xd8>)
 800056a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800056e:	6013      	str	r3, [r2, #0]
 8000570:	4b20      	ldr	r3, [pc, #128]	; (80005f4 <SystemClock_Config+0xd8>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000578:	607b      	str	r3, [r7, #4]
 800057a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800057c:	2303      	movs	r3, #3
 800057e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000580:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000584:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000586:	2301      	movs	r3, #1
 8000588:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800058a:	2310      	movs	r3, #16
 800058c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058e:	2302      	movs	r3, #2
 8000590:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000592:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000596:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000598:	230f      	movs	r3, #15
 800059a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 800059c:	2390      	movs	r3, #144	; 0x90
 800059e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005a0:	2302      	movs	r3, #2
 80005a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80005a4:	2305      	movs	r3, #5
 80005a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a8:	f107 0320 	add.w	r3, r7, #32
 80005ac:	4618      	mov	r0, r3
 80005ae:	f002 fed7 	bl	8003360 <HAL_RCC_OscConfig>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80005b8:	f000 f97c 	bl	80008b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005bc:	230f      	movs	r3, #15
 80005be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005c0:	2300      	movs	r3, #0
 80005c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c4:	2300      	movs	r3, #0
 80005c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c8:	2300      	movs	r3, #0
 80005ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005cc:	2300      	movs	r3, #0
 80005ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005d0:	f107 030c 	add.w	r3, r7, #12
 80005d4:	2100      	movs	r1, #0
 80005d6:	4618      	mov	r0, r3
 80005d8:	f003 f932 	bl	8003840 <HAL_RCC_ClockConfig>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80005e2:	f000 f967 	bl	80008b4 <Error_Handler>
  }
}
 80005e6:	bf00      	nop
 80005e8:	3750      	adds	r7, #80	; 0x50
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40023800 	.word	0x40023800
 80005f4:	40007000 	.word	0x40007000

080005f8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005fe:	463b      	mov	r3, r7
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800060a:	4b22      	ldr	r3, [pc, #136]	; (8000694 <MX_ADC1_Init+0x9c>)
 800060c:	4a22      	ldr	r2, [pc, #136]	; (8000698 <MX_ADC1_Init+0xa0>)
 800060e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000610:	4b20      	ldr	r3, [pc, #128]	; (8000694 <MX_ADC1_Init+0x9c>)
 8000612:	2200      	movs	r2, #0
 8000614:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000616:	4b1f      	ldr	r3, [pc, #124]	; (8000694 <MX_ADC1_Init+0x9c>)
 8000618:	2200      	movs	r2, #0
 800061a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800061c:	4b1d      	ldr	r3, [pc, #116]	; (8000694 <MX_ADC1_Init+0x9c>)
 800061e:	2200      	movs	r2, #0
 8000620:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000622:	4b1c      	ldr	r3, [pc, #112]	; (8000694 <MX_ADC1_Init+0x9c>)
 8000624:	2200      	movs	r2, #0
 8000626:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000628:	4b1a      	ldr	r3, [pc, #104]	; (8000694 <MX_ADC1_Init+0x9c>)
 800062a:	2200      	movs	r2, #0
 800062c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000630:	4b18      	ldr	r3, [pc, #96]	; (8000694 <MX_ADC1_Init+0x9c>)
 8000632:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000636:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000638:	4b16      	ldr	r3, [pc, #88]	; (8000694 <MX_ADC1_Init+0x9c>)
 800063a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800063e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000640:	4b14      	ldr	r3, [pc, #80]	; (8000694 <MX_ADC1_Init+0x9c>)
 8000642:	2200      	movs	r2, #0
 8000644:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000646:	4b13      	ldr	r3, [pc, #76]	; (8000694 <MX_ADC1_Init+0x9c>)
 8000648:	2201      	movs	r2, #1
 800064a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800064c:	4b11      	ldr	r3, [pc, #68]	; (8000694 <MX_ADC1_Init+0x9c>)
 800064e:	2201      	movs	r2, #1
 8000650:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000654:	4b0f      	ldr	r3, [pc, #60]	; (8000694 <MX_ADC1_Init+0x9c>)
 8000656:	2201      	movs	r2, #1
 8000658:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800065a:	480e      	ldr	r0, [pc, #56]	; (8000694 <MX_ADC1_Init+0x9c>)
 800065c:	f000 fb38 	bl	8000cd0 <HAL_ADC_Init>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000666:	f000 f925 	bl	80008b4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800066a:	2300      	movs	r3, #0
 800066c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800066e:	2301      	movs	r3, #1
 8000670:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000672:	2301      	movs	r3, #1
 8000674:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000676:	463b      	mov	r3, r7
 8000678:	4619      	mov	r1, r3
 800067a:	4806      	ldr	r0, [pc, #24]	; (8000694 <MX_ADC1_Init+0x9c>)
 800067c:	f000 fc4a 	bl	8000f14 <HAL_ADC_ConfigChannel>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000686:	f000 f915 	bl	80008b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800068a:	bf00      	nop
 800068c:	3710      	adds	r7, #16
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	20000258 	.word	0x20000258
 8000698:	40012000 	.word	0x40012000

0800069c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b08e      	sub	sp, #56	; 0x38
 80006a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	605a      	str	r2, [r3, #4]
 80006ac:	609a      	str	r2, [r3, #8]
 80006ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006b0:	f107 0320 	add.w	r3, r7, #32
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]
 80006c6:	611a      	str	r2, [r3, #16]
 80006c8:	615a      	str	r2, [r3, #20]
 80006ca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006cc:	4b2a      	ldr	r3, [pc, #168]	; (8000778 <MX_TIM3_Init+0xdc>)
 80006ce:	4a2b      	ldr	r2, [pc, #172]	; (800077c <MX_TIM3_Init+0xe0>)
 80006d0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16-1;
 80006d2:	4b29      	ldr	r3, [pc, #164]	; (8000778 <MX_TIM3_Init+0xdc>)
 80006d4:	220f      	movs	r2, #15
 80006d6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006d8:	4b27      	ldr	r3, [pc, #156]	; (8000778 <MX_TIM3_Init+0xdc>)
 80006da:	2200      	movs	r2, #0
 80006dc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10-1;
 80006de:	4b26      	ldr	r3, [pc, #152]	; (8000778 <MX_TIM3_Init+0xdc>)
 80006e0:	2209      	movs	r2, #9
 80006e2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006e4:	4b24      	ldr	r3, [pc, #144]	; (8000778 <MX_TIM3_Init+0xdc>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006ea:	4b23      	ldr	r3, [pc, #140]	; (8000778 <MX_TIM3_Init+0xdc>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80006f0:	4821      	ldr	r0, [pc, #132]	; (8000778 <MX_TIM3_Init+0xdc>)
 80006f2:	f003 fa49 	bl	8003b88 <HAL_TIM_Base_Init>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80006fc:	f000 f8da 	bl	80008b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000700:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000704:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000706:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800070a:	4619      	mov	r1, r3
 800070c:	481a      	ldr	r0, [pc, #104]	; (8000778 <MX_TIM3_Init+0xdc>)
 800070e:	f003 fb1f 	bl	8003d50 <HAL_TIM_ConfigClockSource>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000718:	f000 f8cc 	bl	80008b4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 800071c:	4816      	ldr	r0, [pc, #88]	; (8000778 <MX_TIM3_Init+0xdc>)
 800071e:	f003 fa82 	bl	8003c26 <HAL_TIM_OC_Init>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000728:	f000 f8c4 	bl	80008b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800072c:	2320      	movs	r3, #32
 800072e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000730:	2300      	movs	r3, #0
 8000732:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000734:	f107 0320 	add.w	r3, r7, #32
 8000738:	4619      	mov	r1, r3
 800073a:	480f      	ldr	r0, [pc, #60]	; (8000778 <MX_TIM3_Init+0xdc>)
 800073c:	f003 fe66 	bl	800440c <HAL_TIMEx_MasterConfigSynchronization>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8000746:	f000 f8b5 	bl	80008b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800074a:	2300      	movs	r3, #0
 800074c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800074e:	2300      	movs	r3, #0
 8000750:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000752:	2300      	movs	r3, #0
 8000754:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000756:	2300      	movs	r3, #0
 8000758:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800075a:	1d3b      	adds	r3, r7, #4
 800075c:	220c      	movs	r2, #12
 800075e:	4619      	mov	r1, r3
 8000760:	4805      	ldr	r0, [pc, #20]	; (8000778 <MX_TIM3_Init+0xdc>)
 8000762:	f003 fa95 	bl	8003c90 <HAL_TIM_OC_ConfigChannel>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 800076c:	f000 f8a2 	bl	80008b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000770:	bf00      	nop
 8000772:	3738      	adds	r7, #56	; 0x38
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	20000218 	.word	0x20000218
 800077c:	40000400 	.word	0x40000400

08000780 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <MX_DMA_Init+0x3c>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a0b      	ldr	r2, [pc, #44]	; (80007bc <MX_DMA_Init+0x3c>)
 8000790:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b09      	ldr	r3, [pc, #36]	; (80007bc <MX_DMA_Init+0x3c>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80007a2:	2200      	movs	r2, #0
 80007a4:	2100      	movs	r1, #0
 80007a6:	2038      	movs	r0, #56	; 0x38
 80007a8:	f000 ff2f 	bl	800160a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80007ac:	2038      	movs	r0, #56	; 0x38
 80007ae:	f000 ff48 	bl	8001642 <HAL_NVIC_EnableIRQ>

}
 80007b2:	bf00      	nop
 80007b4:	3708      	adds	r7, #8
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	40023800 	.word	0x40023800

080007c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b085      	sub	sp, #20
 80007c4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	60fb      	str	r3, [r7, #12]
 80007ca:	4b17      	ldr	r3, [pc, #92]	; (8000828 <MX_GPIO_Init+0x68>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a16      	ldr	r2, [pc, #88]	; (8000828 <MX_GPIO_Init+0x68>)
 80007d0:	f043 0304 	orr.w	r3, r3, #4
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b14      	ldr	r3, [pc, #80]	; (8000828 <MX_GPIO_Init+0x68>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0304 	and.w	r3, r3, #4
 80007de:	60fb      	str	r3, [r7, #12]
 80007e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	60bb      	str	r3, [r7, #8]
 80007e6:	4b10      	ldr	r3, [pc, #64]	; (8000828 <MX_GPIO_Init+0x68>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a0f      	ldr	r2, [pc, #60]	; (8000828 <MX_GPIO_Init+0x68>)
 80007ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b0d      	ldr	r3, [pc, #52]	; (8000828 <MX_GPIO_Init+0x68>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007fa:	60bb      	str	r3, [r7, #8]
 80007fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	607b      	str	r3, [r7, #4]
 8000802:	4b09      	ldr	r3, [pc, #36]	; (8000828 <MX_GPIO_Init+0x68>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a08      	ldr	r2, [pc, #32]	; (8000828 <MX_GPIO_Init+0x68>)
 8000808:	f043 0301 	orr.w	r3, r3, #1
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b06      	ldr	r3, [pc, #24]	; (8000828 <MX_GPIO_Init+0x68>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0301 	and.w	r3, r3, #1
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]

}
 800081a:	bf00      	nop
 800081c:	3714      	adds	r7, #20
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	40023800 	.word	0x40023800

0800082c <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc1) {
 800082c:	b580      	push	{r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
//	uint16_t i;
//	toggle = !toggle;
	for (int i = ADC_HALF_BUFFER_SIZE; i < ADC_BUFFER_SIZE; ++i) {
 8000834:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000838:	60fb      	str	r3, [r7, #12]
 800083a:	e00a      	b.n	8000852 <HAL_ADC_ConvCpltCallback+0x26>
//		if (toggle)
			CDCBuffer[i] = ADCValues[i];
 800083c:	4a0b      	ldr	r2, [pc, #44]	; (800086c <HAL_ADC_ConvCpltCallback+0x40>)
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000844:	4a0a      	ldr	r2, [pc, #40]	; (8000870 <HAL_ADC_ConvCpltCallback+0x44>)
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = ADC_HALF_BUFFER_SIZE; i < ADC_BUFFER_SIZE; ++i) {
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	3301      	adds	r3, #1
 8000850:	60fb      	str	r3, [r7, #12]
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000858:	dbf0      	blt.n	800083c <HAL_ADC_ConvCpltCallback+0x10>
	}
//	CDCBuffer[2024] = "\n";
	//while(
			CDC_Transmit_FS(CDCBuffer, ADC_BUFFER_SIZE);// != USBD_OK){
 800085a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800085e:	4804      	ldr	r0, [pc, #16]	; (8000870 <HAL_ADC_ConvCpltCallback+0x44>)
 8000860:	f006 fe46 	bl	80074f0 <CDC_Transmit_FS>
//	CDC_Transmit_FS(ADCValues, sizeof(ADCValues));
//	HAL_Delay(1);
//	HAL_ADC_Start_DMA(hadc1, ADCValues,	ADC_BUFFER_SIZE);
//	MessageLength = snprintf(buffer, sizeof(buffer), "%6d\n", adc_buffer);
//	CDC_Transmit_FS(buffer, 7);
}
 8000864:	bf00      	nop
 8000866:	3710      	adds	r7, #16
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	200002a0 	.word	0x200002a0
 8000870:	20002300 	.word	0x20002300

08000874 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc1){
 8000874:	b480      	push	{r7}
 8000876:	b085      	sub	sp, #20
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < ADC_HALF_BUFFER_SIZE; ++i) {
 800087c:	2300      	movs	r3, #0
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	e00a      	b.n	8000898 <HAL_ADC_ConvHalfCpltCallback+0x24>
		CDCBuffer[i] = ADCValues[i];
 8000882:	4a0a      	ldr	r2, [pc, #40]	; (80008ac <HAL_ADC_ConvHalfCpltCallback+0x38>)
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800088a:	4a09      	ldr	r2, [pc, #36]	; (80008b0 <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < ADC_HALF_BUFFER_SIZE; ++i) {
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	3301      	adds	r3, #1
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800089e:	dbf0      	blt.n	8000882 <HAL_ADC_ConvHalfCpltCallback+0xe>
	}
}
 80008a0:	bf00      	nop
 80008a2:	3714      	adds	r7, #20
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr
 80008ac:	200002a0 	.word	0x200002a0
 80008b0:	20002300 	.word	0x20002300

080008b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80008ba:	e7fe      	b.n	80008ba <Error_Handler+0x6>

080008bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	607b      	str	r3, [r7, #4]
 80008c6:	4b10      	ldr	r3, [pc, #64]	; (8000908 <HAL_MspInit+0x4c>)
 80008c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ca:	4a0f      	ldr	r2, [pc, #60]	; (8000908 <HAL_MspInit+0x4c>)
 80008cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008d0:	6453      	str	r3, [r2, #68]	; 0x44
 80008d2:	4b0d      	ldr	r3, [pc, #52]	; (8000908 <HAL_MspInit+0x4c>)
 80008d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	603b      	str	r3, [r7, #0]
 80008e2:	4b09      	ldr	r3, [pc, #36]	; (8000908 <HAL_MspInit+0x4c>)
 80008e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e6:	4a08      	ldr	r2, [pc, #32]	; (8000908 <HAL_MspInit+0x4c>)
 80008e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ec:	6413      	str	r3, [r2, #64]	; 0x40
 80008ee:	4b06      	ldr	r3, [pc, #24]	; (8000908 <HAL_MspInit+0x4c>)
 80008f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008f6:	603b      	str	r3, [r7, #0]
 80008f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008fa:	bf00      	nop
 80008fc:	370c      	adds	r7, #12
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	40023800 	.word	0x40023800

0800090c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b08a      	sub	sp, #40	; 0x28
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000914:	f107 0314 	add.w	r3, r7, #20
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]
 8000920:	60da      	str	r2, [r3, #12]
 8000922:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a2f      	ldr	r2, [pc, #188]	; (80009e8 <HAL_ADC_MspInit+0xdc>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d157      	bne.n	80009de <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	613b      	str	r3, [r7, #16]
 8000932:	4b2e      	ldr	r3, [pc, #184]	; (80009ec <HAL_ADC_MspInit+0xe0>)
 8000934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000936:	4a2d      	ldr	r2, [pc, #180]	; (80009ec <HAL_ADC_MspInit+0xe0>)
 8000938:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800093c:	6453      	str	r3, [r2, #68]	; 0x44
 800093e:	4b2b      	ldr	r3, [pc, #172]	; (80009ec <HAL_ADC_MspInit+0xe0>)
 8000940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000946:	613b      	str	r3, [r7, #16]
 8000948:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	60fb      	str	r3, [r7, #12]
 800094e:	4b27      	ldr	r3, [pc, #156]	; (80009ec <HAL_ADC_MspInit+0xe0>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	4a26      	ldr	r2, [pc, #152]	; (80009ec <HAL_ADC_MspInit+0xe0>)
 8000954:	f043 0301 	orr.w	r3, r3, #1
 8000958:	6313      	str	r3, [r2, #48]	; 0x30
 800095a:	4b24      	ldr	r3, [pc, #144]	; (80009ec <HAL_ADC_MspInit+0xe0>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000966:	2301      	movs	r3, #1
 8000968:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800096a:	2303      	movs	r3, #3
 800096c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000972:	f107 0314 	add.w	r3, r7, #20
 8000976:	4619      	mov	r1, r3
 8000978:	481d      	ldr	r0, [pc, #116]	; (80009f0 <HAL_ADC_MspInit+0xe4>)
 800097a:	f001 f9eb 	bl	8001d54 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800097e:	4b1d      	ldr	r3, [pc, #116]	; (80009f4 <HAL_ADC_MspInit+0xe8>)
 8000980:	4a1d      	ldr	r2, [pc, #116]	; (80009f8 <HAL_ADC_MspInit+0xec>)
 8000982:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000984:	4b1b      	ldr	r3, [pc, #108]	; (80009f4 <HAL_ADC_MspInit+0xe8>)
 8000986:	2200      	movs	r2, #0
 8000988:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800098a:	4b1a      	ldr	r3, [pc, #104]	; (80009f4 <HAL_ADC_MspInit+0xe8>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000990:	4b18      	ldr	r3, [pc, #96]	; (80009f4 <HAL_ADC_MspInit+0xe8>)
 8000992:	2200      	movs	r2, #0
 8000994:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000996:	4b17      	ldr	r3, [pc, #92]	; (80009f4 <HAL_ADC_MspInit+0xe8>)
 8000998:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800099c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800099e:	4b15      	ldr	r3, [pc, #84]	; (80009f4 <HAL_ADC_MspInit+0xe8>)
 80009a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80009a4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80009a6:	4b13      	ldr	r3, [pc, #76]	; (80009f4 <HAL_ADC_MspInit+0xe8>)
 80009a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009ac:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80009ae:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <HAL_ADC_MspInit+0xe8>)
 80009b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009b4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80009b6:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <HAL_ADC_MspInit+0xe8>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80009bc:	4b0d      	ldr	r3, [pc, #52]	; (80009f4 <HAL_ADC_MspInit+0xe8>)
 80009be:	2200      	movs	r2, #0
 80009c0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80009c2:	480c      	ldr	r0, [pc, #48]	; (80009f4 <HAL_ADC_MspInit+0xe8>)
 80009c4:	f000 fe58 	bl	8001678 <HAL_DMA_Init>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80009ce:	f7ff ff71 	bl	80008b4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	4a07      	ldr	r2, [pc, #28]	; (80009f4 <HAL_ADC_MspInit+0xe8>)
 80009d6:	639a      	str	r2, [r3, #56]	; 0x38
 80009d8:	4a06      	ldr	r2, [pc, #24]	; (80009f4 <HAL_ADC_MspInit+0xe8>)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80009de:	bf00      	nop
 80009e0:	3728      	adds	r7, #40	; 0x28
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40012000 	.word	0x40012000
 80009ec:	40023800 	.word	0x40023800
 80009f0:	40020000 	.word	0x40020000
 80009f4:	200022a0 	.word	0x200022a0
 80009f8:	40026410 	.word	0x40026410

080009fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b085      	sub	sp, #20
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a0b      	ldr	r2, [pc, #44]	; (8000a38 <HAL_TIM_Base_MspInit+0x3c>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d10d      	bne.n	8000a2a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60fb      	str	r3, [r7, #12]
 8000a12:	4b0a      	ldr	r3, [pc, #40]	; (8000a3c <HAL_TIM_Base_MspInit+0x40>)
 8000a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a16:	4a09      	ldr	r2, [pc, #36]	; (8000a3c <HAL_TIM_Base_MspInit+0x40>)
 8000a18:	f043 0302 	orr.w	r3, r3, #2
 8000a1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a1e:	4b07      	ldr	r3, [pc, #28]	; (8000a3c <HAL_TIM_Base_MspInit+0x40>)
 8000a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a22:	f003 0302 	and.w	r3, r3, #2
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000a2a:	bf00      	nop
 8000a2c:	3714      	adds	r7, #20
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	40000400 	.word	0x40000400
 8000a3c:	40023800 	.word	0x40023800

08000a40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a44:	e7fe      	b.n	8000a44 <NMI_Handler+0x4>

08000a46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a4a:	e7fe      	b.n	8000a4a <HardFault_Handler+0x4>

08000a4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a50:	e7fe      	b.n	8000a50 <MemManage_Handler+0x4>

08000a52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a52:	b480      	push	{r7}
 8000a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a56:	e7fe      	b.n	8000a56 <BusFault_Handler+0x4>

08000a58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a5c:	e7fe      	b.n	8000a5c <UsageFault_Handler+0x4>

08000a5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a62:	bf00      	nop
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr

08000a7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr

08000a88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a8c:	f000 f8de 	bl	8000c4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a90:	bf00      	nop
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000a98:	4802      	ldr	r0, [pc, #8]	; (8000aa4 <DMA2_Stream0_IRQHandler+0x10>)
 8000a9a:	f000 fef3 	bl	8001884 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	200022a0 	.word	0x200022a0

08000aa8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000aac:	4802      	ldr	r0, [pc, #8]	; (8000ab8 <OTG_FS_IRQHandler+0x10>)
 8000aae:	f001 fc23 	bl	80022f8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	20004fa4 	.word	0x20004fa4

08000abc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b086      	sub	sp, #24
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ac4:	4a14      	ldr	r2, [pc, #80]	; (8000b18 <_sbrk+0x5c>)
 8000ac6:	4b15      	ldr	r3, [pc, #84]	; (8000b1c <_sbrk+0x60>)
 8000ac8:	1ad3      	subs	r3, r2, r3
 8000aca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ad0:	4b13      	ldr	r3, [pc, #76]	; (8000b20 <_sbrk+0x64>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d102      	bne.n	8000ade <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ad8:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <_sbrk+0x64>)
 8000ada:	4a12      	ldr	r2, [pc, #72]	; (8000b24 <_sbrk+0x68>)
 8000adc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ade:	4b10      	ldr	r3, [pc, #64]	; (8000b20 <_sbrk+0x64>)
 8000ae0:	681a      	ldr	r2, [r3, #0]
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4413      	add	r3, r2
 8000ae6:	693a      	ldr	r2, [r7, #16]
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	d207      	bcs.n	8000afc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000aec:	f007 f938 	bl	8007d60 <__errno>
 8000af0:	4602      	mov	r2, r0
 8000af2:	230c      	movs	r3, #12
 8000af4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000af6:	f04f 33ff 	mov.w	r3, #4294967295
 8000afa:	e009      	b.n	8000b10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000afc:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <_sbrk+0x64>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b02:	4b07      	ldr	r3, [pc, #28]	; (8000b20 <_sbrk+0x64>)
 8000b04:	681a      	ldr	r2, [r3, #0]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	4413      	add	r3, r2
 8000b0a:	4a05      	ldr	r2, [pc, #20]	; (8000b20 <_sbrk+0x64>)
 8000b0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b0e:	68fb      	ldr	r3, [r7, #12]
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	3718      	adds	r7, #24
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	20010000 	.word	0x20010000
 8000b1c:	00000400 	.word	0x00000400
 8000b20:	20000208 	.word	0x20000208
 8000b24:	200053b0 	.word	0x200053b0

08000b28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b2c:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <SystemInit+0x28>)
 8000b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b32:	4a07      	ldr	r2, [pc, #28]	; (8000b50 <SystemInit+0x28>)
 8000b34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b3c:	4b04      	ldr	r3, [pc, #16]	; (8000b50 <SystemInit+0x28>)
 8000b3e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b42:	609a      	str	r2, [r3, #8]
#endif
}
 8000b44:	bf00      	nop
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	e000ed00 	.word	0xe000ed00

08000b54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b8c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000b58:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000b5a:	e003      	b.n	8000b64 <LoopCopyDataInit>

08000b5c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000b5e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000b60:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000b62:	3104      	adds	r1, #4

08000b64 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000b64:	480b      	ldr	r0, [pc, #44]	; (8000b94 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000b66:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000b68:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000b6a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000b6c:	d3f6      	bcc.n	8000b5c <CopyDataInit>
  ldr  r2, =_sbss
 8000b6e:	4a0b      	ldr	r2, [pc, #44]	; (8000b9c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000b70:	e002      	b.n	8000b78 <LoopFillZerobss>

08000b72 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000b72:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000b74:	f842 3b04 	str.w	r3, [r2], #4

08000b78 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000b78:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000b7a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000b7c:	d3f9      	bcc.n	8000b72 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b7e:	f7ff ffd3 	bl	8000b28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b82:	f007 f8f3 	bl	8007d6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b86:	f7ff fca5 	bl	80004d4 <main>
  bx  lr    
 8000b8a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b8c:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 8000b90:	08007fe0 	.word	0x08007fe0
  ldr  r0, =_sdata
 8000b94:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000b98:	200001ec 	.word	0x200001ec
  ldr  r2, =_sbss
 8000b9c:	200001ec 	.word	0x200001ec
  ldr  r3, = _ebss
 8000ba0:	200053b0 	.word	0x200053b0

08000ba4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ba4:	e7fe      	b.n	8000ba4 <ADC_IRQHandler>
	...

08000ba8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bac:	4b0e      	ldr	r3, [pc, #56]	; (8000be8 <HAL_Init+0x40>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a0d      	ldr	r2, [pc, #52]	; (8000be8 <HAL_Init+0x40>)
 8000bb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bb8:	4b0b      	ldr	r3, [pc, #44]	; (8000be8 <HAL_Init+0x40>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a0a      	ldr	r2, [pc, #40]	; (8000be8 <HAL_Init+0x40>)
 8000bbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bc4:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <HAL_Init+0x40>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a07      	ldr	r2, [pc, #28]	; (8000be8 <HAL_Init+0x40>)
 8000bca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bd0:	2003      	movs	r0, #3
 8000bd2:	f000 fd0f 	bl	80015f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bd6:	2000      	movs	r0, #0
 8000bd8:	f000 f808 	bl	8000bec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bdc:	f7ff fe6e 	bl	80008bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000be0:	2300      	movs	r3, #0
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40023c00 	.word	0x40023c00

08000bec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bf4:	4b12      	ldr	r3, [pc, #72]	; (8000c40 <HAL_InitTick+0x54>)
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	4b12      	ldr	r3, [pc, #72]	; (8000c44 <HAL_InitTick+0x58>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f000 fd27 	bl	800165e <HAL_SYSTICK_Config>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
 8000c18:	e00e      	b.n	8000c38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2b0f      	cmp	r3, #15
 8000c1e:	d80a      	bhi.n	8000c36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c20:	2200      	movs	r2, #0
 8000c22:	6879      	ldr	r1, [r7, #4]
 8000c24:	f04f 30ff 	mov.w	r0, #4294967295
 8000c28:	f000 fcef 	bl	800160a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c2c:	4a06      	ldr	r2, [pc, #24]	; (8000c48 <HAL_InitTick+0x5c>)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c32:	2300      	movs	r3, #0
 8000c34:	e000      	b.n	8000c38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c36:	2301      	movs	r3, #1
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	20000000 	.word	0x20000000
 8000c44:	20000008 	.word	0x20000008
 8000c48:	20000004 	.word	0x20000004

08000c4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c50:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <HAL_IncTick+0x20>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	461a      	mov	r2, r3
 8000c56:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <HAL_IncTick+0x24>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	4a04      	ldr	r2, [pc, #16]	; (8000c70 <HAL_IncTick+0x24>)
 8000c5e:	6013      	str	r3, [r2, #0]
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	20000008 	.word	0x20000008
 8000c70:	20004300 	.word	0x20004300

08000c74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  return uwTick;
 8000c78:	4b03      	ldr	r3, [pc, #12]	; (8000c88 <HAL_GetTick+0x14>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	20004300 	.word	0x20004300

08000c8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c94:	f7ff ffee 	bl	8000c74 <HAL_GetTick>
 8000c98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ca4:	d005      	beq.n	8000cb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ca6:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <HAL_Delay+0x40>)
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	461a      	mov	r2, r3
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	4413      	add	r3, r2
 8000cb0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cb2:	bf00      	nop
 8000cb4:	f7ff ffde 	bl	8000c74 <HAL_GetTick>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	1ad3      	subs	r3, r2, r3
 8000cbe:	68fa      	ldr	r2, [r7, #12]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	d8f7      	bhi.n	8000cb4 <HAL_Delay+0x28>
  {
  }
}
 8000cc4:	bf00      	nop
 8000cc6:	3710      	adds	r7, #16
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	20000008 	.word	0x20000008

08000cd0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d101      	bne.n	8000ce6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	e033      	b.n	8000d4e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d109      	bne.n	8000d02 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000cee:	6878      	ldr	r0, [r7, #4]
 8000cf0:	f7ff fe0c 	bl	800090c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d06:	f003 0310 	and.w	r3, r3, #16
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d118      	bne.n	8000d40 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d12:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000d16:	f023 0302 	bic.w	r3, r3, #2
 8000d1a:	f043 0202 	orr.w	r2, r3, #2
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000d22:	6878      	ldr	r0, [r7, #4]
 8000d24:	f000 fa18 	bl	8001158 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d32:	f023 0303 	bic.w	r3, r3, #3
 8000d36:	f043 0201 	orr.w	r2, r3, #1
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	641a      	str	r2, [r3, #64]	; 0x40
 8000d3e:	e001      	b.n	8000d44 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000d40:	2301      	movs	r3, #1
 8000d42:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2200      	movs	r2, #0
 8000d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3710      	adds	r7, #16
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
	...

08000d58 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b086      	sub	sp, #24
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	60f8      	str	r0, [r7, #12]
 8000d60:	60b9      	str	r1, [r7, #8]
 8000d62:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8000d64:	2300      	movs	r3, #0
 8000d66:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d101      	bne.n	8000d76 <HAL_ADC_Start_DMA+0x1e>
 8000d72:	2302      	movs	r3, #2
 8000d74:	e0b1      	b.n	8000eda <HAL_ADC_Start_DMA+0x182>
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	2201      	movs	r2, #1
 8000d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	689b      	ldr	r3, [r3, #8]
 8000d84:	f003 0301 	and.w	r3, r3, #1
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d018      	beq.n	8000dbe <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	689a      	ldr	r2, [r3, #8]
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f042 0201 	orr.w	r2, r2, #1
 8000d9a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000d9c:	4b51      	ldr	r3, [pc, #324]	; (8000ee4 <HAL_ADC_Start_DMA+0x18c>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a51      	ldr	r2, [pc, #324]	; (8000ee8 <HAL_ADC_Start_DMA+0x190>)
 8000da2:	fba2 2303 	umull	r2, r3, r2, r3
 8000da6:	0c9a      	lsrs	r2, r3, #18
 8000da8:	4613      	mov	r3, r2
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	4413      	add	r3, r2
 8000dae:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8000db0:	e002      	b.n	8000db8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8000db2:	693b      	ldr	r3, [r7, #16]
 8000db4:	3b01      	subs	r3, #1
 8000db6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8000db8:	693b      	ldr	r3, [r7, #16]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d1f9      	bne.n	8000db2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	689b      	ldr	r3, [r3, #8]
 8000dc4:	f003 0301 	and.w	r3, r3, #1
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	f040 8085 	bne.w	8000ed8 <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000dd6:	f023 0301 	bic.w	r3, r3, #1
 8000dda:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d007      	beq.n	8000e00 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000df8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e0c:	d106      	bne.n	8000e1c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e12:	f023 0206 	bic.w	r2, r3, #6
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	645a      	str	r2, [r3, #68]	; 0x44
 8000e1a:	e002      	b.n	8000e22 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	2200      	movs	r2, #0
 8000e20:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	2200      	movs	r2, #0
 8000e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000e2a:	4b30      	ldr	r3, [pc, #192]	; (8000eec <HAL_ADC_Start_DMA+0x194>)
 8000e2c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e32:	4a2f      	ldr	r2, [pc, #188]	; (8000ef0 <HAL_ADC_Start_DMA+0x198>)
 8000e34:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e3a:	4a2e      	ldr	r2, [pc, #184]	; (8000ef4 <HAL_ADC_Start_DMA+0x19c>)
 8000e3c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e42:	4a2d      	ldr	r2, [pc, #180]	; (8000ef8 <HAL_ADC_Start_DMA+0x1a0>)
 8000e44:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000e4e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	685a      	ldr	r2, [r3, #4]
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000e5e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	689a      	ldr	r2, [r3, #8]
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000e6e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	334c      	adds	r3, #76	; 0x4c
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	68ba      	ldr	r2, [r7, #8]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	f000 fca8 	bl	80017d4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	f003 031f 	and.w	r3, r3, #31
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d10f      	bne.n	8000eb0 <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	689b      	ldr	r3, [r3, #8]
 8000e96:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d11c      	bne.n	8000ed8 <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	689a      	ldr	r2, [r3, #8]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000eac:	609a      	str	r2, [r3, #8]
 8000eae:	e013      	b.n	8000ed8 <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a11      	ldr	r2, [pc, #68]	; (8000efc <HAL_ADC_Start_DMA+0x1a4>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d10e      	bne.n	8000ed8 <HAL_ADC_Start_DMA+0x180>
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	689b      	ldr	r3, [r3, #8]
 8000ec0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d107      	bne.n	8000ed8 <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	689a      	ldr	r2, [r3, #8]
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000ed6:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8000ed8:	2300      	movs	r3, #0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3718      	adds	r7, #24
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	20000000 	.word	0x20000000
 8000ee8:	431bde83 	.word	0x431bde83
 8000eec:	40012300 	.word	0x40012300
 8000ef0:	08001351 	.word	0x08001351
 8000ef4:	0800140b 	.word	0x0800140b
 8000ef8:	08001427 	.word	0x08001427
 8000efc:	40012000 	.word	0x40012000

08000f00 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8000f08:	bf00      	nop
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b085      	sub	sp, #20
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d101      	bne.n	8000f30 <HAL_ADC_ConfigChannel+0x1c>
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	e105      	b.n	800113c <HAL_ADC_ConfigChannel+0x228>
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2201      	movs	r2, #1
 8000f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2b09      	cmp	r3, #9
 8000f3e:	d925      	bls.n	8000f8c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	68d9      	ldr	r1, [r3, #12]
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	b29b      	uxth	r3, r3
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	4613      	mov	r3, r2
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	4413      	add	r3, r2
 8000f54:	3b1e      	subs	r3, #30
 8000f56:	2207      	movs	r2, #7
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	43da      	mvns	r2, r3
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	400a      	ands	r2, r1
 8000f64:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	68d9      	ldr	r1, [r3, #12]
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	689a      	ldr	r2, [r3, #8]
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	b29b      	uxth	r3, r3
 8000f76:	4618      	mov	r0, r3
 8000f78:	4603      	mov	r3, r0
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	4403      	add	r3, r0
 8000f7e:	3b1e      	subs	r3, #30
 8000f80:	409a      	lsls	r2, r3
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	430a      	orrs	r2, r1
 8000f88:	60da      	str	r2, [r3, #12]
 8000f8a:	e022      	b.n	8000fd2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	6919      	ldr	r1, [r3, #16]
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	b29b      	uxth	r3, r3
 8000f98:	461a      	mov	r2, r3
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	4413      	add	r3, r2
 8000fa0:	2207      	movs	r2, #7
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	43da      	mvns	r2, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	400a      	ands	r2, r1
 8000fae:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	6919      	ldr	r1, [r3, #16]
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	689a      	ldr	r2, [r3, #8]
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	b29b      	uxth	r3, r3
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	4403      	add	r3, r0
 8000fc8:	409a      	lsls	r2, r3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	430a      	orrs	r2, r1
 8000fd0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	2b06      	cmp	r3, #6
 8000fd8:	d824      	bhi.n	8001024 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685a      	ldr	r2, [r3, #4]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	4413      	add	r3, r2
 8000fea:	3b05      	subs	r3, #5
 8000fec:	221f      	movs	r2, #31
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	43da      	mvns	r2, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	400a      	ands	r2, r1
 8000ffa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	b29b      	uxth	r3, r3
 8001008:	4618      	mov	r0, r3
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685a      	ldr	r2, [r3, #4]
 800100e:	4613      	mov	r3, r2
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	4413      	add	r3, r2
 8001014:	3b05      	subs	r3, #5
 8001016:	fa00 f203 	lsl.w	r2, r0, r3
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	430a      	orrs	r2, r1
 8001020:	635a      	str	r2, [r3, #52]	; 0x34
 8001022:	e04c      	b.n	80010be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	2b0c      	cmp	r3, #12
 800102a:	d824      	bhi.n	8001076 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685a      	ldr	r2, [r3, #4]
 8001036:	4613      	mov	r3, r2
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	4413      	add	r3, r2
 800103c:	3b23      	subs	r3, #35	; 0x23
 800103e:	221f      	movs	r2, #31
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	43da      	mvns	r2, r3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	400a      	ands	r2, r1
 800104c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	b29b      	uxth	r3, r3
 800105a:	4618      	mov	r0, r3
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685a      	ldr	r2, [r3, #4]
 8001060:	4613      	mov	r3, r2
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	4413      	add	r3, r2
 8001066:	3b23      	subs	r3, #35	; 0x23
 8001068:	fa00 f203 	lsl.w	r2, r0, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	430a      	orrs	r2, r1
 8001072:	631a      	str	r2, [r3, #48]	; 0x30
 8001074:	e023      	b.n	80010be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685a      	ldr	r2, [r3, #4]
 8001080:	4613      	mov	r3, r2
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	4413      	add	r3, r2
 8001086:	3b41      	subs	r3, #65	; 0x41
 8001088:	221f      	movs	r2, #31
 800108a:	fa02 f303 	lsl.w	r3, r2, r3
 800108e:	43da      	mvns	r2, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	400a      	ands	r2, r1
 8001096:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	4618      	mov	r0, r3
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685a      	ldr	r2, [r3, #4]
 80010aa:	4613      	mov	r3, r2
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	4413      	add	r3, r2
 80010b0:	3b41      	subs	r3, #65	; 0x41
 80010b2:	fa00 f203 	lsl.w	r2, r0, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	430a      	orrs	r2, r1
 80010bc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80010be:	4b22      	ldr	r3, [pc, #136]	; (8001148 <HAL_ADC_ConfigChannel+0x234>)
 80010c0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a21      	ldr	r2, [pc, #132]	; (800114c <HAL_ADC_ConfigChannel+0x238>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d109      	bne.n	80010e0 <HAL_ADC_ConfigChannel+0x1cc>
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2b12      	cmp	r3, #18
 80010d2:	d105      	bne.n	80010e0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a19      	ldr	r2, [pc, #100]	; (800114c <HAL_ADC_ConfigChannel+0x238>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d123      	bne.n	8001132 <HAL_ADC_ConfigChannel+0x21e>
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	2b10      	cmp	r3, #16
 80010f0:	d003      	beq.n	80010fa <HAL_ADC_ConfigChannel+0x1e6>
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2b11      	cmp	r3, #17
 80010f8:	d11b      	bne.n	8001132 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	2b10      	cmp	r3, #16
 800110c:	d111      	bne.n	8001132 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800110e:	4b10      	ldr	r3, [pc, #64]	; (8001150 <HAL_ADC_ConfigChannel+0x23c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a10      	ldr	r2, [pc, #64]	; (8001154 <HAL_ADC_ConfigChannel+0x240>)
 8001114:	fba2 2303 	umull	r2, r3, r2, r3
 8001118:	0c9a      	lsrs	r2, r3, #18
 800111a:	4613      	mov	r3, r2
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	4413      	add	r3, r2
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001124:	e002      	b.n	800112c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	3b01      	subs	r3, #1
 800112a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d1f9      	bne.n	8001126 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2200      	movs	r2, #0
 8001136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800113a:	2300      	movs	r3, #0
}
 800113c:	4618      	mov	r0, r3
 800113e:	3714      	adds	r7, #20
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	40012300 	.word	0x40012300
 800114c:	40012000 	.word	0x40012000
 8001150:	20000000 	.word	0x20000000
 8001154:	431bde83 	.word	0x431bde83

08001158 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001158:	b480      	push	{r7}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001160:	4b79      	ldr	r3, [pc, #484]	; (8001348 <ADC_Init+0x1f0>)
 8001162:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	685a      	ldr	r2, [r3, #4]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	431a      	orrs	r2, r3
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	685a      	ldr	r2, [r3, #4]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800118c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	6859      	ldr	r1, [r3, #4]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	691b      	ldr	r3, [r3, #16]
 8001198:	021a      	lsls	r2, r3, #8
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	430a      	orrs	r2, r1
 80011a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	685a      	ldr	r2, [r3, #4]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80011b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	6859      	ldr	r1, [r3, #4]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	689a      	ldr	r2, [r3, #8]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	430a      	orrs	r2, r1
 80011c2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	689a      	ldr	r2, [r3, #8]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80011d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	6899      	ldr	r1, [r3, #8]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	68da      	ldr	r2, [r3, #12]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	430a      	orrs	r2, r1
 80011e4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ea:	4a58      	ldr	r2, [pc, #352]	; (800134c <ADC_Init+0x1f4>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d022      	beq.n	8001236 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	689a      	ldr	r2, [r3, #8]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80011fe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	6899      	ldr	r1, [r3, #8]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	430a      	orrs	r2, r1
 8001210:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	689a      	ldr	r2, [r3, #8]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001220:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	6899      	ldr	r1, [r3, #8]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	430a      	orrs	r2, r1
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	e00f      	b.n	8001256 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	689a      	ldr	r2, [r3, #8]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001244:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	689a      	ldr	r2, [r3, #8]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001254:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	689a      	ldr	r2, [r3, #8]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f022 0202 	bic.w	r2, r2, #2
 8001264:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	6899      	ldr	r1, [r3, #8]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	7e1b      	ldrb	r3, [r3, #24]
 8001270:	005a      	lsls	r2, r3, #1
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	430a      	orrs	r2, r1
 8001278:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d01b      	beq.n	80012bc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	685a      	ldr	r2, [r3, #4]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001292:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	685a      	ldr	r2, [r3, #4]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80012a2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	6859      	ldr	r1, [r3, #4]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ae:	3b01      	subs	r3, #1
 80012b0:	035a      	lsls	r2, r3, #13
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	430a      	orrs	r2, r1
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	e007      	b.n	80012cc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	685a      	ldr	r2, [r3, #4]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80012ca:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80012da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	69db      	ldr	r3, [r3, #28]
 80012e6:	3b01      	subs	r3, #1
 80012e8:	051a      	lsls	r2, r3, #20
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	430a      	orrs	r2, r1
 80012f0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	689a      	ldr	r2, [r3, #8]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001300:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	6899      	ldr	r1, [r3, #8]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800130e:	025a      	lsls	r2, r3, #9
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	430a      	orrs	r2, r1
 8001316:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	689a      	ldr	r2, [r3, #8]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001326:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	6899      	ldr	r1, [r3, #8]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	695b      	ldr	r3, [r3, #20]
 8001332:	029a      	lsls	r2, r3, #10
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	430a      	orrs	r2, r1
 800133a:	609a      	str	r2, [r3, #8]
}
 800133c:	bf00      	nop
 800133e:	3714      	adds	r7, #20
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr
 8001348:	40012300 	.word	0x40012300
 800134c:	0f000001 	.word	0x0f000001

08001350 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800135c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001362:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001366:	2b00      	cmp	r3, #0
 8001368:	d13c      	bne.n	80013e4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001380:	2b00      	cmp	r3, #0
 8001382:	d12b      	bne.n	80013dc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001388:	2b00      	cmp	r3, #0
 800138a:	d127      	bne.n	80013dc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001392:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001396:	2b00      	cmp	r3, #0
 8001398:	d006      	beq.n	80013a8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d119      	bne.n	80013dc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	685a      	ldr	r2, [r3, #4]
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f022 0220 	bic.w	r2, r2, #32
 80013b6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d105      	bne.n	80013dc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d4:	f043 0201 	orr.w	r2, r3, #1
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80013dc:	68f8      	ldr	r0, [r7, #12]
 80013de:	f7ff fa25 	bl	800082c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80013e2:	e00e      	b.n	8001402 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e8:	f003 0310 	and.w	r3, r3, #16
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d003      	beq.n	80013f8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80013f0:	68f8      	ldr	r0, [r7, #12]
 80013f2:	f7ff fd85 	bl	8000f00 <HAL_ADC_ErrorCallback>
}
 80013f6:	e004      	b.n	8001402 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	4798      	blx	r3
}
 8001402:	bf00      	nop
 8001404:	3710      	adds	r7, #16
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}

0800140a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800140a:	b580      	push	{r7, lr}
 800140c:	b084      	sub	sp, #16
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001416:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001418:	68f8      	ldr	r0, [r7, #12]
 800141a:	f7ff fa2b 	bl	8000874 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800141e:	bf00      	nop
 8001420:	3710      	adds	r7, #16
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001426:	b580      	push	{r7, lr}
 8001428:	b084      	sub	sp, #16
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001432:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	2240      	movs	r2, #64	; 0x40
 8001438:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143e:	f043 0204 	orr.w	r2, r3, #4
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001446:	68f8      	ldr	r0, [r7, #12]
 8001448:	f7ff fd5a 	bl	8000f00 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800144c:	bf00      	nop
 800144e:	3710      	adds	r7, #16
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001454:	b480      	push	{r7}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	f003 0307 	and.w	r3, r3, #7
 8001462:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001464:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <__NVIC_SetPriorityGrouping+0x44>)
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800146a:	68ba      	ldr	r2, [r7, #8]
 800146c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001470:	4013      	ands	r3, r2
 8001472:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800147c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001480:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001484:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001486:	4a04      	ldr	r2, [pc, #16]	; (8001498 <__NVIC_SetPriorityGrouping+0x44>)
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	60d3      	str	r3, [r2, #12]
}
 800148c:	bf00      	nop
 800148e:	3714      	adds	r7, #20
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr
 8001498:	e000ed00 	.word	0xe000ed00

0800149c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014a0:	4b04      	ldr	r3, [pc, #16]	; (80014b4 <__NVIC_GetPriorityGrouping+0x18>)
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	0a1b      	lsrs	r3, r3, #8
 80014a6:	f003 0307 	and.w	r3, r3, #7
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	e000ed00 	.word	0xe000ed00

080014b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	db0b      	blt.n	80014e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	f003 021f 	and.w	r2, r3, #31
 80014d0:	4907      	ldr	r1, [pc, #28]	; (80014f0 <__NVIC_EnableIRQ+0x38>)
 80014d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d6:	095b      	lsrs	r3, r3, #5
 80014d8:	2001      	movs	r0, #1
 80014da:	fa00 f202 	lsl.w	r2, r0, r2
 80014de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014e2:	bf00      	nop
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	e000e100 	.word	0xe000e100

080014f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	6039      	str	r1, [r7, #0]
 80014fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001504:	2b00      	cmp	r3, #0
 8001506:	db0a      	blt.n	800151e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	b2da      	uxtb	r2, r3
 800150c:	490c      	ldr	r1, [pc, #48]	; (8001540 <__NVIC_SetPriority+0x4c>)
 800150e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001512:	0112      	lsls	r2, r2, #4
 8001514:	b2d2      	uxtb	r2, r2
 8001516:	440b      	add	r3, r1
 8001518:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800151c:	e00a      	b.n	8001534 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	b2da      	uxtb	r2, r3
 8001522:	4908      	ldr	r1, [pc, #32]	; (8001544 <__NVIC_SetPriority+0x50>)
 8001524:	79fb      	ldrb	r3, [r7, #7]
 8001526:	f003 030f 	and.w	r3, r3, #15
 800152a:	3b04      	subs	r3, #4
 800152c:	0112      	lsls	r2, r2, #4
 800152e:	b2d2      	uxtb	r2, r2
 8001530:	440b      	add	r3, r1
 8001532:	761a      	strb	r2, [r3, #24]
}
 8001534:	bf00      	nop
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr
 8001540:	e000e100 	.word	0xe000e100
 8001544:	e000ed00 	.word	0xe000ed00

08001548 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001548:	b480      	push	{r7}
 800154a:	b089      	sub	sp, #36	; 0x24
 800154c:	af00      	add	r7, sp, #0
 800154e:	60f8      	str	r0, [r7, #12]
 8001550:	60b9      	str	r1, [r7, #8]
 8001552:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	f003 0307 	and.w	r3, r3, #7
 800155a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	f1c3 0307 	rsb	r3, r3, #7
 8001562:	2b04      	cmp	r3, #4
 8001564:	bf28      	it	cs
 8001566:	2304      	movcs	r3, #4
 8001568:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	3304      	adds	r3, #4
 800156e:	2b06      	cmp	r3, #6
 8001570:	d902      	bls.n	8001578 <NVIC_EncodePriority+0x30>
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	3b03      	subs	r3, #3
 8001576:	e000      	b.n	800157a <NVIC_EncodePriority+0x32>
 8001578:	2300      	movs	r3, #0
 800157a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800157c:	f04f 32ff 	mov.w	r2, #4294967295
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	43da      	mvns	r2, r3
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	401a      	ands	r2, r3
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001590:	f04f 31ff 	mov.w	r1, #4294967295
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	fa01 f303 	lsl.w	r3, r1, r3
 800159a:	43d9      	mvns	r1, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a0:	4313      	orrs	r3, r2
         );
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3724      	adds	r7, #36	; 0x24
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
	...

080015b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	3b01      	subs	r3, #1
 80015bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015c0:	d301      	bcc.n	80015c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015c2:	2301      	movs	r3, #1
 80015c4:	e00f      	b.n	80015e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015c6:	4a0a      	ldr	r2, [pc, #40]	; (80015f0 <SysTick_Config+0x40>)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	3b01      	subs	r3, #1
 80015cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015ce:	210f      	movs	r1, #15
 80015d0:	f04f 30ff 	mov.w	r0, #4294967295
 80015d4:	f7ff ff8e 	bl	80014f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015d8:	4b05      	ldr	r3, [pc, #20]	; (80015f0 <SysTick_Config+0x40>)
 80015da:	2200      	movs	r2, #0
 80015dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015de:	4b04      	ldr	r3, [pc, #16]	; (80015f0 <SysTick_Config+0x40>)
 80015e0:	2207      	movs	r2, #7
 80015e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	e000e010 	.word	0xe000e010

080015f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f7ff ff29 	bl	8001454 <__NVIC_SetPriorityGrouping>
}
 8001602:	bf00      	nop
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800160a:	b580      	push	{r7, lr}
 800160c:	b086      	sub	sp, #24
 800160e:	af00      	add	r7, sp, #0
 8001610:	4603      	mov	r3, r0
 8001612:	60b9      	str	r1, [r7, #8]
 8001614:	607a      	str	r2, [r7, #4]
 8001616:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001618:	2300      	movs	r3, #0
 800161a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800161c:	f7ff ff3e 	bl	800149c <__NVIC_GetPriorityGrouping>
 8001620:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	68b9      	ldr	r1, [r7, #8]
 8001626:	6978      	ldr	r0, [r7, #20]
 8001628:	f7ff ff8e 	bl	8001548 <NVIC_EncodePriority>
 800162c:	4602      	mov	r2, r0
 800162e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001632:	4611      	mov	r1, r2
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff ff5d 	bl	80014f4 <__NVIC_SetPriority>
}
 800163a:	bf00      	nop
 800163c:	3718      	adds	r7, #24
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001642:	b580      	push	{r7, lr}
 8001644:	b082      	sub	sp, #8
 8001646:	af00      	add	r7, sp, #0
 8001648:	4603      	mov	r3, r0
 800164a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800164c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff ff31 	bl	80014b8 <__NVIC_EnableIRQ>
}
 8001656:	bf00      	nop
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800165e:	b580      	push	{r7, lr}
 8001660:	b082      	sub	sp, #8
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f7ff ffa2 	bl	80015b0 <SysTick_Config>
 800166c:	4603      	mov	r3, r0
}
 800166e:	4618      	mov	r0, r3
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
	...

08001678 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b086      	sub	sp, #24
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001680:	2300      	movs	r3, #0
 8001682:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001684:	f7ff faf6 	bl	8000c74 <HAL_GetTick>
 8001688:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d101      	bne.n	8001694 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e099      	b.n	80017c8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2200      	movs	r2, #0
 8001698:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2202      	movs	r2, #2
 80016a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f022 0201 	bic.w	r2, r2, #1
 80016b2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016b4:	e00f      	b.n	80016d6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016b6:	f7ff fadd 	bl	8000c74 <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	2b05      	cmp	r3, #5
 80016c2:	d908      	bls.n	80016d6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2220      	movs	r2, #32
 80016c8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2203      	movs	r2, #3
 80016ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e078      	b.n	80017c8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 0301 	and.w	r3, r3, #1
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d1e8      	bne.n	80016b6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80016ec:	697a      	ldr	r2, [r7, #20]
 80016ee:	4b38      	ldr	r3, [pc, #224]	; (80017d0 <HAL_DMA_Init+0x158>)
 80016f0:	4013      	ands	r3, r2
 80016f2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685a      	ldr	r2, [r3, #4]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001702:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	691b      	ldr	r3, [r3, #16]
 8001708:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800170e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800171a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6a1b      	ldr	r3, [r3, #32]
 8001720:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001722:	697a      	ldr	r2, [r7, #20]
 8001724:	4313      	orrs	r3, r2
 8001726:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172c:	2b04      	cmp	r3, #4
 800172e:	d107      	bne.n	8001740 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001738:	4313      	orrs	r3, r2
 800173a:	697a      	ldr	r2, [r7, #20]
 800173c:	4313      	orrs	r3, r2
 800173e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	697a      	ldr	r2, [r7, #20]
 8001746:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	695b      	ldr	r3, [r3, #20]
 800174e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	f023 0307 	bic.w	r3, r3, #7
 8001756:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175c:	697a      	ldr	r2, [r7, #20]
 800175e:	4313      	orrs	r3, r2
 8001760:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001766:	2b04      	cmp	r3, #4
 8001768:	d117      	bne.n	800179a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800176e:	697a      	ldr	r2, [r7, #20]
 8001770:	4313      	orrs	r3, r2
 8001772:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001778:	2b00      	cmp	r3, #0
 800177a:	d00e      	beq.n	800179a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f000 fa6f 	bl	8001c60 <DMA_CheckFifoParam>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d008      	beq.n	800179a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2240      	movs	r2, #64	; 0x40
 800178c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2201      	movs	r2, #1
 8001792:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001796:	2301      	movs	r3, #1
 8001798:	e016      	b.n	80017c8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	697a      	ldr	r2, [r7, #20]
 80017a0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f000 fa26 	bl	8001bf4 <DMA_CalcBaseAndBitshift>
 80017a8:	4603      	mov	r3, r0
 80017aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017b0:	223f      	movs	r2, #63	; 0x3f
 80017b2:	409a      	lsls	r2, r3
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2200      	movs	r2, #0
 80017bc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2201      	movs	r2, #1
 80017c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80017c6:	2300      	movs	r3, #0
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3718      	adds	r7, #24
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	f010803f 	.word	0xf010803f

080017d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b086      	sub	sp, #24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	60f8      	str	r0, [r7, #12]
 80017dc:	60b9      	str	r1, [r7, #8]
 80017de:	607a      	str	r2, [r7, #4]
 80017e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80017e2:	2300      	movs	r3, #0
 80017e4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d101      	bne.n	80017fa <HAL_DMA_Start_IT+0x26>
 80017f6:	2302      	movs	r3, #2
 80017f8:	e040      	b.n	800187c <HAL_DMA_Start_IT+0xa8>
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	2201      	movs	r2, #1
 80017fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001808:	b2db      	uxtb	r3, r3
 800180a:	2b01      	cmp	r3, #1
 800180c:	d12f      	bne.n	800186e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	2202      	movs	r2, #2
 8001812:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2200      	movs	r2, #0
 800181a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	68b9      	ldr	r1, [r7, #8]
 8001822:	68f8      	ldr	r0, [r7, #12]
 8001824:	f000 f9b8 	bl	8001b98 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800182c:	223f      	movs	r2, #63	; 0x3f
 800182e:	409a      	lsls	r2, r3
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f042 0216 	orr.w	r2, r2, #22
 8001842:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001848:	2b00      	cmp	r3, #0
 800184a:	d007      	beq.n	800185c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f042 0208 	orr.w	r2, r2, #8
 800185a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f042 0201 	orr.w	r2, r2, #1
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	e005      	b.n	800187a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	2200      	movs	r2, #0
 8001872:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001876:	2302      	movs	r3, #2
 8001878:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800187a:	7dfb      	ldrb	r3, [r7, #23]
}
 800187c:	4618      	mov	r0, r3
 800187e:	3718      	adds	r7, #24
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b086      	sub	sp, #24
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800188c:	2300      	movs	r3, #0
 800188e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001890:	4b92      	ldr	r3, [pc, #584]	; (8001adc <HAL_DMA_IRQHandler+0x258>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a92      	ldr	r2, [pc, #584]	; (8001ae0 <HAL_DMA_IRQHandler+0x25c>)
 8001896:	fba2 2303 	umull	r2, r3, r2, r3
 800189a:	0a9b      	lsrs	r3, r3, #10
 800189c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018ae:	2208      	movs	r2, #8
 80018b0:	409a      	lsls	r2, r3
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	4013      	ands	r3, r2
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d01a      	beq.n	80018f0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0304 	and.w	r3, r3, #4
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d013      	beq.n	80018f0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f022 0204 	bic.w	r2, r2, #4
 80018d6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018dc:	2208      	movs	r2, #8
 80018de:	409a      	lsls	r2, r3
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018e8:	f043 0201 	orr.w	r2, r3, #1
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018f4:	2201      	movs	r2, #1
 80018f6:	409a      	lsls	r2, r3
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	4013      	ands	r3, r2
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d012      	beq.n	8001926 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	695b      	ldr	r3, [r3, #20]
 8001906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800190a:	2b00      	cmp	r3, #0
 800190c:	d00b      	beq.n	8001926 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001912:	2201      	movs	r2, #1
 8001914:	409a      	lsls	r2, r3
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800191e:	f043 0202 	orr.w	r2, r3, #2
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800192a:	2204      	movs	r2, #4
 800192c:	409a      	lsls	r2, r3
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	4013      	ands	r3, r2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d012      	beq.n	800195c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0302 	and.w	r3, r3, #2
 8001940:	2b00      	cmp	r3, #0
 8001942:	d00b      	beq.n	800195c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001948:	2204      	movs	r2, #4
 800194a:	409a      	lsls	r2, r3
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001954:	f043 0204 	orr.w	r2, r3, #4
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001960:	2210      	movs	r2, #16
 8001962:	409a      	lsls	r2, r3
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	4013      	ands	r3, r2
 8001968:	2b00      	cmp	r3, #0
 800196a:	d043      	beq.n	80019f4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0308 	and.w	r3, r3, #8
 8001976:	2b00      	cmp	r3, #0
 8001978:	d03c      	beq.n	80019f4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800197e:	2210      	movs	r2, #16
 8001980:	409a      	lsls	r2, r3
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d018      	beq.n	80019c6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d108      	bne.n	80019b4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d024      	beq.n	80019f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	4798      	blx	r3
 80019b2:	e01f      	b.n	80019f4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d01b      	beq.n	80019f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	4798      	blx	r3
 80019c4:	e016      	b.n	80019f4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d107      	bne.n	80019e4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f022 0208 	bic.w	r2, r2, #8
 80019e2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d003      	beq.n	80019f4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019f8:	2220      	movs	r2, #32
 80019fa:	409a      	lsls	r2, r3
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	4013      	ands	r3, r2
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	f000 808e 	beq.w	8001b22 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0310 	and.w	r3, r3, #16
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	f000 8086 	beq.w	8001b22 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a1a:	2220      	movs	r2, #32
 8001a1c:	409a      	lsls	r2, r3
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	2b05      	cmp	r3, #5
 8001a2c:	d136      	bne.n	8001a9c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f022 0216 	bic.w	r2, r2, #22
 8001a3c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	695a      	ldr	r2, [r3, #20]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a4c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d103      	bne.n	8001a5e <HAL_DMA_IRQHandler+0x1da>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d007      	beq.n	8001a6e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f022 0208 	bic.w	r2, r2, #8
 8001a6c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a72:	223f      	movs	r2, #63	; 0x3f
 8001a74:	409a      	lsls	r2, r3
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2201      	movs	r2, #1
 8001a86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d07d      	beq.n	8001b8e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	4798      	blx	r3
        }
        return;
 8001a9a:	e078      	b.n	8001b8e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d01c      	beq.n	8001ae4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d108      	bne.n	8001aca <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d030      	beq.n	8001b22 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	4798      	blx	r3
 8001ac8:	e02b      	b.n	8001b22 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d027      	beq.n	8001b22 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	4798      	blx	r3
 8001ada:	e022      	b.n	8001b22 <HAL_DMA_IRQHandler+0x29e>
 8001adc:	20000000 	.word	0x20000000
 8001ae0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d10f      	bne.n	8001b12 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f022 0210 	bic.w	r2, r2, #16
 8001b00:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d003      	beq.n	8001b22 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d032      	beq.n	8001b90 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d022      	beq.n	8001b7c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2205      	movs	r2, #5
 8001b3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f022 0201 	bic.w	r2, r2, #1
 8001b4c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	3301      	adds	r3, #1
 8001b52:	60bb      	str	r3, [r7, #8]
 8001b54:	697a      	ldr	r2, [r7, #20]
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d307      	bcc.n	8001b6a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0301 	and.w	r3, r3, #1
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d1f2      	bne.n	8001b4e <HAL_DMA_IRQHandler+0x2ca>
 8001b68:	e000      	b.n	8001b6c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001b6a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2201      	movs	r2, #1
 8001b78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d005      	beq.n	8001b90 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	4798      	blx	r3
 8001b8c:	e000      	b.n	8001b90 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001b8e:	bf00      	nop
    }
  }
}
 8001b90:	3718      	adds	r7, #24
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop

08001b98 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
 8001ba4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001bb4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	683a      	ldr	r2, [r7, #0]
 8001bbc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	2b40      	cmp	r3, #64	; 0x40
 8001bc4:	d108      	bne.n	8001bd8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	68ba      	ldr	r2, [r7, #8]
 8001bd4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001bd6:	e007      	b.n	8001be8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	68ba      	ldr	r2, [r7, #8]
 8001bde:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	60da      	str	r2, [r3, #12]
}
 8001be8:	bf00      	nop
 8001bea:	3714      	adds	r7, #20
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	3b10      	subs	r3, #16
 8001c04:	4a14      	ldr	r2, [pc, #80]	; (8001c58 <DMA_CalcBaseAndBitshift+0x64>)
 8001c06:	fba2 2303 	umull	r2, r3, r2, r3
 8001c0a:	091b      	lsrs	r3, r3, #4
 8001c0c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001c0e:	4a13      	ldr	r2, [pc, #76]	; (8001c5c <DMA_CalcBaseAndBitshift+0x68>)
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	4413      	add	r3, r2
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	461a      	mov	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2b03      	cmp	r3, #3
 8001c20:	d909      	bls.n	8001c36 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c2a:	f023 0303 	bic.w	r3, r3, #3
 8001c2e:	1d1a      	adds	r2, r3, #4
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	659a      	str	r2, [r3, #88]	; 0x58
 8001c34:	e007      	b.n	8001c46 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c3e:	f023 0303 	bic.w	r3, r3, #3
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3714      	adds	r7, #20
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	aaaaaaab 	.word	0xaaaaaaab
 8001c5c:	08007fc8 	.word	0x08007fc8

08001c60 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c70:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	699b      	ldr	r3, [r3, #24]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d11f      	bne.n	8001cba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	2b03      	cmp	r3, #3
 8001c7e:	d855      	bhi.n	8001d2c <DMA_CheckFifoParam+0xcc>
 8001c80:	a201      	add	r2, pc, #4	; (adr r2, 8001c88 <DMA_CheckFifoParam+0x28>)
 8001c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c86:	bf00      	nop
 8001c88:	08001c99 	.word	0x08001c99
 8001c8c:	08001cab 	.word	0x08001cab
 8001c90:	08001c99 	.word	0x08001c99
 8001c94:	08001d2d 	.word	0x08001d2d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d045      	beq.n	8001d30 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ca8:	e042      	b.n	8001d30 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001cb2:	d13f      	bne.n	8001d34 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001cb8:	e03c      	b.n	8001d34 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	699b      	ldr	r3, [r3, #24]
 8001cbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cc2:	d121      	bne.n	8001d08 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	2b03      	cmp	r3, #3
 8001cc8:	d836      	bhi.n	8001d38 <DMA_CheckFifoParam+0xd8>
 8001cca:	a201      	add	r2, pc, #4	; (adr r2, 8001cd0 <DMA_CheckFifoParam+0x70>)
 8001ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cd0:	08001ce1 	.word	0x08001ce1
 8001cd4:	08001ce7 	.word	0x08001ce7
 8001cd8:	08001ce1 	.word	0x08001ce1
 8001cdc:	08001cf9 	.word	0x08001cf9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	73fb      	strb	r3, [r7, #15]
      break;
 8001ce4:	e02f      	b.n	8001d46 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d024      	beq.n	8001d3c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001cf6:	e021      	b.n	8001d3c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cfc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d00:	d11e      	bne.n	8001d40 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001d06:	e01b      	b.n	8001d40 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d902      	bls.n	8001d14 <DMA_CheckFifoParam+0xb4>
 8001d0e:	2b03      	cmp	r3, #3
 8001d10:	d003      	beq.n	8001d1a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001d12:	e018      	b.n	8001d46 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	73fb      	strb	r3, [r7, #15]
      break;
 8001d18:	e015      	b.n	8001d46 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d00e      	beq.n	8001d44 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	73fb      	strb	r3, [r7, #15]
      break;
 8001d2a:	e00b      	b.n	8001d44 <DMA_CheckFifoParam+0xe4>
      break;
 8001d2c:	bf00      	nop
 8001d2e:	e00a      	b.n	8001d46 <DMA_CheckFifoParam+0xe6>
      break;
 8001d30:	bf00      	nop
 8001d32:	e008      	b.n	8001d46 <DMA_CheckFifoParam+0xe6>
      break;
 8001d34:	bf00      	nop
 8001d36:	e006      	b.n	8001d46 <DMA_CheckFifoParam+0xe6>
      break;
 8001d38:	bf00      	nop
 8001d3a:	e004      	b.n	8001d46 <DMA_CheckFifoParam+0xe6>
      break;
 8001d3c:	bf00      	nop
 8001d3e:	e002      	b.n	8001d46 <DMA_CheckFifoParam+0xe6>
      break;   
 8001d40:	bf00      	nop
 8001d42:	e000      	b.n	8001d46 <DMA_CheckFifoParam+0xe6>
      break;
 8001d44:	bf00      	nop
    }
  } 
  
  return status; 
 8001d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3714      	adds	r7, #20
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b089      	sub	sp, #36	; 0x24
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d62:	2300      	movs	r3, #0
 8001d64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d66:	2300      	movs	r3, #0
 8001d68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	61fb      	str	r3, [r7, #28]
 8001d6e:	e159      	b.n	8002024 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d70:	2201      	movs	r2, #1
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	697a      	ldr	r2, [r7, #20]
 8001d80:	4013      	ands	r3, r2
 8001d82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d84:	693a      	ldr	r2, [r7, #16]
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	f040 8148 	bne.w	800201e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d00b      	beq.n	8001dae <HAL_GPIO_Init+0x5a>
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d007      	beq.n	8001dae <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001da2:	2b11      	cmp	r3, #17
 8001da4:	d003      	beq.n	8001dae <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	2b12      	cmp	r3, #18
 8001dac:	d130      	bne.n	8001e10 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	2203      	movs	r2, #3
 8001dba:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbe:	43db      	mvns	r3, r3
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	68da      	ldr	r2, [r3, #12]
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001de4:	2201      	movs	r2, #1
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	43db      	mvns	r3, r3
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	4013      	ands	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	091b      	lsrs	r3, r3, #4
 8001dfa:	f003 0201 	and.w	r2, r3, #1
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	2203      	movs	r2, #3
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	43db      	mvns	r3, r3
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	4013      	ands	r3, r2
 8001e26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	689a      	ldr	r2, [r3, #8]
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d003      	beq.n	8001e50 <HAL_GPIO_Init+0xfc>
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	2b12      	cmp	r3, #18
 8001e4e:	d123      	bne.n	8001e98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	08da      	lsrs	r2, r3, #3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	3208      	adds	r2, #8
 8001e58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	f003 0307 	and.w	r3, r3, #7
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	220f      	movs	r2, #15
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	4013      	ands	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	691a      	ldr	r2, [r3, #16]
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	f003 0307 	and.w	r3, r3, #7
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	08da      	lsrs	r2, r3, #3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	3208      	adds	r2, #8
 8001e92:	69b9      	ldr	r1, [r7, #24]
 8001e94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	2203      	movs	r2, #3
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	43db      	mvns	r3, r3
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	4013      	ands	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f003 0203 	and.w	r2, r3, #3
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	f000 80a2 	beq.w	800201e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eda:	2300      	movs	r3, #0
 8001edc:	60fb      	str	r3, [r7, #12]
 8001ede:	4b56      	ldr	r3, [pc, #344]	; (8002038 <HAL_GPIO_Init+0x2e4>)
 8001ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee2:	4a55      	ldr	r2, [pc, #340]	; (8002038 <HAL_GPIO_Init+0x2e4>)
 8001ee4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ee8:	6453      	str	r3, [r2, #68]	; 0x44
 8001eea:	4b53      	ldr	r3, [pc, #332]	; (8002038 <HAL_GPIO_Init+0x2e4>)
 8001eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ef6:	4a51      	ldr	r2, [pc, #324]	; (800203c <HAL_GPIO_Init+0x2e8>)
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	089b      	lsrs	r3, r3, #2
 8001efc:	3302      	adds	r3, #2
 8001efe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	f003 0303 	and.w	r3, r3, #3
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	220f      	movs	r2, #15
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	43db      	mvns	r3, r3
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	4013      	ands	r3, r2
 8001f18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a48      	ldr	r2, [pc, #288]	; (8002040 <HAL_GPIO_Init+0x2ec>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d019      	beq.n	8001f56 <HAL_GPIO_Init+0x202>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a47      	ldr	r2, [pc, #284]	; (8002044 <HAL_GPIO_Init+0x2f0>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d013      	beq.n	8001f52 <HAL_GPIO_Init+0x1fe>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a46      	ldr	r2, [pc, #280]	; (8002048 <HAL_GPIO_Init+0x2f4>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d00d      	beq.n	8001f4e <HAL_GPIO_Init+0x1fa>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a45      	ldr	r2, [pc, #276]	; (800204c <HAL_GPIO_Init+0x2f8>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d007      	beq.n	8001f4a <HAL_GPIO_Init+0x1f6>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a44      	ldr	r2, [pc, #272]	; (8002050 <HAL_GPIO_Init+0x2fc>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d101      	bne.n	8001f46 <HAL_GPIO_Init+0x1f2>
 8001f42:	2304      	movs	r3, #4
 8001f44:	e008      	b.n	8001f58 <HAL_GPIO_Init+0x204>
 8001f46:	2307      	movs	r3, #7
 8001f48:	e006      	b.n	8001f58 <HAL_GPIO_Init+0x204>
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e004      	b.n	8001f58 <HAL_GPIO_Init+0x204>
 8001f4e:	2302      	movs	r3, #2
 8001f50:	e002      	b.n	8001f58 <HAL_GPIO_Init+0x204>
 8001f52:	2301      	movs	r3, #1
 8001f54:	e000      	b.n	8001f58 <HAL_GPIO_Init+0x204>
 8001f56:	2300      	movs	r3, #0
 8001f58:	69fa      	ldr	r2, [r7, #28]
 8001f5a:	f002 0203 	and.w	r2, r2, #3
 8001f5e:	0092      	lsls	r2, r2, #2
 8001f60:	4093      	lsls	r3, r2
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f68:	4934      	ldr	r1, [pc, #208]	; (800203c <HAL_GPIO_Init+0x2e8>)
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	089b      	lsrs	r3, r3, #2
 8001f6e:	3302      	adds	r3, #2
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f76:	4b37      	ldr	r3, [pc, #220]	; (8002054 <HAL_GPIO_Init+0x300>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	4013      	ands	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d003      	beq.n	8001f9a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f9a:	4a2e      	ldr	r2, [pc, #184]	; (8002054 <HAL_GPIO_Init+0x300>)
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001fa0:	4b2c      	ldr	r3, [pc, #176]	; (8002054 <HAL_GPIO_Init+0x300>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	4013      	ands	r3, r2
 8001fae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d003      	beq.n	8001fc4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fc4:	4a23      	ldr	r2, [pc, #140]	; (8002054 <HAL_GPIO_Init+0x300>)
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fca:	4b22      	ldr	r3, [pc, #136]	; (8002054 <HAL_GPIO_Init+0x300>)
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	43db      	mvns	r3, r3
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d003      	beq.n	8001fee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fee:	4a19      	ldr	r2, [pc, #100]	; (8002054 <HAL_GPIO_Init+0x300>)
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ff4:	4b17      	ldr	r3, [pc, #92]	; (8002054 <HAL_GPIO_Init+0x300>)
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	4013      	ands	r3, r2
 8002002:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d003      	beq.n	8002018 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	4313      	orrs	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002018:	4a0e      	ldr	r2, [pc, #56]	; (8002054 <HAL_GPIO_Init+0x300>)
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	3301      	adds	r3, #1
 8002022:	61fb      	str	r3, [r7, #28]
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	2b0f      	cmp	r3, #15
 8002028:	f67f aea2 	bls.w	8001d70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800202c:	bf00      	nop
 800202e:	3724      	adds	r7, #36	; 0x24
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr
 8002038:	40023800 	.word	0x40023800
 800203c:	40013800 	.word	0x40013800
 8002040:	40020000 	.word	0x40020000
 8002044:	40020400 	.word	0x40020400
 8002048:	40020800 	.word	0x40020800
 800204c:	40020c00 	.word	0x40020c00
 8002050:	40021000 	.word	0x40021000
 8002054:	40013c00 	.word	0x40013c00

08002058 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002058:	b5f0      	push	{r4, r5, r6, r7, lr}
 800205a:	b08f      	sub	sp, #60	; 0x3c
 800205c:	af0a      	add	r7, sp, #40	; 0x28
 800205e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d101      	bne.n	800206a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e10f      	b.n	800228a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002076:	b2db      	uxtb	r3, r3
 8002078:	2b00      	cmp	r3, #0
 800207a:	d106      	bne.n	800208a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f005 fb79 	bl	800777c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2203      	movs	r2, #3
 800208e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800209a:	2b00      	cmp	r3, #0
 800209c:	d102      	bne.n	80020a4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4618      	mov	r0, r3
 80020aa:	f002 fb32 	bl	8004712 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	603b      	str	r3, [r7, #0]
 80020b4:	687e      	ldr	r6, [r7, #4]
 80020b6:	466d      	mov	r5, sp
 80020b8:	f106 0410 	add.w	r4, r6, #16
 80020bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020c4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020c8:	e885 0003 	stmia.w	r5, {r0, r1}
 80020cc:	1d33      	adds	r3, r6, #4
 80020ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020d0:	6838      	ldr	r0, [r7, #0]
 80020d2:	f002 fa09 	bl	80044e8 <USB_CoreInit>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d005      	beq.n	80020e8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2202      	movs	r2, #2
 80020e0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e0d0      	b.n	800228a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2100      	movs	r1, #0
 80020ee:	4618      	mov	r0, r3
 80020f0:	f002 fb20 	bl	8004734 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020f4:	2300      	movs	r3, #0
 80020f6:	73fb      	strb	r3, [r7, #15]
 80020f8:	e04a      	b.n	8002190 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80020fa:	7bfa      	ldrb	r2, [r7, #15]
 80020fc:	6879      	ldr	r1, [r7, #4]
 80020fe:	4613      	mov	r3, r2
 8002100:	00db      	lsls	r3, r3, #3
 8002102:	1a9b      	subs	r3, r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	440b      	add	r3, r1
 8002108:	333d      	adds	r3, #61	; 0x3d
 800210a:	2201      	movs	r2, #1
 800210c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800210e:	7bfa      	ldrb	r2, [r7, #15]
 8002110:	6879      	ldr	r1, [r7, #4]
 8002112:	4613      	mov	r3, r2
 8002114:	00db      	lsls	r3, r3, #3
 8002116:	1a9b      	subs	r3, r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	440b      	add	r3, r1
 800211c:	333c      	adds	r3, #60	; 0x3c
 800211e:	7bfa      	ldrb	r2, [r7, #15]
 8002120:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002122:	7bfa      	ldrb	r2, [r7, #15]
 8002124:	7bfb      	ldrb	r3, [r7, #15]
 8002126:	b298      	uxth	r0, r3
 8002128:	6879      	ldr	r1, [r7, #4]
 800212a:	4613      	mov	r3, r2
 800212c:	00db      	lsls	r3, r3, #3
 800212e:	1a9b      	subs	r3, r3, r2
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	440b      	add	r3, r1
 8002134:	3342      	adds	r3, #66	; 0x42
 8002136:	4602      	mov	r2, r0
 8002138:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800213a:	7bfa      	ldrb	r2, [r7, #15]
 800213c:	6879      	ldr	r1, [r7, #4]
 800213e:	4613      	mov	r3, r2
 8002140:	00db      	lsls	r3, r3, #3
 8002142:	1a9b      	subs	r3, r3, r2
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	440b      	add	r3, r1
 8002148:	333f      	adds	r3, #63	; 0x3f
 800214a:	2200      	movs	r2, #0
 800214c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800214e:	7bfa      	ldrb	r2, [r7, #15]
 8002150:	6879      	ldr	r1, [r7, #4]
 8002152:	4613      	mov	r3, r2
 8002154:	00db      	lsls	r3, r3, #3
 8002156:	1a9b      	subs	r3, r3, r2
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	440b      	add	r3, r1
 800215c:	3344      	adds	r3, #68	; 0x44
 800215e:	2200      	movs	r2, #0
 8002160:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002162:	7bfa      	ldrb	r2, [r7, #15]
 8002164:	6879      	ldr	r1, [r7, #4]
 8002166:	4613      	mov	r3, r2
 8002168:	00db      	lsls	r3, r3, #3
 800216a:	1a9b      	subs	r3, r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	440b      	add	r3, r1
 8002170:	3348      	adds	r3, #72	; 0x48
 8002172:	2200      	movs	r2, #0
 8002174:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002176:	7bfa      	ldrb	r2, [r7, #15]
 8002178:	6879      	ldr	r1, [r7, #4]
 800217a:	4613      	mov	r3, r2
 800217c:	00db      	lsls	r3, r3, #3
 800217e:	1a9b      	subs	r3, r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	440b      	add	r3, r1
 8002184:	3350      	adds	r3, #80	; 0x50
 8002186:	2200      	movs	r2, #0
 8002188:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800218a:	7bfb      	ldrb	r3, [r7, #15]
 800218c:	3301      	adds	r3, #1
 800218e:	73fb      	strb	r3, [r7, #15]
 8002190:	7bfa      	ldrb	r2, [r7, #15]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	429a      	cmp	r2, r3
 8002198:	d3af      	bcc.n	80020fa <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800219a:	2300      	movs	r3, #0
 800219c:	73fb      	strb	r3, [r7, #15]
 800219e:	e044      	b.n	800222a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80021a0:	7bfa      	ldrb	r2, [r7, #15]
 80021a2:	6879      	ldr	r1, [r7, #4]
 80021a4:	4613      	mov	r3, r2
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	1a9b      	subs	r3, r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	440b      	add	r3, r1
 80021ae:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80021b2:	2200      	movs	r2, #0
 80021b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80021b6:	7bfa      	ldrb	r2, [r7, #15]
 80021b8:	6879      	ldr	r1, [r7, #4]
 80021ba:	4613      	mov	r3, r2
 80021bc:	00db      	lsls	r3, r3, #3
 80021be:	1a9b      	subs	r3, r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	440b      	add	r3, r1
 80021c4:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80021c8:	7bfa      	ldrb	r2, [r7, #15]
 80021ca:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80021cc:	7bfa      	ldrb	r2, [r7, #15]
 80021ce:	6879      	ldr	r1, [r7, #4]
 80021d0:	4613      	mov	r3, r2
 80021d2:	00db      	lsls	r3, r3, #3
 80021d4:	1a9b      	subs	r3, r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	440b      	add	r3, r1
 80021da:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80021de:	2200      	movs	r2, #0
 80021e0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80021e2:	7bfa      	ldrb	r2, [r7, #15]
 80021e4:	6879      	ldr	r1, [r7, #4]
 80021e6:	4613      	mov	r3, r2
 80021e8:	00db      	lsls	r3, r3, #3
 80021ea:	1a9b      	subs	r3, r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	440b      	add	r3, r1
 80021f0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80021f8:	7bfa      	ldrb	r2, [r7, #15]
 80021fa:	6879      	ldr	r1, [r7, #4]
 80021fc:	4613      	mov	r3, r2
 80021fe:	00db      	lsls	r3, r3, #3
 8002200:	1a9b      	subs	r3, r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	440b      	add	r3, r1
 8002206:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800220a:	2200      	movs	r2, #0
 800220c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800220e:	7bfa      	ldrb	r2, [r7, #15]
 8002210:	6879      	ldr	r1, [r7, #4]
 8002212:	4613      	mov	r3, r2
 8002214:	00db      	lsls	r3, r3, #3
 8002216:	1a9b      	subs	r3, r3, r2
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	440b      	add	r3, r1
 800221c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002224:	7bfb      	ldrb	r3, [r7, #15]
 8002226:	3301      	adds	r3, #1
 8002228:	73fb      	strb	r3, [r7, #15]
 800222a:	7bfa      	ldrb	r2, [r7, #15]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	429a      	cmp	r2, r3
 8002232:	d3b5      	bcc.n	80021a0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	603b      	str	r3, [r7, #0]
 800223a:	687e      	ldr	r6, [r7, #4]
 800223c:	466d      	mov	r5, sp
 800223e:	f106 0410 	add.w	r4, r6, #16
 8002242:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002244:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002246:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002248:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800224a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800224e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002252:	1d33      	adds	r3, r6, #4
 8002254:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002256:	6838      	ldr	r0, [r7, #0]
 8002258:	f002 fa96 	bl	8004788 <USB_DevInit>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d005      	beq.n	800226e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2202      	movs	r2, #2
 8002266:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e00d      	b.n	800228a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2201      	movs	r2, #1
 800227a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4618      	mov	r0, r3
 8002284:	f003 fade 	bl	8005844 <USB_DevDisconnect>

  return HAL_OK;
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	3714      	adds	r7, #20
 800228e:	46bd      	mov	sp, r7
 8002290:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002292 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002292:	b580      	push	{r7, lr}
 8002294:	b084      	sub	sp, #16
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d101      	bne.n	80022ae <HAL_PCD_Start+0x1c>
 80022aa:	2302      	movs	r3, #2
 80022ac:	e020      	b.n	80022f0 <HAL_PCD_Start+0x5e>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2201      	movs	r2, #1
 80022b2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d109      	bne.n	80022d2 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d005      	beq.n	80022d2 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f002 fa0a 	bl	80046f0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f003 fa8e 	bl	8005802 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80022ee:	2300      	movs	r3, #0
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3710      	adds	r7, #16
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80022f8:	b590      	push	{r4, r7, lr}
 80022fa:	b08d      	sub	sp, #52	; 0x34
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002306:	6a3b      	ldr	r3, [r7, #32]
 8002308:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4618      	mov	r0, r3
 8002310:	f003 fb4c 	bl	80059ac <USB_GetMode>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	f040 839d 	bne.w	8002a56 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4618      	mov	r0, r3
 8002322:	f003 fab0 	bl	8005886 <USB_ReadInterrupts>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	f000 8393 	beq.w	8002a54 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4618      	mov	r0, r3
 8002334:	f003 faa7 	bl	8005886 <USB_ReadInterrupts>
 8002338:	4603      	mov	r3, r0
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	2b02      	cmp	r3, #2
 8002340:	d107      	bne.n	8002352 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	695a      	ldr	r2, [r3, #20]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f002 0202 	and.w	r2, r2, #2
 8002350:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4618      	mov	r0, r3
 8002358:	f003 fa95 	bl	8005886 <USB_ReadInterrupts>
 800235c:	4603      	mov	r3, r0
 800235e:	f003 0310 	and.w	r3, r3, #16
 8002362:	2b10      	cmp	r3, #16
 8002364:	d161      	bne.n	800242a <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	699a      	ldr	r2, [r3, #24]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f022 0210 	bic.w	r2, r2, #16
 8002374:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002376:	6a3b      	ldr	r3, [r7, #32]
 8002378:	6a1b      	ldr	r3, [r3, #32]
 800237a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	f003 020f 	and.w	r2, r3, #15
 8002382:	4613      	mov	r3, r2
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	1a9b      	subs	r3, r3, r2
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	4413      	add	r3, r2
 8002392:	3304      	adds	r3, #4
 8002394:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	0c5b      	lsrs	r3, r3, #17
 800239a:	f003 030f 	and.w	r3, r3, #15
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d124      	bne.n	80023ec <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80023a2:	69ba      	ldr	r2, [r7, #24]
 80023a4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80023a8:	4013      	ands	r3, r2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d035      	beq.n	800241a <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	091b      	lsrs	r3, r3, #4
 80023b6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80023b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023bc:	b29b      	uxth	r3, r3
 80023be:	461a      	mov	r2, r3
 80023c0:	6a38      	ldr	r0, [r7, #32]
 80023c2:	f003 f8fb 	bl	80055bc <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	68da      	ldr	r2, [r3, #12]
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	091b      	lsrs	r3, r3, #4
 80023ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023d2:	441a      	add	r2, r3
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	699a      	ldr	r2, [r3, #24]
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	091b      	lsrs	r3, r3, #4
 80023e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023e4:	441a      	add	r2, r3
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	619a      	str	r2, [r3, #24]
 80023ea:	e016      	b.n	800241a <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	0c5b      	lsrs	r3, r3, #17
 80023f0:	f003 030f 	and.w	r3, r3, #15
 80023f4:	2b06      	cmp	r3, #6
 80023f6:	d110      	bne.n	800241a <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80023fe:	2208      	movs	r2, #8
 8002400:	4619      	mov	r1, r3
 8002402:	6a38      	ldr	r0, [r7, #32]
 8002404:	f003 f8da 	bl	80055bc <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	699a      	ldr	r2, [r3, #24]
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	091b      	lsrs	r3, r3, #4
 8002410:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002414:	441a      	add	r2, r3
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	699a      	ldr	r2, [r3, #24]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f042 0210 	orr.w	r2, r2, #16
 8002428:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4618      	mov	r0, r3
 8002430:	f003 fa29 	bl	8005886 <USB_ReadInterrupts>
 8002434:	4603      	mov	r3, r0
 8002436:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800243a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800243e:	d16e      	bne.n	800251e <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002440:	2300      	movs	r3, #0
 8002442:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4618      	mov	r0, r3
 800244a:	f003 fa2f 	bl	80058ac <USB_ReadDevAllOutEpInterrupt>
 800244e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002450:	e062      	b.n	8002518 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002454:	f003 0301 	and.w	r3, r3, #1
 8002458:	2b00      	cmp	r3, #0
 800245a:	d057      	beq.n	800250c <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002462:	b2d2      	uxtb	r2, r2
 8002464:	4611      	mov	r1, r2
 8002466:	4618      	mov	r0, r3
 8002468:	f003 fa54 	bl	8005914 <USB_ReadDevOutEPInterrupt>
 800246c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	f003 0301 	and.w	r3, r3, #1
 8002474:	2b00      	cmp	r3, #0
 8002476:	d00c      	beq.n	8002492 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247a:	015a      	lsls	r2, r3, #5
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	4413      	add	r3, r2
 8002480:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002484:	461a      	mov	r2, r3
 8002486:	2301      	movs	r3, #1
 8002488:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800248a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f000 fdb1 	bl	8002ff4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	f003 0308 	and.w	r3, r3, #8
 8002498:	2b00      	cmp	r3, #0
 800249a:	d00c      	beq.n	80024b6 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800249c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249e:	015a      	lsls	r2, r3, #5
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	4413      	add	r3, r2
 80024a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024a8:	461a      	mov	r2, r3
 80024aa:	2308      	movs	r3, #8
 80024ac:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80024ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f000 feab 	bl	800320c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	f003 0310 	and.w	r3, r3, #16
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d008      	beq.n	80024d2 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80024c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c2:	015a      	lsls	r2, r3, #5
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	4413      	add	r3, r2
 80024c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024cc:	461a      	mov	r2, r3
 80024ce:	2310      	movs	r3, #16
 80024d0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	f003 0320 	and.w	r3, r3, #32
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d008      	beq.n	80024ee <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80024dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024de:	015a      	lsls	r2, r3, #5
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	4413      	add	r3, r2
 80024e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024e8:	461a      	mov	r2, r3
 80024ea:	2320      	movs	r3, #32
 80024ec:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d009      	beq.n	800250c <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80024f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fa:	015a      	lsls	r2, r3, #5
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	4413      	add	r3, r2
 8002500:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002504:	461a      	mov	r2, r3
 8002506:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800250a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800250c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250e:	3301      	adds	r3, #1
 8002510:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002514:	085b      	lsrs	r3, r3, #1
 8002516:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800251a:	2b00      	cmp	r3, #0
 800251c:	d199      	bne.n	8002452 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4618      	mov	r0, r3
 8002524:	f003 f9af 	bl	8005886 <USB_ReadInterrupts>
 8002528:	4603      	mov	r3, r0
 800252a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800252e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002532:	f040 80c0 	bne.w	80026b6 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4618      	mov	r0, r3
 800253c:	f003 f9d0 	bl	80058e0 <USB_ReadDevAllInEpInterrupt>
 8002540:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002542:	2300      	movs	r3, #0
 8002544:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002546:	e0b2      	b.n	80026ae <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	2b00      	cmp	r3, #0
 8002550:	f000 80a7 	beq.w	80026a2 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800255a:	b2d2      	uxtb	r2, r2
 800255c:	4611      	mov	r1, r2
 800255e:	4618      	mov	r0, r3
 8002560:	f003 f9f6 	bl	8005950 <USB_ReadDevInEPInterrupt>
 8002564:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	f003 0301 	and.w	r3, r3, #1
 800256c:	2b00      	cmp	r3, #0
 800256e:	d057      	beq.n	8002620 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002572:	f003 030f 	and.w	r3, r3, #15
 8002576:	2201      	movs	r2, #1
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002584:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	43db      	mvns	r3, r3
 800258a:	69f9      	ldr	r1, [r7, #28]
 800258c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002590:	4013      	ands	r3, r2
 8002592:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002596:	015a      	lsls	r2, r3, #5
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	4413      	add	r3, r2
 800259c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025a0:	461a      	mov	r2, r3
 80025a2:	2301      	movs	r3, #1
 80025a4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d132      	bne.n	8002614 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80025ae:	6879      	ldr	r1, [r7, #4]
 80025b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025b2:	4613      	mov	r3, r2
 80025b4:	00db      	lsls	r3, r3, #3
 80025b6:	1a9b      	subs	r3, r3, r2
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	440b      	add	r3, r1
 80025bc:	3348      	adds	r3, #72	; 0x48
 80025be:	6819      	ldr	r1, [r3, #0]
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025c4:	4613      	mov	r3, r2
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	1a9b      	subs	r3, r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	4403      	add	r3, r0
 80025ce:	3344      	adds	r3, #68	; 0x44
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4419      	add	r1, r3
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025d8:	4613      	mov	r3, r2
 80025da:	00db      	lsls	r3, r3, #3
 80025dc:	1a9b      	subs	r3, r3, r2
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	4403      	add	r3, r0
 80025e2:	3348      	adds	r3, #72	; 0x48
 80025e4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80025e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d113      	bne.n	8002614 <HAL_PCD_IRQHandler+0x31c>
 80025ec:	6879      	ldr	r1, [r7, #4]
 80025ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025f0:	4613      	mov	r3, r2
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	1a9b      	subs	r3, r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	440b      	add	r3, r1
 80025fa:	3350      	adds	r3, #80	; 0x50
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d108      	bne.n	8002614 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6818      	ldr	r0, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800260c:	461a      	mov	r2, r3
 800260e:	2101      	movs	r1, #1
 8002610:	f003 f9fe 	bl	8005a10 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002616:	b2db      	uxtb	r3, r3
 8002618:	4619      	mov	r1, r3
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f005 f92f 	bl	800787e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	f003 0308 	and.w	r3, r3, #8
 8002626:	2b00      	cmp	r3, #0
 8002628:	d008      	beq.n	800263c <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800262a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262c:	015a      	lsls	r2, r3, #5
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	4413      	add	r3, r2
 8002632:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002636:	461a      	mov	r2, r3
 8002638:	2308      	movs	r3, #8
 800263a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	f003 0310 	and.w	r3, r3, #16
 8002642:	2b00      	cmp	r3, #0
 8002644:	d008      	beq.n	8002658 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002648:	015a      	lsls	r2, r3, #5
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	4413      	add	r3, r2
 800264e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002652:	461a      	mov	r2, r3
 8002654:	2310      	movs	r3, #16
 8002656:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800265e:	2b00      	cmp	r3, #0
 8002660:	d008      	beq.n	8002674 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002664:	015a      	lsls	r2, r3, #5
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	4413      	add	r3, r2
 800266a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800266e:	461a      	mov	r2, r3
 8002670:	2340      	movs	r3, #64	; 0x40
 8002672:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d008      	beq.n	8002690 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800267e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002680:	015a      	lsls	r2, r3, #5
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	4413      	add	r3, r2
 8002686:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800268a:	461a      	mov	r2, r3
 800268c:	2302      	movs	r3, #2
 800268e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002696:	2b00      	cmp	r3, #0
 8002698:	d003      	beq.n	80026a2 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800269a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f000 fc1b 	bl	8002ed8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80026a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a4:	3301      	adds	r3, #1
 80026a6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80026a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026aa:	085b      	lsrs	r3, r3, #1
 80026ac:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80026ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	f47f af49 	bne.w	8002548 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f003 f8e3 	bl	8005886 <USB_ReadInterrupts>
 80026c0:	4603      	mov	r3, r0
 80026c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80026c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80026ca:	d122      	bne.n	8002712 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	69fa      	ldr	r2, [r7, #28]
 80026d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026da:	f023 0301 	bic.w	r3, r3, #1
 80026de:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d108      	bne.n	80026fc <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80026f2:	2100      	movs	r1, #0
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f000 fe27 	bl	8003348 <HAL_PCDEx_LPM_Callback>
 80026fa:	e002      	b.n	8002702 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f005 f92b 	bl	8007958 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	695a      	ldr	r2, [r3, #20]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002710:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4618      	mov	r0, r3
 8002718:	f003 f8b5 	bl	8005886 <USB_ReadInterrupts>
 800271c:	4603      	mov	r3, r0
 800271e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002722:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002726:	d112      	bne.n	800274e <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	f003 0301 	and.w	r3, r3, #1
 8002734:	2b01      	cmp	r3, #1
 8002736:	d102      	bne.n	800273e <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f005 f8e7 	bl	800790c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	695a      	ldr	r2, [r3, #20]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800274c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4618      	mov	r0, r3
 8002754:	f003 f897 	bl	8005886 <USB_ReadInterrupts>
 8002758:	4603      	mov	r3, r0
 800275a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800275e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002762:	f040 80c7 	bne.w	80028f4 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	69fa      	ldr	r2, [r7, #28]
 8002770:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002774:	f023 0301 	bic.w	r3, r3, #1
 8002778:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2110      	movs	r1, #16
 8002780:	4618      	mov	r0, r3
 8002782:	f002 f965 	bl	8004a50 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002786:	2300      	movs	r3, #0
 8002788:	62fb      	str	r3, [r7, #44]	; 0x2c
 800278a:	e056      	b.n	800283a <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800278c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800278e:	015a      	lsls	r2, r3, #5
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	4413      	add	r3, r2
 8002794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002798:	461a      	mov	r2, r3
 800279a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800279e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80027a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027a2:	015a      	lsls	r2, r3, #5
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	4413      	add	r3, r2
 80027a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027b0:	0151      	lsls	r1, r2, #5
 80027b2:	69fa      	ldr	r2, [r7, #28]
 80027b4:	440a      	add	r2, r1
 80027b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80027ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80027be:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80027c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027c2:	015a      	lsls	r2, r3, #5
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	4413      	add	r3, r2
 80027c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027d0:	0151      	lsls	r1, r2, #5
 80027d2:	69fa      	ldr	r2, [r7, #28]
 80027d4:	440a      	add	r2, r1
 80027d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80027da:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80027de:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80027e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027e2:	015a      	lsls	r2, r3, #5
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	4413      	add	r3, r2
 80027e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027ec:	461a      	mov	r2, r3
 80027ee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80027f2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80027f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027f6:	015a      	lsls	r2, r3, #5
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	4413      	add	r3, r2
 80027fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002804:	0151      	lsls	r1, r2, #5
 8002806:	69fa      	ldr	r2, [r7, #28]
 8002808:	440a      	add	r2, r1
 800280a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800280e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002812:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002816:	015a      	lsls	r2, r3, #5
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	4413      	add	r3, r2
 800281c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002824:	0151      	lsls	r1, r2, #5
 8002826:	69fa      	ldr	r2, [r7, #28]
 8002828:	440a      	add	r2, r1
 800282a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800282e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002832:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002836:	3301      	adds	r3, #1
 8002838:	62fb      	str	r3, [r7, #44]	; 0x2c
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002840:	429a      	cmp	r2, r3
 8002842:	d3a3      	bcc.n	800278c <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800284a:	69db      	ldr	r3, [r3, #28]
 800284c:	69fa      	ldr	r2, [r7, #28]
 800284e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002852:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002856:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285c:	2b00      	cmp	r3, #0
 800285e:	d016      	beq.n	800288e <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002866:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800286a:	69fa      	ldr	r2, [r7, #28]
 800286c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002870:	f043 030b 	orr.w	r3, r3, #11
 8002874:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800287e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002880:	69fa      	ldr	r2, [r7, #28]
 8002882:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002886:	f043 030b 	orr.w	r3, r3, #11
 800288a:	6453      	str	r3, [r2, #68]	; 0x44
 800288c:	e015      	b.n	80028ba <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	69fa      	ldr	r2, [r7, #28]
 8002898:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800289c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80028a0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80028a4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	69fa      	ldr	r2, [r7, #28]
 80028b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028b4:	f043 030b 	orr.w	r3, r3, #11
 80028b8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	69fa      	ldr	r2, [r7, #28]
 80028c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028c8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80028cc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6818      	ldr	r0, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80028de:	461a      	mov	r2, r3
 80028e0:	f003 f896 	bl	8005a10 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	695a      	ldr	r2, [r3, #20]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80028f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f002 ffc4 	bl	8005886 <USB_ReadInterrupts>
 80028fe:	4603      	mov	r3, r0
 8002900:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002904:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002908:	d124      	bne.n	8002954 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4618      	mov	r0, r3
 8002910:	f003 f85a 	bl	80059c8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4618      	mov	r0, r3
 800291a:	f002 f8fa 	bl	8004b12 <USB_GetDevSpeed>
 800291e:	4603      	mov	r3, r0
 8002920:	461a      	mov	r2, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681c      	ldr	r4, [r3, #0]
 800292a:	f001 f921 	bl	8003b70 <HAL_RCC_GetHCLKFreq>
 800292e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002934:	b2db      	uxtb	r3, r3
 8002936:	461a      	mov	r2, r3
 8002938:	4620      	mov	r0, r4
 800293a:	f001 fe37 	bl	80045ac <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f004 ffc5 	bl	80078ce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	695a      	ldr	r2, [r3, #20]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002952:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4618      	mov	r0, r3
 800295a:	f002 ff94 	bl	8005886 <USB_ReadInterrupts>
 800295e:	4603      	mov	r3, r0
 8002960:	f003 0308 	and.w	r3, r3, #8
 8002964:	2b08      	cmp	r3, #8
 8002966:	d10a      	bne.n	800297e <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f004 ffa2 	bl	80078b2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	695a      	ldr	r2, [r3, #20]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f002 0208 	and.w	r2, r2, #8
 800297c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4618      	mov	r0, r3
 8002984:	f002 ff7f 	bl	8005886 <USB_ReadInterrupts>
 8002988:	4603      	mov	r3, r0
 800298a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800298e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002992:	d10f      	bne.n	80029b4 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002994:	2300      	movs	r3, #0
 8002996:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299a:	b2db      	uxtb	r3, r3
 800299c:	4619      	mov	r1, r3
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f004 fffa 	bl	8007998 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	695a      	ldr	r2, [r3, #20]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80029b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4618      	mov	r0, r3
 80029ba:	f002 ff64 	bl	8005886 <USB_ReadInterrupts>
 80029be:	4603      	mov	r3, r0
 80029c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029c8:	d10f      	bne.n	80029ea <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80029ca:	2300      	movs	r3, #0
 80029cc:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80029ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	4619      	mov	r1, r3
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f004 ffcd 	bl	8007974 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	695a      	ldr	r2, [r3, #20]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80029e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f002 ff49 	bl	8005886 <USB_ReadInterrupts>
 80029f4:	4603      	mov	r3, r0
 80029f6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80029fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029fe:	d10a      	bne.n	8002a16 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f004 ffdb 	bl	80079bc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	695a      	ldr	r2, [r3, #20]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002a14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f002 ff33 	bl	8005886 <USB_ReadInterrupts>
 8002a20:	4603      	mov	r3, r0
 8002a22:	f003 0304 	and.w	r3, r3, #4
 8002a26:	2b04      	cmp	r3, #4
 8002a28:	d115      	bne.n	8002a56 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	f003 0304 	and.w	r3, r3, #4
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d002      	beq.n	8002a42 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f004 ffcb 	bl	80079d8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	6859      	ldr	r1, [r3, #4]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	605a      	str	r2, [r3, #4]
 8002a52:	e000      	b.n	8002a56 <HAL_PCD_IRQHandler+0x75e>
      return;
 8002a54:	bf00      	nop
    }
  }
}
 8002a56:	3734      	adds	r7, #52	; 0x34
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd90      	pop	{r4, r7, pc}

08002a5c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	460b      	mov	r3, r1
 8002a66:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d101      	bne.n	8002a76 <HAL_PCD_SetAddress+0x1a>
 8002a72:	2302      	movs	r3, #2
 8002a74:	e013      	b.n	8002a9e <HAL_PCD_SetAddress+0x42>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2201      	movs	r2, #1
 8002a7a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	78fa      	ldrb	r2, [r7, #3]
 8002a82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	78fa      	ldrb	r2, [r7, #3]
 8002a8c:	4611      	mov	r1, r2
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f002 fe91 	bl	80057b6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3708      	adds	r7, #8
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b084      	sub	sp, #16
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
 8002aae:	4608      	mov	r0, r1
 8002ab0:	4611      	mov	r1, r2
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	70fb      	strb	r3, [r7, #3]
 8002ab8:	460b      	mov	r3, r1
 8002aba:	803b      	strh	r3, [r7, #0]
 8002abc:	4613      	mov	r3, r2
 8002abe:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ac4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	da0f      	bge.n	8002aec <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002acc:	78fb      	ldrb	r3, [r7, #3]
 8002ace:	f003 020f 	and.w	r2, r3, #15
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	00db      	lsls	r3, r3, #3
 8002ad6:	1a9b      	subs	r3, r3, r2
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	3338      	adds	r3, #56	; 0x38
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	4413      	add	r3, r2
 8002ae0:	3304      	adds	r3, #4
 8002ae2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	705a      	strb	r2, [r3, #1]
 8002aea:	e00f      	b.n	8002b0c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002aec:	78fb      	ldrb	r3, [r7, #3]
 8002aee:	f003 020f 	and.w	r2, r3, #15
 8002af2:	4613      	mov	r3, r2
 8002af4:	00db      	lsls	r3, r3, #3
 8002af6:	1a9b      	subs	r3, r3, r2
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	4413      	add	r3, r2
 8002b02:	3304      	adds	r3, #4
 8002b04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002b0c:	78fb      	ldrb	r3, [r7, #3]
 8002b0e:	f003 030f 	and.w	r3, r3, #15
 8002b12:	b2da      	uxtb	r2, r3
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002b18:	883a      	ldrh	r2, [r7, #0]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	78ba      	ldrb	r2, [r7, #2]
 8002b22:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	785b      	ldrb	r3, [r3, #1]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d004      	beq.n	8002b36 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	b29a      	uxth	r2, r3
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002b36:	78bb      	ldrb	r3, [r7, #2]
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d102      	bne.n	8002b42 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d101      	bne.n	8002b50 <HAL_PCD_EP_Open+0xaa>
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	e00e      	b.n	8002b6e <HAL_PCD_EP_Open+0xc8>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68f9      	ldr	r1, [r7, #12]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f001 fffc 	bl	8004b5c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002b6c:	7afb      	ldrb	r3, [r7, #11]
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3710      	adds	r7, #16
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}

08002b76 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b76:	b580      	push	{r7, lr}
 8002b78:	b084      	sub	sp, #16
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
 8002b7e:	460b      	mov	r3, r1
 8002b80:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	da0f      	bge.n	8002baa <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b8a:	78fb      	ldrb	r3, [r7, #3]
 8002b8c:	f003 020f 	and.w	r2, r3, #15
 8002b90:	4613      	mov	r3, r2
 8002b92:	00db      	lsls	r3, r3, #3
 8002b94:	1a9b      	subs	r3, r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	3338      	adds	r3, #56	; 0x38
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	3304      	adds	r3, #4
 8002ba0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	705a      	strb	r2, [r3, #1]
 8002ba8:	e00f      	b.n	8002bca <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002baa:	78fb      	ldrb	r3, [r7, #3]
 8002bac:	f003 020f 	and.w	r2, r3, #15
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	1a9b      	subs	r3, r3, r2
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	3304      	adds	r3, #4
 8002bc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002bca:	78fb      	ldrb	r3, [r7, #3]
 8002bcc:	f003 030f 	and.w	r3, r3, #15
 8002bd0:	b2da      	uxtb	r2, r3
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d101      	bne.n	8002be4 <HAL_PCD_EP_Close+0x6e>
 8002be0:	2302      	movs	r3, #2
 8002be2:	e00e      	b.n	8002c02 <HAL_PCD_EP_Close+0x8c>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	68f9      	ldr	r1, [r7, #12]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f002 f83a 	bl	8004c6c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3710      	adds	r7, #16
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b086      	sub	sp, #24
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	60f8      	str	r0, [r7, #12]
 8002c12:	607a      	str	r2, [r7, #4]
 8002c14:	603b      	str	r3, [r7, #0]
 8002c16:	460b      	mov	r3, r1
 8002c18:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c1a:	7afb      	ldrb	r3, [r7, #11]
 8002c1c:	f003 020f 	and.w	r2, r3, #15
 8002c20:	4613      	mov	r3, r2
 8002c22:	00db      	lsls	r3, r3, #3
 8002c24:	1a9b      	subs	r3, r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	4413      	add	r3, r2
 8002c30:	3304      	adds	r3, #4
 8002c32:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	683a      	ldr	r2, [r7, #0]
 8002c3e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	2200      	movs	r2, #0
 8002c44:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c4c:	7afb      	ldrb	r3, [r7, #11]
 8002c4e:	f003 030f 	and.w	r3, r3, #15
 8002c52:	b2da      	uxtb	r2, r3
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	691b      	ldr	r3, [r3, #16]
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d102      	bne.n	8002c66 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c66:	7afb      	ldrb	r3, [r7, #11]
 8002c68:	f003 030f 	and.w	r3, r3, #15
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d109      	bne.n	8002c84 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6818      	ldr	r0, [r3, #0]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	6979      	ldr	r1, [r7, #20]
 8002c7e:	f002 fb15 	bl	80052ac <USB_EP0StartXfer>
 8002c82:	e008      	b.n	8002c96 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6818      	ldr	r0, [r3, #0]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	691b      	ldr	r3, [r3, #16]
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	461a      	mov	r2, r3
 8002c90:	6979      	ldr	r1, [r7, #20]
 8002c92:	f002 f8c7 	bl	8004e24 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002c96:	2300      	movs	r3, #0
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3718      	adds	r7, #24
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	460b      	mov	r3, r1
 8002caa:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002cac:	78fb      	ldrb	r3, [r7, #3]
 8002cae:	f003 020f 	and.w	r2, r3, #15
 8002cb2:	6879      	ldr	r1, [r7, #4]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	1a9b      	subs	r3, r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	440b      	add	r3, r1
 8002cbe:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002cc2:	681b      	ldr	r3, [r3, #0]
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b086      	sub	sp, #24
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	607a      	str	r2, [r7, #4]
 8002cda:	603b      	str	r3, [r7, #0]
 8002cdc:	460b      	mov	r3, r1
 8002cde:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ce0:	7afb      	ldrb	r3, [r7, #11]
 8002ce2:	f003 020f 	and.w	r2, r3, #15
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	00db      	lsls	r3, r3, #3
 8002cea:	1a9b      	subs	r3, r3, r2
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	3338      	adds	r3, #56	; 0x38
 8002cf0:	68fa      	ldr	r2, [r7, #12]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	3304      	adds	r3, #4
 8002cf6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	683a      	ldr	r2, [r7, #0]
 8002d02:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	2200      	movs	r2, #0
 8002d08:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d10:	7afb      	ldrb	r3, [r7, #11]
 8002d12:	f003 030f 	and.w	r3, r3, #15
 8002d16:	b2da      	uxtb	r2, r3
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	691b      	ldr	r3, [r3, #16]
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d102      	bne.n	8002d2a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d2a:	7afb      	ldrb	r3, [r7, #11]
 8002d2c:	f003 030f 	and.w	r3, r3, #15
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d109      	bne.n	8002d48 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6818      	ldr	r0, [r3, #0]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	691b      	ldr	r3, [r3, #16]
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	461a      	mov	r2, r3
 8002d40:	6979      	ldr	r1, [r7, #20]
 8002d42:	f002 fab3 	bl	80052ac <USB_EP0StartXfer>
 8002d46:	e008      	b.n	8002d5a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6818      	ldr	r0, [r3, #0]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	691b      	ldr	r3, [r3, #16]
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	461a      	mov	r2, r3
 8002d54:	6979      	ldr	r1, [r7, #20]
 8002d56:	f002 f865 	bl	8004e24 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002d5a:	2300      	movs	r3, #0
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3718      	adds	r7, #24
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002d70:	78fb      	ldrb	r3, [r7, #3]
 8002d72:	f003 020f 	and.w	r2, r3, #15
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d901      	bls.n	8002d82 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e050      	b.n	8002e24 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002d82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	da0f      	bge.n	8002daa <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d8a:	78fb      	ldrb	r3, [r7, #3]
 8002d8c:	f003 020f 	and.w	r2, r3, #15
 8002d90:	4613      	mov	r3, r2
 8002d92:	00db      	lsls	r3, r3, #3
 8002d94:	1a9b      	subs	r3, r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	3338      	adds	r3, #56	; 0x38
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	4413      	add	r3, r2
 8002d9e:	3304      	adds	r3, #4
 8002da0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2201      	movs	r2, #1
 8002da6:	705a      	strb	r2, [r3, #1]
 8002da8:	e00d      	b.n	8002dc6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002daa:	78fa      	ldrb	r2, [r7, #3]
 8002dac:	4613      	mov	r3, r2
 8002dae:	00db      	lsls	r3, r3, #3
 8002db0:	1a9b      	subs	r3, r3, r2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	4413      	add	r3, r2
 8002dbc:	3304      	adds	r3, #4
 8002dbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2201      	movs	r2, #1
 8002dca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dcc:	78fb      	ldrb	r3, [r7, #3]
 8002dce:	f003 030f 	and.w	r3, r3, #15
 8002dd2:	b2da      	uxtb	r2, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d101      	bne.n	8002de6 <HAL_PCD_EP_SetStall+0x82>
 8002de2:	2302      	movs	r3, #2
 8002de4:	e01e      	b.n	8002e24 <HAL_PCD_EP_SetStall+0xc0>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2201      	movs	r2, #1
 8002dea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	68f9      	ldr	r1, [r7, #12]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f002 fc0a 	bl	800560e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002dfa:	78fb      	ldrb	r3, [r7, #3]
 8002dfc:	f003 030f 	and.w	r3, r3, #15
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d10a      	bne.n	8002e1a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6818      	ldr	r0, [r3, #0]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	b2d9      	uxtb	r1, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002e14:	461a      	mov	r2, r3
 8002e16:	f002 fdfb 	bl	8005a10 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3710      	adds	r7, #16
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	460b      	mov	r3, r1
 8002e36:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002e38:	78fb      	ldrb	r3, [r7, #3]
 8002e3a:	f003 020f 	and.w	r2, r3, #15
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d901      	bls.n	8002e4a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e042      	b.n	8002ed0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	da0f      	bge.n	8002e72 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e52:	78fb      	ldrb	r3, [r7, #3]
 8002e54:	f003 020f 	and.w	r2, r3, #15
 8002e58:	4613      	mov	r3, r2
 8002e5a:	00db      	lsls	r3, r3, #3
 8002e5c:	1a9b      	subs	r3, r3, r2
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	3338      	adds	r3, #56	; 0x38
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	4413      	add	r3, r2
 8002e66:	3304      	adds	r3, #4
 8002e68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	705a      	strb	r2, [r3, #1]
 8002e70:	e00f      	b.n	8002e92 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e72:	78fb      	ldrb	r3, [r7, #3]
 8002e74:	f003 020f 	and.w	r2, r3, #15
 8002e78:	4613      	mov	r3, r2
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	1a9b      	subs	r3, r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	4413      	add	r3, r2
 8002e88:	3304      	adds	r3, #4
 8002e8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2200      	movs	r2, #0
 8002e96:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e98:	78fb      	ldrb	r3, [r7, #3]
 8002e9a:	f003 030f 	and.w	r3, r3, #15
 8002e9e:	b2da      	uxtb	r2, r3
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d101      	bne.n	8002eb2 <HAL_PCD_EP_ClrStall+0x86>
 8002eae:	2302      	movs	r3, #2
 8002eb0:	e00e      	b.n	8002ed0 <HAL_PCD_EP_ClrStall+0xa4>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68f9      	ldr	r1, [r7, #12]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f002 fc12 	bl	80056ea <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002ece:	2300      	movs	r3, #0
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3710      	adds	r7, #16
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b08a      	sub	sp, #40	; 0x28
 8002edc:	af02      	add	r7, sp, #8
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002eec:	683a      	ldr	r2, [r7, #0]
 8002eee:	4613      	mov	r3, r2
 8002ef0:	00db      	lsls	r3, r3, #3
 8002ef2:	1a9b      	subs	r3, r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	3338      	adds	r3, #56	; 0x38
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	4413      	add	r3, r2
 8002efc:	3304      	adds	r3, #4
 8002efe:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	699a      	ldr	r2, [r3, #24]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	695b      	ldr	r3, [r3, #20]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d901      	bls.n	8002f10 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e06c      	b.n	8002fea <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	695a      	ldr	r2, [r3, #20]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	69fa      	ldr	r2, [r7, #28]
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d902      	bls.n	8002f2c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	3303      	adds	r3, #3
 8002f30:	089b      	lsrs	r3, r3, #2
 8002f32:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f34:	e02b      	b.n	8002f8e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	695a      	ldr	r2, [r3, #20]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	69fa      	ldr	r2, [r7, #28]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d902      	bls.n	8002f52 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	3303      	adds	r3, #3
 8002f56:	089b      	lsrs	r3, r3, #2
 8002f58:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	68d9      	ldr	r1, [r3, #12]
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	b2da      	uxtb	r2, r3
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	9300      	str	r3, [sp, #0]
 8002f6e:	4603      	mov	r3, r0
 8002f70:	6978      	ldr	r0, [r7, #20]
 8002f72:	f002 faee 	bl	8005552 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	68da      	ldr	r2, [r3, #12]
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	441a      	add	r2, r3
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	699a      	ldr	r2, [r3, #24]
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	441a      	add	r2, r3
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	015a      	lsls	r2, r3, #5
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	4413      	add	r3, r2
 8002f96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	69ba      	ldr	r2, [r7, #24]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d809      	bhi.n	8002fb8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	699a      	ldr	r2, [r3, #24]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d203      	bcs.n	8002fb8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	695b      	ldr	r3, [r3, #20]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d1be      	bne.n	8002f36 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	695a      	ldr	r2, [r3, #20]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d811      	bhi.n	8002fe8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	f003 030f 	and.w	r3, r3, #15
 8002fca:	2201      	movs	r2, #1
 8002fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	43db      	mvns	r3, r3
 8002fde:	6939      	ldr	r1, [r7, #16]
 8002fe0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3720      	adds	r7, #32
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
	...

08002ff4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b086      	sub	sp, #24
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	333c      	adds	r3, #60	; 0x3c
 800300c:	3304      	adds	r3, #4
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	015a      	lsls	r2, r3, #5
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	4413      	add	r3, r2
 800301a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	2b01      	cmp	r3, #1
 8003028:	f040 80a0 	bne.w	800316c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	f003 0308 	and.w	r3, r3, #8
 8003032:	2b00      	cmp	r3, #0
 8003034:	d015      	beq.n	8003062 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	4a72      	ldr	r2, [pc, #456]	; (8003204 <PCD_EP_OutXfrComplete_int+0x210>)
 800303a:	4293      	cmp	r3, r2
 800303c:	f240 80dd 	bls.w	80031fa <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003046:	2b00      	cmp	r3, #0
 8003048:	f000 80d7 	beq.w	80031fa <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	015a      	lsls	r2, r3, #5
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	4413      	add	r3, r2
 8003054:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003058:	461a      	mov	r2, r3
 800305a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800305e:	6093      	str	r3, [r2, #8]
 8003060:	e0cb      	b.n	80031fa <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	f003 0320 	and.w	r3, r3, #32
 8003068:	2b00      	cmp	r3, #0
 800306a:	d009      	beq.n	8003080 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	015a      	lsls	r2, r3, #5
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	4413      	add	r3, r2
 8003074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003078:	461a      	mov	r2, r3
 800307a:	2320      	movs	r3, #32
 800307c:	6093      	str	r3, [r2, #8]
 800307e:	e0bc      	b.n	80031fa <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003086:	2b00      	cmp	r3, #0
 8003088:	f040 80b7 	bne.w	80031fa <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	4a5d      	ldr	r2, [pc, #372]	; (8003204 <PCD_EP_OutXfrComplete_int+0x210>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d90f      	bls.n	80030b4 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800309a:	2b00      	cmp	r3, #0
 800309c:	d00a      	beq.n	80030b4 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	015a      	lsls	r2, r3, #5
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	4413      	add	r3, r2
 80030a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030aa:	461a      	mov	r2, r3
 80030ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030b0:	6093      	str	r3, [r2, #8]
 80030b2:	e0a2      	b.n	80031fa <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80030b4:	6879      	ldr	r1, [r7, #4]
 80030b6:	683a      	ldr	r2, [r7, #0]
 80030b8:	4613      	mov	r3, r2
 80030ba:	00db      	lsls	r3, r3, #3
 80030bc:	1a9b      	subs	r3, r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	440b      	add	r3, r1
 80030c2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80030c6:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	0159      	lsls	r1, r3, #5
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	440b      	add	r3, r1
 80030d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80030da:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	683a      	ldr	r2, [r7, #0]
 80030e0:	4613      	mov	r3, r2
 80030e2:	00db      	lsls	r3, r3, #3
 80030e4:	1a9b      	subs	r3, r3, r2
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	4403      	add	r3, r0
 80030ea:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80030ee:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80030f0:	6879      	ldr	r1, [r7, #4]
 80030f2:	683a      	ldr	r2, [r7, #0]
 80030f4:	4613      	mov	r3, r2
 80030f6:	00db      	lsls	r3, r3, #3
 80030f8:	1a9b      	subs	r3, r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	440b      	add	r3, r1
 80030fe:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003102:	6819      	ldr	r1, [r3, #0]
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	683a      	ldr	r2, [r7, #0]
 8003108:	4613      	mov	r3, r2
 800310a:	00db      	lsls	r3, r3, #3
 800310c:	1a9b      	subs	r3, r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	4403      	add	r3, r0
 8003112:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4419      	add	r1, r3
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	683a      	ldr	r2, [r7, #0]
 800311e:	4613      	mov	r3, r2
 8003120:	00db      	lsls	r3, r3, #3
 8003122:	1a9b      	subs	r3, r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	4403      	add	r3, r0
 8003128:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800312c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d114      	bne.n	800315e <PCD_EP_OutXfrComplete_int+0x16a>
 8003134:	6879      	ldr	r1, [r7, #4]
 8003136:	683a      	ldr	r2, [r7, #0]
 8003138:	4613      	mov	r3, r2
 800313a:	00db      	lsls	r3, r3, #3
 800313c:	1a9b      	subs	r3, r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	440b      	add	r3, r1
 8003142:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d108      	bne.n	800315e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6818      	ldr	r0, [r3, #0]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003156:	461a      	mov	r2, r3
 8003158:	2101      	movs	r1, #1
 800315a:	f002 fc59 	bl	8005a10 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	b2db      	uxtb	r3, r3
 8003162:	4619      	mov	r1, r3
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f004 fb6f 	bl	8007848 <HAL_PCD_DataOutStageCallback>
 800316a:	e046      	b.n	80031fa <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	4a26      	ldr	r2, [pc, #152]	; (8003208 <PCD_EP_OutXfrComplete_int+0x214>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d124      	bne.n	80031be <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00a      	beq.n	8003194 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	015a      	lsls	r2, r3, #5
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	4413      	add	r3, r2
 8003186:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800318a:	461a      	mov	r2, r3
 800318c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003190:	6093      	str	r3, [r2, #8]
 8003192:	e032      	b.n	80031fa <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	f003 0320 	and.w	r3, r3, #32
 800319a:	2b00      	cmp	r3, #0
 800319c:	d008      	beq.n	80031b0 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	015a      	lsls	r2, r3, #5
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	4413      	add	r3, r2
 80031a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031aa:	461a      	mov	r2, r3
 80031ac:	2320      	movs	r3, #32
 80031ae:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	4619      	mov	r1, r3
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f004 fb46 	bl	8007848 <HAL_PCD_DataOutStageCallback>
 80031bc:	e01d      	b.n	80031fa <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d114      	bne.n	80031ee <PCD_EP_OutXfrComplete_int+0x1fa>
 80031c4:	6879      	ldr	r1, [r7, #4]
 80031c6:	683a      	ldr	r2, [r7, #0]
 80031c8:	4613      	mov	r3, r2
 80031ca:	00db      	lsls	r3, r3, #3
 80031cc:	1a9b      	subs	r3, r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	440b      	add	r3, r1
 80031d2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d108      	bne.n	80031ee <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6818      	ldr	r0, [r3, #0]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80031e6:	461a      	mov	r2, r3
 80031e8:	2100      	movs	r1, #0
 80031ea:	f002 fc11 	bl	8005a10 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	4619      	mov	r1, r3
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f004 fb27 	bl	8007848 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80031fa:	2300      	movs	r3, #0
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3718      	adds	r7, #24
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}
 8003204:	4f54300a 	.word	0x4f54300a
 8003208:	4f54310a 	.word	0x4f54310a

0800320c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b086      	sub	sp, #24
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	333c      	adds	r3, #60	; 0x3c
 8003224:	3304      	adds	r3, #4
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	015a      	lsls	r2, r3, #5
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	4413      	add	r3, r2
 8003232:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	4a15      	ldr	r2, [pc, #84]	; (8003294 <PCD_EP_OutSetupPacket_int+0x88>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d90e      	bls.n	8003260 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003248:	2b00      	cmp	r3, #0
 800324a:	d009      	beq.n	8003260 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	015a      	lsls	r2, r3, #5
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	4413      	add	r3, r2
 8003254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003258:	461a      	mov	r2, r3
 800325a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800325e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f004 fadf 	bl	8007824 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	4a0a      	ldr	r2, [pc, #40]	; (8003294 <PCD_EP_OutSetupPacket_int+0x88>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d90c      	bls.n	8003288 <PCD_EP_OutSetupPacket_int+0x7c>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d108      	bne.n	8003288 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6818      	ldr	r0, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003280:	461a      	mov	r2, r3
 8003282:	2101      	movs	r1, #1
 8003284:	f002 fbc4 	bl	8005a10 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3718      	adds	r7, #24
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	4f54300a 	.word	0x4f54300a

08003298 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003298:	b480      	push	{r7}
 800329a:	b085      	sub	sp, #20
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	460b      	mov	r3, r1
 80032a2:	70fb      	strb	r3, [r7, #3]
 80032a4:	4613      	mov	r3, r2
 80032a6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ae:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80032b0:	78fb      	ldrb	r3, [r7, #3]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d107      	bne.n	80032c6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80032b6:	883b      	ldrh	r3, [r7, #0]
 80032b8:	0419      	lsls	r1, r3, #16
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68ba      	ldr	r2, [r7, #8]
 80032c0:	430a      	orrs	r2, r1
 80032c2:	629a      	str	r2, [r3, #40]	; 0x28
 80032c4:	e028      	b.n	8003318 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032cc:	0c1b      	lsrs	r3, r3, #16
 80032ce:	68ba      	ldr	r2, [r7, #8]
 80032d0:	4413      	add	r3, r2
 80032d2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80032d4:	2300      	movs	r3, #0
 80032d6:	73fb      	strb	r3, [r7, #15]
 80032d8:	e00d      	b.n	80032f6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	7bfb      	ldrb	r3, [r7, #15]
 80032e0:	3340      	adds	r3, #64	; 0x40
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	4413      	add	r3, r2
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	0c1b      	lsrs	r3, r3, #16
 80032ea:	68ba      	ldr	r2, [r7, #8]
 80032ec:	4413      	add	r3, r2
 80032ee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80032f0:	7bfb      	ldrb	r3, [r7, #15]
 80032f2:	3301      	adds	r3, #1
 80032f4:	73fb      	strb	r3, [r7, #15]
 80032f6:	7bfa      	ldrb	r2, [r7, #15]
 80032f8:	78fb      	ldrb	r3, [r7, #3]
 80032fa:	3b01      	subs	r3, #1
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d3ec      	bcc.n	80032da <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003300:	883b      	ldrh	r3, [r7, #0]
 8003302:	0418      	lsls	r0, r3, #16
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6819      	ldr	r1, [r3, #0]
 8003308:	78fb      	ldrb	r3, [r7, #3]
 800330a:	3b01      	subs	r3, #1
 800330c:	68ba      	ldr	r2, [r7, #8]
 800330e:	4302      	orrs	r2, r0
 8003310:	3340      	adds	r3, #64	; 0x40
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	440b      	add	r3, r1
 8003316:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	3714      	adds	r7, #20
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr

08003326 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003326:	b480      	push	{r7}
 8003328:	b083      	sub	sp, #12
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
 800332e:	460b      	mov	r3, r1
 8003330:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	887a      	ldrh	r2, [r7, #2]
 8003338:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800333a:	2300      	movs	r3, #0
}
 800333c:	4618      	mov	r0, r3
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr

08003348 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	460b      	mov	r3, r1
 8003352:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003354:	bf00      	nop
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b086      	sub	sp, #24
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d101      	bne.n	8003372 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e25b      	b.n	800382a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	2b00      	cmp	r3, #0
 800337c:	d075      	beq.n	800346a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800337e:	4ba3      	ldr	r3, [pc, #652]	; (800360c <HAL_RCC_OscConfig+0x2ac>)
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f003 030c 	and.w	r3, r3, #12
 8003386:	2b04      	cmp	r3, #4
 8003388:	d00c      	beq.n	80033a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800338a:	4ba0      	ldr	r3, [pc, #640]	; (800360c <HAL_RCC_OscConfig+0x2ac>)
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003392:	2b08      	cmp	r3, #8
 8003394:	d112      	bne.n	80033bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003396:	4b9d      	ldr	r3, [pc, #628]	; (800360c <HAL_RCC_OscConfig+0x2ac>)
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800339e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033a2:	d10b      	bne.n	80033bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033a4:	4b99      	ldr	r3, [pc, #612]	; (800360c <HAL_RCC_OscConfig+0x2ac>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d05b      	beq.n	8003468 <HAL_RCC_OscConfig+0x108>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d157      	bne.n	8003468 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e236      	b.n	800382a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033c4:	d106      	bne.n	80033d4 <HAL_RCC_OscConfig+0x74>
 80033c6:	4b91      	ldr	r3, [pc, #580]	; (800360c <HAL_RCC_OscConfig+0x2ac>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a90      	ldr	r2, [pc, #576]	; (800360c <HAL_RCC_OscConfig+0x2ac>)
 80033cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033d0:	6013      	str	r3, [r2, #0]
 80033d2:	e01d      	b.n	8003410 <HAL_RCC_OscConfig+0xb0>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033dc:	d10c      	bne.n	80033f8 <HAL_RCC_OscConfig+0x98>
 80033de:	4b8b      	ldr	r3, [pc, #556]	; (800360c <HAL_RCC_OscConfig+0x2ac>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a8a      	ldr	r2, [pc, #552]	; (800360c <HAL_RCC_OscConfig+0x2ac>)
 80033e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033e8:	6013      	str	r3, [r2, #0]
 80033ea:	4b88      	ldr	r3, [pc, #544]	; (800360c <HAL_RCC_OscConfig+0x2ac>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a87      	ldr	r2, [pc, #540]	; (800360c <HAL_RCC_OscConfig+0x2ac>)
 80033f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033f4:	6013      	str	r3, [r2, #0]
 80033f6:	e00b      	b.n	8003410 <HAL_RCC_OscConfig+0xb0>
 80033f8:	4b84      	ldr	r3, [pc, #528]	; (800360c <HAL_RCC_OscConfig+0x2ac>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a83      	ldr	r2, [pc, #524]	; (800360c <HAL_RCC_OscConfig+0x2ac>)
 80033fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003402:	6013      	str	r3, [r2, #0]
 8003404:	4b81      	ldr	r3, [pc, #516]	; (800360c <HAL_RCC_OscConfig+0x2ac>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a80      	ldr	r2, [pc, #512]	; (800360c <HAL_RCC_OscConfig+0x2ac>)
 800340a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800340e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d013      	beq.n	8003440 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003418:	f7fd fc2c 	bl	8000c74 <HAL_GetTick>
 800341c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800341e:	e008      	b.n	8003432 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003420:	f7fd fc28 	bl	8000c74 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	2b64      	cmp	r3, #100	; 0x64
 800342c:	d901      	bls.n	8003432 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e1fb      	b.n	800382a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003432:	4b76      	ldr	r3, [pc, #472]	; (800360c <HAL_RCC_OscConfig+0x2ac>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d0f0      	beq.n	8003420 <HAL_RCC_OscConfig+0xc0>
 800343e:	e014      	b.n	800346a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003440:	f7fd fc18 	bl	8000c74 <HAL_GetTick>
 8003444:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003446:	e008      	b.n	800345a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003448:	f7fd fc14 	bl	8000c74 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	2b64      	cmp	r3, #100	; 0x64
 8003454:	d901      	bls.n	800345a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e1e7      	b.n	800382a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800345a:	4b6c      	ldr	r3, [pc, #432]	; (800360c <HAL_RCC_OscConfig+0x2ac>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d1f0      	bne.n	8003448 <HAL_RCC_OscConfig+0xe8>
 8003466:	e000      	b.n	800346a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003468:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d063      	beq.n	800353e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003476:	4b65      	ldr	r3, [pc, #404]	; (800360c <HAL_RCC_OscConfig+0x2ac>)
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	f003 030c 	and.w	r3, r3, #12
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00b      	beq.n	800349a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003482:	4b62      	ldr	r3, [pc, #392]	; (800360c <HAL_RCC_OscConfig+0x2ac>)
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800348a:	2b08      	cmp	r3, #8
 800348c:	d11c      	bne.n	80034c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800348e:	4b5f      	ldr	r3, [pc, #380]	; (800360c <HAL_RCC_OscConfig+0x2ac>)
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d116      	bne.n	80034c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800349a:	4b5c      	ldr	r3, [pc, #368]	; (800360c <HAL_RCC_OscConfig+0x2ac>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0302 	and.w	r3, r3, #2
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d005      	beq.n	80034b2 <HAL_RCC_OscConfig+0x152>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d001      	beq.n	80034b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e1bb      	b.n	800382a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034b2:	4b56      	ldr	r3, [pc, #344]	; (800360c <HAL_RCC_OscConfig+0x2ac>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	00db      	lsls	r3, r3, #3
 80034c0:	4952      	ldr	r1, [pc, #328]	; (800360c <HAL_RCC_OscConfig+0x2ac>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034c6:	e03a      	b.n	800353e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d020      	beq.n	8003512 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034d0:	4b4f      	ldr	r3, [pc, #316]	; (8003610 <HAL_RCC_OscConfig+0x2b0>)
 80034d2:	2201      	movs	r2, #1
 80034d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d6:	f7fd fbcd 	bl	8000c74 <HAL_GetTick>
 80034da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034dc:	e008      	b.n	80034f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034de:	f7fd fbc9 	bl	8000c74 <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d901      	bls.n	80034f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	e19c      	b.n	800382a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034f0:	4b46      	ldr	r3, [pc, #280]	; (800360c <HAL_RCC_OscConfig+0x2ac>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0302 	and.w	r3, r3, #2
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d0f0      	beq.n	80034de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034fc:	4b43      	ldr	r3, [pc, #268]	; (800360c <HAL_RCC_OscConfig+0x2ac>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	691b      	ldr	r3, [r3, #16]
 8003508:	00db      	lsls	r3, r3, #3
 800350a:	4940      	ldr	r1, [pc, #256]	; (800360c <HAL_RCC_OscConfig+0x2ac>)
 800350c:	4313      	orrs	r3, r2
 800350e:	600b      	str	r3, [r1, #0]
 8003510:	e015      	b.n	800353e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003512:	4b3f      	ldr	r3, [pc, #252]	; (8003610 <HAL_RCC_OscConfig+0x2b0>)
 8003514:	2200      	movs	r2, #0
 8003516:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003518:	f7fd fbac 	bl	8000c74 <HAL_GetTick>
 800351c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800351e:	e008      	b.n	8003532 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003520:	f7fd fba8 	bl	8000c74 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b02      	cmp	r3, #2
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e17b      	b.n	800382a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003532:	4b36      	ldr	r3, [pc, #216]	; (800360c <HAL_RCC_OscConfig+0x2ac>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0302 	and.w	r3, r3, #2
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1f0      	bne.n	8003520 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0308 	and.w	r3, r3, #8
 8003546:	2b00      	cmp	r3, #0
 8003548:	d030      	beq.n	80035ac <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	695b      	ldr	r3, [r3, #20]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d016      	beq.n	8003580 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003552:	4b30      	ldr	r3, [pc, #192]	; (8003614 <HAL_RCC_OscConfig+0x2b4>)
 8003554:	2201      	movs	r2, #1
 8003556:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003558:	f7fd fb8c 	bl	8000c74 <HAL_GetTick>
 800355c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800355e:	e008      	b.n	8003572 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003560:	f7fd fb88 	bl	8000c74 <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	2b02      	cmp	r3, #2
 800356c:	d901      	bls.n	8003572 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e15b      	b.n	800382a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003572:	4b26      	ldr	r3, [pc, #152]	; (800360c <HAL_RCC_OscConfig+0x2ac>)
 8003574:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003576:	f003 0302 	and.w	r3, r3, #2
 800357a:	2b00      	cmp	r3, #0
 800357c:	d0f0      	beq.n	8003560 <HAL_RCC_OscConfig+0x200>
 800357e:	e015      	b.n	80035ac <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003580:	4b24      	ldr	r3, [pc, #144]	; (8003614 <HAL_RCC_OscConfig+0x2b4>)
 8003582:	2200      	movs	r2, #0
 8003584:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003586:	f7fd fb75 	bl	8000c74 <HAL_GetTick>
 800358a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800358c:	e008      	b.n	80035a0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800358e:	f7fd fb71 	bl	8000c74 <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	2b02      	cmp	r3, #2
 800359a:	d901      	bls.n	80035a0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e144      	b.n	800382a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035a0:	4b1a      	ldr	r3, [pc, #104]	; (800360c <HAL_RCC_OscConfig+0x2ac>)
 80035a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035a4:	f003 0302 	and.w	r3, r3, #2
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d1f0      	bne.n	800358e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0304 	and.w	r3, r3, #4
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	f000 80a0 	beq.w	80036fa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035ba:	2300      	movs	r3, #0
 80035bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035be:	4b13      	ldr	r3, [pc, #76]	; (800360c <HAL_RCC_OscConfig+0x2ac>)
 80035c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d10f      	bne.n	80035ea <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035ca:	2300      	movs	r3, #0
 80035cc:	60bb      	str	r3, [r7, #8]
 80035ce:	4b0f      	ldr	r3, [pc, #60]	; (800360c <HAL_RCC_OscConfig+0x2ac>)
 80035d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d2:	4a0e      	ldr	r2, [pc, #56]	; (800360c <HAL_RCC_OscConfig+0x2ac>)
 80035d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035d8:	6413      	str	r3, [r2, #64]	; 0x40
 80035da:	4b0c      	ldr	r3, [pc, #48]	; (800360c <HAL_RCC_OscConfig+0x2ac>)
 80035dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035e2:	60bb      	str	r3, [r7, #8]
 80035e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035e6:	2301      	movs	r3, #1
 80035e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ea:	4b0b      	ldr	r3, [pc, #44]	; (8003618 <HAL_RCC_OscConfig+0x2b8>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d121      	bne.n	800363a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035f6:	4b08      	ldr	r3, [pc, #32]	; (8003618 <HAL_RCC_OscConfig+0x2b8>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a07      	ldr	r2, [pc, #28]	; (8003618 <HAL_RCC_OscConfig+0x2b8>)
 80035fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003600:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003602:	f7fd fb37 	bl	8000c74 <HAL_GetTick>
 8003606:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003608:	e011      	b.n	800362e <HAL_RCC_OscConfig+0x2ce>
 800360a:	bf00      	nop
 800360c:	40023800 	.word	0x40023800
 8003610:	42470000 	.word	0x42470000
 8003614:	42470e80 	.word	0x42470e80
 8003618:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800361c:	f7fd fb2a 	bl	8000c74 <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	2b02      	cmp	r3, #2
 8003628:	d901      	bls.n	800362e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e0fd      	b.n	800382a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800362e:	4b81      	ldr	r3, [pc, #516]	; (8003834 <HAL_RCC_OscConfig+0x4d4>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003636:	2b00      	cmp	r3, #0
 8003638:	d0f0      	beq.n	800361c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	2b01      	cmp	r3, #1
 8003640:	d106      	bne.n	8003650 <HAL_RCC_OscConfig+0x2f0>
 8003642:	4b7d      	ldr	r3, [pc, #500]	; (8003838 <HAL_RCC_OscConfig+0x4d8>)
 8003644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003646:	4a7c      	ldr	r2, [pc, #496]	; (8003838 <HAL_RCC_OscConfig+0x4d8>)
 8003648:	f043 0301 	orr.w	r3, r3, #1
 800364c:	6713      	str	r3, [r2, #112]	; 0x70
 800364e:	e01c      	b.n	800368a <HAL_RCC_OscConfig+0x32a>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	2b05      	cmp	r3, #5
 8003656:	d10c      	bne.n	8003672 <HAL_RCC_OscConfig+0x312>
 8003658:	4b77      	ldr	r3, [pc, #476]	; (8003838 <HAL_RCC_OscConfig+0x4d8>)
 800365a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800365c:	4a76      	ldr	r2, [pc, #472]	; (8003838 <HAL_RCC_OscConfig+0x4d8>)
 800365e:	f043 0304 	orr.w	r3, r3, #4
 8003662:	6713      	str	r3, [r2, #112]	; 0x70
 8003664:	4b74      	ldr	r3, [pc, #464]	; (8003838 <HAL_RCC_OscConfig+0x4d8>)
 8003666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003668:	4a73      	ldr	r2, [pc, #460]	; (8003838 <HAL_RCC_OscConfig+0x4d8>)
 800366a:	f043 0301 	orr.w	r3, r3, #1
 800366e:	6713      	str	r3, [r2, #112]	; 0x70
 8003670:	e00b      	b.n	800368a <HAL_RCC_OscConfig+0x32a>
 8003672:	4b71      	ldr	r3, [pc, #452]	; (8003838 <HAL_RCC_OscConfig+0x4d8>)
 8003674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003676:	4a70      	ldr	r2, [pc, #448]	; (8003838 <HAL_RCC_OscConfig+0x4d8>)
 8003678:	f023 0301 	bic.w	r3, r3, #1
 800367c:	6713      	str	r3, [r2, #112]	; 0x70
 800367e:	4b6e      	ldr	r3, [pc, #440]	; (8003838 <HAL_RCC_OscConfig+0x4d8>)
 8003680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003682:	4a6d      	ldr	r2, [pc, #436]	; (8003838 <HAL_RCC_OscConfig+0x4d8>)
 8003684:	f023 0304 	bic.w	r3, r3, #4
 8003688:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d015      	beq.n	80036be <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003692:	f7fd faef 	bl	8000c74 <HAL_GetTick>
 8003696:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003698:	e00a      	b.n	80036b0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800369a:	f7fd faeb 	bl	8000c74 <HAL_GetTick>
 800369e:	4602      	mov	r2, r0
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d901      	bls.n	80036b0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e0bc      	b.n	800382a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036b0:	4b61      	ldr	r3, [pc, #388]	; (8003838 <HAL_RCC_OscConfig+0x4d8>)
 80036b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b4:	f003 0302 	and.w	r3, r3, #2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d0ee      	beq.n	800369a <HAL_RCC_OscConfig+0x33a>
 80036bc:	e014      	b.n	80036e8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036be:	f7fd fad9 	bl	8000c74 <HAL_GetTick>
 80036c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036c4:	e00a      	b.n	80036dc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036c6:	f7fd fad5 	bl	8000c74 <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d901      	bls.n	80036dc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80036d8:	2303      	movs	r3, #3
 80036da:	e0a6      	b.n	800382a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036dc:	4b56      	ldr	r3, [pc, #344]	; (8003838 <HAL_RCC_OscConfig+0x4d8>)
 80036de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e0:	f003 0302 	and.w	r3, r3, #2
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d1ee      	bne.n	80036c6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036e8:	7dfb      	ldrb	r3, [r7, #23]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d105      	bne.n	80036fa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036ee:	4b52      	ldr	r3, [pc, #328]	; (8003838 <HAL_RCC_OscConfig+0x4d8>)
 80036f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f2:	4a51      	ldr	r2, [pc, #324]	; (8003838 <HAL_RCC_OscConfig+0x4d8>)
 80036f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036f8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	699b      	ldr	r3, [r3, #24]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	f000 8092 	beq.w	8003828 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003704:	4b4c      	ldr	r3, [pc, #304]	; (8003838 <HAL_RCC_OscConfig+0x4d8>)
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	f003 030c 	and.w	r3, r3, #12
 800370c:	2b08      	cmp	r3, #8
 800370e:	d05c      	beq.n	80037ca <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	699b      	ldr	r3, [r3, #24]
 8003714:	2b02      	cmp	r3, #2
 8003716:	d141      	bne.n	800379c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003718:	4b48      	ldr	r3, [pc, #288]	; (800383c <HAL_RCC_OscConfig+0x4dc>)
 800371a:	2200      	movs	r2, #0
 800371c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800371e:	f7fd faa9 	bl	8000c74 <HAL_GetTick>
 8003722:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003724:	e008      	b.n	8003738 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003726:	f7fd faa5 	bl	8000c74 <HAL_GetTick>
 800372a:	4602      	mov	r2, r0
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	2b02      	cmp	r3, #2
 8003732:	d901      	bls.n	8003738 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e078      	b.n	800382a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003738:	4b3f      	ldr	r3, [pc, #252]	; (8003838 <HAL_RCC_OscConfig+0x4d8>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003740:	2b00      	cmp	r3, #0
 8003742:	d1f0      	bne.n	8003726 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	69da      	ldr	r2, [r3, #28]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a1b      	ldr	r3, [r3, #32]
 800374c:	431a      	orrs	r2, r3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003752:	019b      	lsls	r3, r3, #6
 8003754:	431a      	orrs	r2, r3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800375a:	085b      	lsrs	r3, r3, #1
 800375c:	3b01      	subs	r3, #1
 800375e:	041b      	lsls	r3, r3, #16
 8003760:	431a      	orrs	r2, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003766:	061b      	lsls	r3, r3, #24
 8003768:	4933      	ldr	r1, [pc, #204]	; (8003838 <HAL_RCC_OscConfig+0x4d8>)
 800376a:	4313      	orrs	r3, r2
 800376c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800376e:	4b33      	ldr	r3, [pc, #204]	; (800383c <HAL_RCC_OscConfig+0x4dc>)
 8003770:	2201      	movs	r2, #1
 8003772:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003774:	f7fd fa7e 	bl	8000c74 <HAL_GetTick>
 8003778:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800377a:	e008      	b.n	800378e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800377c:	f7fd fa7a 	bl	8000c74 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b02      	cmp	r3, #2
 8003788:	d901      	bls.n	800378e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e04d      	b.n	800382a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800378e:	4b2a      	ldr	r3, [pc, #168]	; (8003838 <HAL_RCC_OscConfig+0x4d8>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d0f0      	beq.n	800377c <HAL_RCC_OscConfig+0x41c>
 800379a:	e045      	b.n	8003828 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800379c:	4b27      	ldr	r3, [pc, #156]	; (800383c <HAL_RCC_OscConfig+0x4dc>)
 800379e:	2200      	movs	r2, #0
 80037a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a2:	f7fd fa67 	bl	8000c74 <HAL_GetTick>
 80037a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037a8:	e008      	b.n	80037bc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037aa:	f7fd fa63 	bl	8000c74 <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d901      	bls.n	80037bc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e036      	b.n	800382a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037bc:	4b1e      	ldr	r3, [pc, #120]	; (8003838 <HAL_RCC_OscConfig+0x4d8>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d1f0      	bne.n	80037aa <HAL_RCC_OscConfig+0x44a>
 80037c8:	e02e      	b.n	8003828 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	699b      	ldr	r3, [r3, #24]
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d101      	bne.n	80037d6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e029      	b.n	800382a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037d6:	4b18      	ldr	r3, [pc, #96]	; (8003838 <HAL_RCC_OscConfig+0x4d8>)
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	69db      	ldr	r3, [r3, #28]
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d11c      	bne.n	8003824 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d115      	bne.n	8003824 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80037f8:	68fa      	ldr	r2, [r7, #12]
 80037fa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037fe:	4013      	ands	r3, r2
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003804:	4293      	cmp	r3, r2
 8003806:	d10d      	bne.n	8003824 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003812:	429a      	cmp	r2, r3
 8003814:	d106      	bne.n	8003824 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003820:	429a      	cmp	r2, r3
 8003822:	d001      	beq.n	8003828 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e000      	b.n	800382a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3718      	adds	r7, #24
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	40007000 	.word	0x40007000
 8003838:	40023800 	.word	0x40023800
 800383c:	42470060 	.word	0x42470060

08003840 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d101      	bne.n	8003854 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e0cc      	b.n	80039ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003854:	4b68      	ldr	r3, [pc, #416]	; (80039f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 030f 	and.w	r3, r3, #15
 800385c:	683a      	ldr	r2, [r7, #0]
 800385e:	429a      	cmp	r2, r3
 8003860:	d90c      	bls.n	800387c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003862:	4b65      	ldr	r3, [pc, #404]	; (80039f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003864:	683a      	ldr	r2, [r7, #0]
 8003866:	b2d2      	uxtb	r2, r2
 8003868:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800386a:	4b63      	ldr	r3, [pc, #396]	; (80039f8 <HAL_RCC_ClockConfig+0x1b8>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 030f 	and.w	r3, r3, #15
 8003872:	683a      	ldr	r2, [r7, #0]
 8003874:	429a      	cmp	r2, r3
 8003876:	d001      	beq.n	800387c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e0b8      	b.n	80039ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0302 	and.w	r3, r3, #2
 8003884:	2b00      	cmp	r3, #0
 8003886:	d020      	beq.n	80038ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0304 	and.w	r3, r3, #4
 8003890:	2b00      	cmp	r3, #0
 8003892:	d005      	beq.n	80038a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003894:	4b59      	ldr	r3, [pc, #356]	; (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	4a58      	ldr	r2, [pc, #352]	; (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 800389a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800389e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0308 	and.w	r3, r3, #8
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d005      	beq.n	80038b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038ac:	4b53      	ldr	r3, [pc, #332]	; (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	4a52      	ldr	r2, [pc, #328]	; (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 80038b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80038b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038b8:	4b50      	ldr	r3, [pc, #320]	; (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	494d      	ldr	r1, [pc, #308]	; (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0301 	and.w	r3, r3, #1
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d044      	beq.n	8003960 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d107      	bne.n	80038ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038de:	4b47      	ldr	r3, [pc, #284]	; (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d119      	bne.n	800391e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e07f      	b.n	80039ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d003      	beq.n	80038fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038fa:	2b03      	cmp	r3, #3
 80038fc:	d107      	bne.n	800390e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038fe:	4b3f      	ldr	r3, [pc, #252]	; (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d109      	bne.n	800391e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e06f      	b.n	80039ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800390e:	4b3b      	ldr	r3, [pc, #236]	; (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b00      	cmp	r3, #0
 8003918:	d101      	bne.n	800391e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e067      	b.n	80039ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800391e:	4b37      	ldr	r3, [pc, #220]	; (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f023 0203 	bic.w	r2, r3, #3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	4934      	ldr	r1, [pc, #208]	; (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 800392c:	4313      	orrs	r3, r2
 800392e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003930:	f7fd f9a0 	bl	8000c74 <HAL_GetTick>
 8003934:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003936:	e00a      	b.n	800394e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003938:	f7fd f99c 	bl	8000c74 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	f241 3288 	movw	r2, #5000	; 0x1388
 8003946:	4293      	cmp	r3, r2
 8003948:	d901      	bls.n	800394e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e04f      	b.n	80039ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800394e:	4b2b      	ldr	r3, [pc, #172]	; (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	f003 020c 	and.w	r2, r3, #12
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	429a      	cmp	r2, r3
 800395e:	d1eb      	bne.n	8003938 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003960:	4b25      	ldr	r3, [pc, #148]	; (80039f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 030f 	and.w	r3, r3, #15
 8003968:	683a      	ldr	r2, [r7, #0]
 800396a:	429a      	cmp	r2, r3
 800396c:	d20c      	bcs.n	8003988 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800396e:	4b22      	ldr	r3, [pc, #136]	; (80039f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003970:	683a      	ldr	r2, [r7, #0]
 8003972:	b2d2      	uxtb	r2, r2
 8003974:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003976:	4b20      	ldr	r3, [pc, #128]	; (80039f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 030f 	and.w	r3, r3, #15
 800397e:	683a      	ldr	r2, [r7, #0]
 8003980:	429a      	cmp	r2, r3
 8003982:	d001      	beq.n	8003988 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e032      	b.n	80039ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0304 	and.w	r3, r3, #4
 8003990:	2b00      	cmp	r3, #0
 8003992:	d008      	beq.n	80039a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003994:	4b19      	ldr	r3, [pc, #100]	; (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	4916      	ldr	r1, [pc, #88]	; (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0308 	and.w	r3, r3, #8
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d009      	beq.n	80039c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039b2:	4b12      	ldr	r3, [pc, #72]	; (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	00db      	lsls	r3, r3, #3
 80039c0:	490e      	ldr	r1, [pc, #56]	; (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80039c6:	f000 f821 	bl	8003a0c <HAL_RCC_GetSysClockFreq>
 80039ca:	4601      	mov	r1, r0
 80039cc:	4b0b      	ldr	r3, [pc, #44]	; (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	091b      	lsrs	r3, r3, #4
 80039d2:	f003 030f 	and.w	r3, r3, #15
 80039d6:	4a0a      	ldr	r2, [pc, #40]	; (8003a00 <HAL_RCC_ClockConfig+0x1c0>)
 80039d8:	5cd3      	ldrb	r3, [r2, r3]
 80039da:	fa21 f303 	lsr.w	r3, r1, r3
 80039de:	4a09      	ldr	r2, [pc, #36]	; (8003a04 <HAL_RCC_ClockConfig+0x1c4>)
 80039e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80039e2:	4b09      	ldr	r3, [pc, #36]	; (8003a08 <HAL_RCC_ClockConfig+0x1c8>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7fd f900 	bl	8000bec <HAL_InitTick>

  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3710      	adds	r7, #16
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	40023c00 	.word	0x40023c00
 80039fc:	40023800 	.word	0x40023800
 8003a00:	08007fb8 	.word	0x08007fb8
 8003a04:	20000000 	.word	0x20000000
 8003a08:	20000004 	.word	0x20000004

08003a0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a0e:	b085      	sub	sp, #20
 8003a10:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a12:	2300      	movs	r3, #0
 8003a14:	607b      	str	r3, [r7, #4]
 8003a16:	2300      	movs	r3, #0
 8003a18:	60fb      	str	r3, [r7, #12]
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a22:	4b50      	ldr	r3, [pc, #320]	; (8003b64 <HAL_RCC_GetSysClockFreq+0x158>)
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f003 030c 	and.w	r3, r3, #12
 8003a2a:	2b04      	cmp	r3, #4
 8003a2c:	d007      	beq.n	8003a3e <HAL_RCC_GetSysClockFreq+0x32>
 8003a2e:	2b08      	cmp	r3, #8
 8003a30:	d008      	beq.n	8003a44 <HAL_RCC_GetSysClockFreq+0x38>
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	f040 808d 	bne.w	8003b52 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a38:	4b4b      	ldr	r3, [pc, #300]	; (8003b68 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003a3a:	60bb      	str	r3, [r7, #8]
       break;
 8003a3c:	e08c      	b.n	8003b58 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a3e:	4b4b      	ldr	r3, [pc, #300]	; (8003b6c <HAL_RCC_GetSysClockFreq+0x160>)
 8003a40:	60bb      	str	r3, [r7, #8]
      break;
 8003a42:	e089      	b.n	8003b58 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a44:	4b47      	ldr	r3, [pc, #284]	; (8003b64 <HAL_RCC_GetSysClockFreq+0x158>)
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a4c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a4e:	4b45      	ldr	r3, [pc, #276]	; (8003b64 <HAL_RCC_GetSysClockFreq+0x158>)
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d023      	beq.n	8003aa2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a5a:	4b42      	ldr	r3, [pc, #264]	; (8003b64 <HAL_RCC_GetSysClockFreq+0x158>)
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	099b      	lsrs	r3, r3, #6
 8003a60:	f04f 0400 	mov.w	r4, #0
 8003a64:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003a68:	f04f 0200 	mov.w	r2, #0
 8003a6c:	ea03 0501 	and.w	r5, r3, r1
 8003a70:	ea04 0602 	and.w	r6, r4, r2
 8003a74:	4a3d      	ldr	r2, [pc, #244]	; (8003b6c <HAL_RCC_GetSysClockFreq+0x160>)
 8003a76:	fb02 f106 	mul.w	r1, r2, r6
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	fb02 f205 	mul.w	r2, r2, r5
 8003a80:	440a      	add	r2, r1
 8003a82:	493a      	ldr	r1, [pc, #232]	; (8003b6c <HAL_RCC_GetSysClockFreq+0x160>)
 8003a84:	fba5 0101 	umull	r0, r1, r5, r1
 8003a88:	1853      	adds	r3, r2, r1
 8003a8a:	4619      	mov	r1, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f04f 0400 	mov.w	r4, #0
 8003a92:	461a      	mov	r2, r3
 8003a94:	4623      	mov	r3, r4
 8003a96:	f7fc fb9d 	bl	80001d4 <__aeabi_uldivmod>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	460c      	mov	r4, r1
 8003a9e:	60fb      	str	r3, [r7, #12]
 8003aa0:	e049      	b.n	8003b36 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003aa2:	4b30      	ldr	r3, [pc, #192]	; (8003b64 <HAL_RCC_GetSysClockFreq+0x158>)
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	099b      	lsrs	r3, r3, #6
 8003aa8:	f04f 0400 	mov.w	r4, #0
 8003aac:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003ab0:	f04f 0200 	mov.w	r2, #0
 8003ab4:	ea03 0501 	and.w	r5, r3, r1
 8003ab8:	ea04 0602 	and.w	r6, r4, r2
 8003abc:	4629      	mov	r1, r5
 8003abe:	4632      	mov	r2, r6
 8003ac0:	f04f 0300 	mov.w	r3, #0
 8003ac4:	f04f 0400 	mov.w	r4, #0
 8003ac8:	0154      	lsls	r4, r2, #5
 8003aca:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003ace:	014b      	lsls	r3, r1, #5
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	4622      	mov	r2, r4
 8003ad4:	1b49      	subs	r1, r1, r5
 8003ad6:	eb62 0206 	sbc.w	r2, r2, r6
 8003ada:	f04f 0300 	mov.w	r3, #0
 8003ade:	f04f 0400 	mov.w	r4, #0
 8003ae2:	0194      	lsls	r4, r2, #6
 8003ae4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003ae8:	018b      	lsls	r3, r1, #6
 8003aea:	1a5b      	subs	r3, r3, r1
 8003aec:	eb64 0402 	sbc.w	r4, r4, r2
 8003af0:	f04f 0100 	mov.w	r1, #0
 8003af4:	f04f 0200 	mov.w	r2, #0
 8003af8:	00e2      	lsls	r2, r4, #3
 8003afa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003afe:	00d9      	lsls	r1, r3, #3
 8003b00:	460b      	mov	r3, r1
 8003b02:	4614      	mov	r4, r2
 8003b04:	195b      	adds	r3, r3, r5
 8003b06:	eb44 0406 	adc.w	r4, r4, r6
 8003b0a:	f04f 0100 	mov.w	r1, #0
 8003b0e:	f04f 0200 	mov.w	r2, #0
 8003b12:	02a2      	lsls	r2, r4, #10
 8003b14:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003b18:	0299      	lsls	r1, r3, #10
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	4614      	mov	r4, r2
 8003b1e:	4618      	mov	r0, r3
 8003b20:	4621      	mov	r1, r4
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f04f 0400 	mov.w	r4, #0
 8003b28:	461a      	mov	r2, r3
 8003b2a:	4623      	mov	r3, r4
 8003b2c:	f7fc fb52 	bl	80001d4 <__aeabi_uldivmod>
 8003b30:	4603      	mov	r3, r0
 8003b32:	460c      	mov	r4, r1
 8003b34:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b36:	4b0b      	ldr	r3, [pc, #44]	; (8003b64 <HAL_RCC_GetSysClockFreq+0x158>)
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	0c1b      	lsrs	r3, r3, #16
 8003b3c:	f003 0303 	and.w	r3, r3, #3
 8003b40:	3301      	adds	r3, #1
 8003b42:	005b      	lsls	r3, r3, #1
 8003b44:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003b46:	68fa      	ldr	r2, [r7, #12]
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b4e:	60bb      	str	r3, [r7, #8]
      break;
 8003b50:	e002      	b.n	8003b58 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b52:	4b05      	ldr	r3, [pc, #20]	; (8003b68 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003b54:	60bb      	str	r3, [r7, #8]
      break;
 8003b56:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b58:	68bb      	ldr	r3, [r7, #8]
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3714      	adds	r7, #20
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b62:	bf00      	nop
 8003b64:	40023800 	.word	0x40023800
 8003b68:	00f42400 	.word	0x00f42400
 8003b6c:	017d7840 	.word	0x017d7840

08003b70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b70:	b480      	push	{r7}
 8003b72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b74:	4b03      	ldr	r3, [pc, #12]	; (8003b84 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b76:	681b      	ldr	r3, [r3, #0]
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr
 8003b82:	bf00      	nop
 8003b84:	20000000 	.word	0x20000000

08003b88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d101      	bne.n	8003b9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e01d      	b.n	8003bd6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d106      	bne.n	8003bb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f7fc ff24 	bl	80009fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2202      	movs	r2, #2
 8003bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	3304      	adds	r3, #4
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	4610      	mov	r0, r2
 8003bc8:	f000 f97a 	bl	8003ec0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3708      	adds	r7, #8
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}

08003bde <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003bde:	b480      	push	{r7}
 8003be0:	b085      	sub	sp, #20
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68da      	ldr	r2, [r3, #12]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f042 0201 	orr.w	r2, r2, #1
 8003bf4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f003 0307 	and.w	r3, r3, #7
 8003c00:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2b06      	cmp	r3, #6
 8003c06:	d007      	beq.n	8003c18 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f042 0201 	orr.w	r2, r2, #1
 8003c16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3714      	adds	r7, #20
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr

08003c26 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003c26:	b580      	push	{r7, lr}
 8003c28:	b082      	sub	sp, #8
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d101      	bne.n	8003c38 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e01d      	b.n	8003c74 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d106      	bne.n	8003c52 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f000 f815 	bl	8003c7c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2202      	movs	r2, #2
 8003c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	3304      	adds	r3, #4
 8003c62:	4619      	mov	r1, r3
 8003c64:	4610      	mov	r0, r2
 8003c66:	f000 f92b 	bl	8003ec0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3708      	adds	r7, #8
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003c84:	bf00      	nop
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d101      	bne.n	8003caa <HAL_TIM_OC_ConfigChannel+0x1a>
 8003ca6:	2302      	movs	r3, #2
 8003ca8:	e04e      	b.n	8003d48 <HAL_TIM_OC_ConfigChannel+0xb8>
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2201      	movs	r2, #1
 8003cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2202      	movs	r2, #2
 8003cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2b0c      	cmp	r3, #12
 8003cbe:	d839      	bhi.n	8003d34 <HAL_TIM_OC_ConfigChannel+0xa4>
 8003cc0:	a201      	add	r2, pc, #4	; (adr r2, 8003cc8 <HAL_TIM_OC_ConfigChannel+0x38>)
 8003cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc6:	bf00      	nop
 8003cc8:	08003cfd 	.word	0x08003cfd
 8003ccc:	08003d35 	.word	0x08003d35
 8003cd0:	08003d35 	.word	0x08003d35
 8003cd4:	08003d35 	.word	0x08003d35
 8003cd8:	08003d0b 	.word	0x08003d0b
 8003cdc:	08003d35 	.word	0x08003d35
 8003ce0:	08003d35 	.word	0x08003d35
 8003ce4:	08003d35 	.word	0x08003d35
 8003ce8:	08003d19 	.word	0x08003d19
 8003cec:	08003d35 	.word	0x08003d35
 8003cf0:	08003d35 	.word	0x08003d35
 8003cf4:	08003d35 	.word	0x08003d35
 8003cf8:	08003d27 	.word	0x08003d27
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	68b9      	ldr	r1, [r7, #8]
 8003d02:	4618      	mov	r0, r3
 8003d04:	f000 f95c 	bl	8003fc0 <TIM_OC1_SetConfig>
      break;
 8003d08:	e015      	b.n	8003d36 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	68b9      	ldr	r1, [r7, #8]
 8003d10:	4618      	mov	r0, r3
 8003d12:	f000 f9bb 	bl	800408c <TIM_OC2_SetConfig>
      break;
 8003d16:	e00e      	b.n	8003d36 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68b9      	ldr	r1, [r7, #8]
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f000 fa20 	bl	8004164 <TIM_OC3_SetConfig>
      break;
 8003d24:	e007      	b.n	8003d36 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	68b9      	ldr	r1, [r7, #8]
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f000 fa83 	bl	8004238 <TIM_OC4_SetConfig>
      break;
 8003d32:	e000      	b.n	8003d36 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8003d34:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2201      	movs	r2, #1
 8003d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d46:	2300      	movs	r3, #0
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3710      	adds	r7, #16
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d101      	bne.n	8003d68 <HAL_TIM_ConfigClockSource+0x18>
 8003d64:	2302      	movs	r3, #2
 8003d66:	e0a6      	b.n	8003eb6 <HAL_TIM_ConfigClockSource+0x166>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2202      	movs	r2, #2
 8003d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d86:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d8e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68fa      	ldr	r2, [r7, #12]
 8003d96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2b40      	cmp	r3, #64	; 0x40
 8003d9e:	d067      	beq.n	8003e70 <HAL_TIM_ConfigClockSource+0x120>
 8003da0:	2b40      	cmp	r3, #64	; 0x40
 8003da2:	d80b      	bhi.n	8003dbc <HAL_TIM_ConfigClockSource+0x6c>
 8003da4:	2b10      	cmp	r3, #16
 8003da6:	d073      	beq.n	8003e90 <HAL_TIM_ConfigClockSource+0x140>
 8003da8:	2b10      	cmp	r3, #16
 8003daa:	d802      	bhi.n	8003db2 <HAL_TIM_ConfigClockSource+0x62>
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d06f      	beq.n	8003e90 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003db0:	e078      	b.n	8003ea4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003db2:	2b20      	cmp	r3, #32
 8003db4:	d06c      	beq.n	8003e90 <HAL_TIM_ConfigClockSource+0x140>
 8003db6:	2b30      	cmp	r3, #48	; 0x30
 8003db8:	d06a      	beq.n	8003e90 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003dba:	e073      	b.n	8003ea4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003dbc:	2b70      	cmp	r3, #112	; 0x70
 8003dbe:	d00d      	beq.n	8003ddc <HAL_TIM_ConfigClockSource+0x8c>
 8003dc0:	2b70      	cmp	r3, #112	; 0x70
 8003dc2:	d804      	bhi.n	8003dce <HAL_TIM_ConfigClockSource+0x7e>
 8003dc4:	2b50      	cmp	r3, #80	; 0x50
 8003dc6:	d033      	beq.n	8003e30 <HAL_TIM_ConfigClockSource+0xe0>
 8003dc8:	2b60      	cmp	r3, #96	; 0x60
 8003dca:	d041      	beq.n	8003e50 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003dcc:	e06a      	b.n	8003ea4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003dce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dd2:	d066      	beq.n	8003ea2 <HAL_TIM_ConfigClockSource+0x152>
 8003dd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dd8:	d017      	beq.n	8003e0a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003dda:	e063      	b.n	8003ea4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6818      	ldr	r0, [r3, #0]
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	6899      	ldr	r1, [r3, #8]
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	685a      	ldr	r2, [r3, #4]
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	f000 faee 	bl	80043cc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003dfe:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68fa      	ldr	r2, [r7, #12]
 8003e06:	609a      	str	r2, [r3, #8]
      break;
 8003e08:	e04c      	b.n	8003ea4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6818      	ldr	r0, [r3, #0]
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	6899      	ldr	r1, [r3, #8]
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	685a      	ldr	r2, [r3, #4]
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	f000 fad7 	bl	80043cc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	689a      	ldr	r2, [r3, #8]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e2c:	609a      	str	r2, [r3, #8]
      break;
 8003e2e:	e039      	b.n	8003ea4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6818      	ldr	r0, [r3, #0]
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	6859      	ldr	r1, [r3, #4]
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	f000 fa4b 	bl	80042d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2150      	movs	r1, #80	; 0x50
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f000 faa4 	bl	8004396 <TIM_ITRx_SetConfig>
      break;
 8003e4e:	e029      	b.n	8003ea4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6818      	ldr	r0, [r3, #0]
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	6859      	ldr	r1, [r3, #4]
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	f000 fa6a 	bl	8004336 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2160      	movs	r1, #96	; 0x60
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f000 fa94 	bl	8004396 <TIM_ITRx_SetConfig>
      break;
 8003e6e:	e019      	b.n	8003ea4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6818      	ldr	r0, [r3, #0]
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	6859      	ldr	r1, [r3, #4]
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	f000 fa2b 	bl	80042d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2140      	movs	r1, #64	; 0x40
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f000 fa84 	bl	8004396 <TIM_ITRx_SetConfig>
      break;
 8003e8e:	e009      	b.n	8003ea4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4619      	mov	r1, r3
 8003e9a:	4610      	mov	r0, r2
 8003e9c:	f000 fa7b 	bl	8004396 <TIM_ITRx_SetConfig>
      break;
 8003ea0:	e000      	b.n	8003ea4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003ea2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3710      	adds	r7, #16
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
	...

08003ec0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b085      	sub	sp, #20
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4a34      	ldr	r2, [pc, #208]	; (8003fa4 <TIM_Base_SetConfig+0xe4>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d00f      	beq.n	8003ef8 <TIM_Base_SetConfig+0x38>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ede:	d00b      	beq.n	8003ef8 <TIM_Base_SetConfig+0x38>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4a31      	ldr	r2, [pc, #196]	; (8003fa8 <TIM_Base_SetConfig+0xe8>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d007      	beq.n	8003ef8 <TIM_Base_SetConfig+0x38>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a30      	ldr	r2, [pc, #192]	; (8003fac <TIM_Base_SetConfig+0xec>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d003      	beq.n	8003ef8 <TIM_Base_SetConfig+0x38>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4a2f      	ldr	r2, [pc, #188]	; (8003fb0 <TIM_Base_SetConfig+0xf0>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d108      	bne.n	8003f0a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003efe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	68fa      	ldr	r2, [r7, #12]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a25      	ldr	r2, [pc, #148]	; (8003fa4 <TIM_Base_SetConfig+0xe4>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d01b      	beq.n	8003f4a <TIM_Base_SetConfig+0x8a>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f18:	d017      	beq.n	8003f4a <TIM_Base_SetConfig+0x8a>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a22      	ldr	r2, [pc, #136]	; (8003fa8 <TIM_Base_SetConfig+0xe8>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d013      	beq.n	8003f4a <TIM_Base_SetConfig+0x8a>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a21      	ldr	r2, [pc, #132]	; (8003fac <TIM_Base_SetConfig+0xec>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d00f      	beq.n	8003f4a <TIM_Base_SetConfig+0x8a>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a20      	ldr	r2, [pc, #128]	; (8003fb0 <TIM_Base_SetConfig+0xf0>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d00b      	beq.n	8003f4a <TIM_Base_SetConfig+0x8a>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a1f      	ldr	r2, [pc, #124]	; (8003fb4 <TIM_Base_SetConfig+0xf4>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d007      	beq.n	8003f4a <TIM_Base_SetConfig+0x8a>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a1e      	ldr	r2, [pc, #120]	; (8003fb8 <TIM_Base_SetConfig+0xf8>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d003      	beq.n	8003f4a <TIM_Base_SetConfig+0x8a>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a1d      	ldr	r2, [pc, #116]	; (8003fbc <TIM_Base_SetConfig+0xfc>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d108      	bne.n	8003f5c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	68fa      	ldr	r2, [r7, #12]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	695b      	ldr	r3, [r3, #20]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	68fa      	ldr	r2, [r7, #12]
 8003f6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	689a      	ldr	r2, [r3, #8]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4a08      	ldr	r2, [pc, #32]	; (8003fa4 <TIM_Base_SetConfig+0xe4>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d103      	bne.n	8003f90 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	691a      	ldr	r2, [r3, #16]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	615a      	str	r2, [r3, #20]
}
 8003f96:	bf00      	nop
 8003f98:	3714      	adds	r7, #20
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr
 8003fa2:	bf00      	nop
 8003fa4:	40010000 	.word	0x40010000
 8003fa8:	40000400 	.word	0x40000400
 8003fac:	40000800 	.word	0x40000800
 8003fb0:	40000c00 	.word	0x40000c00
 8003fb4:	40014000 	.word	0x40014000
 8003fb8:	40014400 	.word	0x40014400
 8003fbc:	40014800 	.word	0x40014800

08003fc0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b087      	sub	sp, #28
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a1b      	ldr	r3, [r3, #32]
 8003fce:	f023 0201 	bic.w	r2, r3, #1
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a1b      	ldr	r3, [r3, #32]
 8003fda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	699b      	ldr	r3, [r3, #24]
 8003fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f023 0303 	bic.w	r3, r3, #3
 8003ff6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68fa      	ldr	r2, [r7, #12]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	f023 0302 	bic.w	r3, r3, #2
 8004008:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	697a      	ldr	r2, [r7, #20]
 8004010:	4313      	orrs	r3, r2
 8004012:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4a1c      	ldr	r2, [pc, #112]	; (8004088 <TIM_OC1_SetConfig+0xc8>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d10c      	bne.n	8004036 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	f023 0308 	bic.w	r3, r3, #8
 8004022:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	697a      	ldr	r2, [r7, #20]
 800402a:	4313      	orrs	r3, r2
 800402c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	f023 0304 	bic.w	r3, r3, #4
 8004034:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a13      	ldr	r2, [pc, #76]	; (8004088 <TIM_OC1_SetConfig+0xc8>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d111      	bne.n	8004062 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004044:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800404c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	693a      	ldr	r2, [r7, #16]
 8004054:	4313      	orrs	r3, r2
 8004056:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	699b      	ldr	r3, [r3, #24]
 800405c:	693a      	ldr	r2, [r7, #16]
 800405e:	4313      	orrs	r3, r2
 8004060:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	693a      	ldr	r2, [r7, #16]
 8004066:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	68fa      	ldr	r2, [r7, #12]
 800406c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	685a      	ldr	r2, [r3, #4]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	697a      	ldr	r2, [r7, #20]
 800407a:	621a      	str	r2, [r3, #32]
}
 800407c:	bf00      	nop
 800407e:	371c      	adds	r7, #28
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr
 8004088:	40010000 	.word	0x40010000

0800408c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800408c:	b480      	push	{r7}
 800408e:	b087      	sub	sp, #28
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a1b      	ldr	r3, [r3, #32]
 800409a:	f023 0210 	bic.w	r2, r3, #16
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a1b      	ldr	r3, [r3, #32]
 80040a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	699b      	ldr	r3, [r3, #24]
 80040b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	021b      	lsls	r3, r3, #8
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	f023 0320 	bic.w	r3, r3, #32
 80040d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	011b      	lsls	r3, r3, #4
 80040de:	697a      	ldr	r2, [r7, #20]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a1e      	ldr	r2, [pc, #120]	; (8004160 <TIM_OC2_SetConfig+0xd4>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d10d      	bne.n	8004108 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	011b      	lsls	r3, r3, #4
 80040fa:	697a      	ldr	r2, [r7, #20]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004106:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4a15      	ldr	r2, [pc, #84]	; (8004160 <TIM_OC2_SetConfig+0xd4>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d113      	bne.n	8004138 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004116:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800411e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	695b      	ldr	r3, [r3, #20]
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	693a      	ldr	r2, [r7, #16]
 8004128:	4313      	orrs	r3, r2
 800412a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	699b      	ldr	r3, [r3, #24]
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	693a      	ldr	r2, [r7, #16]
 8004134:	4313      	orrs	r3, r2
 8004136:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	693a      	ldr	r2, [r7, #16]
 800413c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	68fa      	ldr	r2, [r7, #12]
 8004142:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	685a      	ldr	r2, [r3, #4]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	697a      	ldr	r2, [r7, #20]
 8004150:	621a      	str	r2, [r3, #32]
}
 8004152:	bf00      	nop
 8004154:	371c      	adds	r7, #28
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	40010000 	.word	0x40010000

08004164 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004164:	b480      	push	{r7}
 8004166:	b087      	sub	sp, #28
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a1b      	ldr	r3, [r3, #32]
 8004172:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a1b      	ldr	r3, [r3, #32]
 800417e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	69db      	ldr	r3, [r3, #28]
 800418a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004192:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f023 0303 	bic.w	r3, r3, #3
 800419a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	68fa      	ldr	r2, [r7, #12]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	021b      	lsls	r3, r3, #8
 80041b4:	697a      	ldr	r2, [r7, #20]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a1d      	ldr	r2, [pc, #116]	; (8004234 <TIM_OC3_SetConfig+0xd0>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d10d      	bne.n	80041de <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	021b      	lsls	r3, r3, #8
 80041d0:	697a      	ldr	r2, [r7, #20]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a14      	ldr	r2, [pc, #80]	; (8004234 <TIM_OC3_SetConfig+0xd0>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d113      	bne.n	800420e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80041f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	695b      	ldr	r3, [r3, #20]
 80041fa:	011b      	lsls	r3, r3, #4
 80041fc:	693a      	ldr	r2, [r7, #16]
 80041fe:	4313      	orrs	r3, r2
 8004200:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	699b      	ldr	r3, [r3, #24]
 8004206:	011b      	lsls	r3, r3, #4
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	4313      	orrs	r3, r2
 800420c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	693a      	ldr	r2, [r7, #16]
 8004212:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	685a      	ldr	r2, [r3, #4]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	697a      	ldr	r2, [r7, #20]
 8004226:	621a      	str	r2, [r3, #32]
}
 8004228:	bf00      	nop
 800422a:	371c      	adds	r7, #28
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr
 8004234:	40010000 	.word	0x40010000

08004238 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004238:	b480      	push	{r7}
 800423a:	b087      	sub	sp, #28
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a1b      	ldr	r3, [r3, #32]
 8004246:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a1b      	ldr	r3, [r3, #32]
 8004252:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	69db      	ldr	r3, [r3, #28]
 800425e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004266:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800426e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	021b      	lsls	r3, r3, #8
 8004276:	68fa      	ldr	r2, [r7, #12]
 8004278:	4313      	orrs	r3, r2
 800427a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004282:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	031b      	lsls	r3, r3, #12
 800428a:	693a      	ldr	r2, [r7, #16]
 800428c:	4313      	orrs	r3, r2
 800428e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	4a10      	ldr	r2, [pc, #64]	; (80042d4 <TIM_OC4_SetConfig+0x9c>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d109      	bne.n	80042ac <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800429e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	695b      	ldr	r3, [r3, #20]
 80042a4:	019b      	lsls	r3, r3, #6
 80042a6:	697a      	ldr	r2, [r7, #20]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	697a      	ldr	r2, [r7, #20]
 80042b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	68fa      	ldr	r2, [r7, #12]
 80042b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	685a      	ldr	r2, [r3, #4]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	693a      	ldr	r2, [r7, #16]
 80042c4:	621a      	str	r2, [r3, #32]
}
 80042c6:	bf00      	nop
 80042c8:	371c      	adds	r7, #28
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	40010000 	.word	0x40010000

080042d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042d8:	b480      	push	{r7}
 80042da:	b087      	sub	sp, #28
 80042dc:	af00      	add	r7, sp, #0
 80042de:	60f8      	str	r0, [r7, #12]
 80042e0:	60b9      	str	r1, [r7, #8]
 80042e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6a1b      	ldr	r3, [r3, #32]
 80042e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	6a1b      	ldr	r3, [r3, #32]
 80042ee:	f023 0201 	bic.w	r2, r3, #1
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	699b      	ldr	r3, [r3, #24]
 80042fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004302:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	011b      	lsls	r3, r3, #4
 8004308:	693a      	ldr	r2, [r7, #16]
 800430a:	4313      	orrs	r3, r2
 800430c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	f023 030a 	bic.w	r3, r3, #10
 8004314:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004316:	697a      	ldr	r2, [r7, #20]
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	4313      	orrs	r3, r2
 800431c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	693a      	ldr	r2, [r7, #16]
 8004322:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	697a      	ldr	r2, [r7, #20]
 8004328:	621a      	str	r2, [r3, #32]
}
 800432a:	bf00      	nop
 800432c:	371c      	adds	r7, #28
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr

08004336 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004336:	b480      	push	{r7}
 8004338:	b087      	sub	sp, #28
 800433a:	af00      	add	r7, sp, #0
 800433c:	60f8      	str	r0, [r7, #12]
 800433e:	60b9      	str	r1, [r7, #8]
 8004340:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6a1b      	ldr	r3, [r3, #32]
 8004346:	f023 0210 	bic.w	r2, r3, #16
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	699b      	ldr	r3, [r3, #24]
 8004352:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6a1b      	ldr	r3, [r3, #32]
 8004358:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004360:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	031b      	lsls	r3, r3, #12
 8004366:	697a      	ldr	r2, [r7, #20]
 8004368:	4313      	orrs	r3, r2
 800436a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004372:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	011b      	lsls	r3, r3, #4
 8004378:	693a      	ldr	r2, [r7, #16]
 800437a:	4313      	orrs	r3, r2
 800437c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	697a      	ldr	r2, [r7, #20]
 8004382:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	693a      	ldr	r2, [r7, #16]
 8004388:	621a      	str	r2, [r3, #32]
}
 800438a:	bf00      	nop
 800438c:	371c      	adds	r7, #28
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr

08004396 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004396:	b480      	push	{r7}
 8004398:	b085      	sub	sp, #20
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
 800439e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043ae:	683a      	ldr	r2, [r7, #0]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	f043 0307 	orr.w	r3, r3, #7
 80043b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	68fa      	ldr	r2, [r7, #12]
 80043be:	609a      	str	r2, [r3, #8]
}
 80043c0:	bf00      	nop
 80043c2:	3714      	adds	r7, #20
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b087      	sub	sp, #28
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	60b9      	str	r1, [r7, #8]
 80043d6:	607a      	str	r2, [r7, #4]
 80043d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	021a      	lsls	r2, r3, #8
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	431a      	orrs	r2, r3
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	697a      	ldr	r2, [r7, #20]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	697a      	ldr	r2, [r7, #20]
 80043fe:	609a      	str	r2, [r3, #8]
}
 8004400:	bf00      	nop
 8004402:	371c      	adds	r7, #28
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800440c:	b480      	push	{r7}
 800440e:	b085      	sub	sp, #20
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800441c:	2b01      	cmp	r3, #1
 800441e:	d101      	bne.n	8004424 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004420:	2302      	movs	r3, #2
 8004422:	e050      	b.n	80044c6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2202      	movs	r2, #2
 8004430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800444a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68fa      	ldr	r2, [r7, #12]
 8004452:	4313      	orrs	r3, r2
 8004454:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	68fa      	ldr	r2, [r7, #12]
 800445c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a1c      	ldr	r2, [pc, #112]	; (80044d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d018      	beq.n	800449a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004470:	d013      	beq.n	800449a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a18      	ldr	r2, [pc, #96]	; (80044d8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d00e      	beq.n	800449a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a16      	ldr	r2, [pc, #88]	; (80044dc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d009      	beq.n	800449a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a15      	ldr	r2, [pc, #84]	; (80044e0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d004      	beq.n	800449a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a13      	ldr	r2, [pc, #76]	; (80044e4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d10c      	bne.n	80044b4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	68ba      	ldr	r2, [r7, #8]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	68ba      	ldr	r2, [r7, #8]
 80044b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3714      	adds	r7, #20
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr
 80044d2:	bf00      	nop
 80044d4:	40010000 	.word	0x40010000
 80044d8:	40000400 	.word	0x40000400
 80044dc:	40000800 	.word	0x40000800
 80044e0:	40000c00 	.word	0x40000c00
 80044e4:	40014000 	.word	0x40014000

080044e8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80044e8:	b084      	sub	sp, #16
 80044ea:	b580      	push	{r7, lr}
 80044ec:	b084      	sub	sp, #16
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
 80044f2:	f107 001c 	add.w	r0, r7, #28
 80044f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80044fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d122      	bne.n	8004546 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004504:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004514:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004528:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800452a:	2b01      	cmp	r3, #1
 800452c:	d105      	bne.n	800453a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f001 fac6 	bl	8005acc <USB_CoreReset>
 8004540:	4603      	mov	r3, r0
 8004542:	73fb      	strb	r3, [r7, #15]
 8004544:	e01a      	b.n	800457c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f001 faba 	bl	8005acc <USB_CoreReset>
 8004558:	4603      	mov	r3, r0
 800455a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800455c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800455e:	2b00      	cmp	r3, #0
 8004560:	d106      	bne.n	8004570 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004566:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	639a      	str	r2, [r3, #56]	; 0x38
 800456e:	e005      	b.n	800457c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004574:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800457c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800457e:	2b01      	cmp	r3, #1
 8004580:	d10b      	bne.n	800459a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f043 0206 	orr.w	r2, r3, #6
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	f043 0220 	orr.w	r2, r3, #32
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800459a:	7bfb      	ldrb	r3, [r7, #15]
}
 800459c:	4618      	mov	r0, r3
 800459e:	3710      	adds	r7, #16
 80045a0:	46bd      	mov	sp, r7
 80045a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80045a6:	b004      	add	sp, #16
 80045a8:	4770      	bx	lr
	...

080045ac <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b087      	sub	sp, #28
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	4613      	mov	r3, r2
 80045b8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80045ba:	79fb      	ldrb	r3, [r7, #7]
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d165      	bne.n	800468c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	4a41      	ldr	r2, [pc, #260]	; (80046c8 <USB_SetTurnaroundTime+0x11c>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d906      	bls.n	80045d6 <USB_SetTurnaroundTime+0x2a>
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	4a40      	ldr	r2, [pc, #256]	; (80046cc <USB_SetTurnaroundTime+0x120>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d802      	bhi.n	80045d6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80045d0:	230f      	movs	r3, #15
 80045d2:	617b      	str	r3, [r7, #20]
 80045d4:	e062      	b.n	800469c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	4a3c      	ldr	r2, [pc, #240]	; (80046cc <USB_SetTurnaroundTime+0x120>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d906      	bls.n	80045ec <USB_SetTurnaroundTime+0x40>
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	4a3b      	ldr	r2, [pc, #236]	; (80046d0 <USB_SetTurnaroundTime+0x124>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d802      	bhi.n	80045ec <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80045e6:	230e      	movs	r3, #14
 80045e8:	617b      	str	r3, [r7, #20]
 80045ea:	e057      	b.n	800469c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	4a38      	ldr	r2, [pc, #224]	; (80046d0 <USB_SetTurnaroundTime+0x124>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d906      	bls.n	8004602 <USB_SetTurnaroundTime+0x56>
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	4a37      	ldr	r2, [pc, #220]	; (80046d4 <USB_SetTurnaroundTime+0x128>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d802      	bhi.n	8004602 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80045fc:	230d      	movs	r3, #13
 80045fe:	617b      	str	r3, [r7, #20]
 8004600:	e04c      	b.n	800469c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	4a33      	ldr	r2, [pc, #204]	; (80046d4 <USB_SetTurnaroundTime+0x128>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d906      	bls.n	8004618 <USB_SetTurnaroundTime+0x6c>
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	4a32      	ldr	r2, [pc, #200]	; (80046d8 <USB_SetTurnaroundTime+0x12c>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d802      	bhi.n	8004618 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004612:	230c      	movs	r3, #12
 8004614:	617b      	str	r3, [r7, #20]
 8004616:	e041      	b.n	800469c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	4a2f      	ldr	r2, [pc, #188]	; (80046d8 <USB_SetTurnaroundTime+0x12c>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d906      	bls.n	800462e <USB_SetTurnaroundTime+0x82>
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	4a2e      	ldr	r2, [pc, #184]	; (80046dc <USB_SetTurnaroundTime+0x130>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d802      	bhi.n	800462e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004628:	230b      	movs	r3, #11
 800462a:	617b      	str	r3, [r7, #20]
 800462c:	e036      	b.n	800469c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	4a2a      	ldr	r2, [pc, #168]	; (80046dc <USB_SetTurnaroundTime+0x130>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d906      	bls.n	8004644 <USB_SetTurnaroundTime+0x98>
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	4a29      	ldr	r2, [pc, #164]	; (80046e0 <USB_SetTurnaroundTime+0x134>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d802      	bhi.n	8004644 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800463e:	230a      	movs	r3, #10
 8004640:	617b      	str	r3, [r7, #20]
 8004642:	e02b      	b.n	800469c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	4a26      	ldr	r2, [pc, #152]	; (80046e0 <USB_SetTurnaroundTime+0x134>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d906      	bls.n	800465a <USB_SetTurnaroundTime+0xae>
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	4a25      	ldr	r2, [pc, #148]	; (80046e4 <USB_SetTurnaroundTime+0x138>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d802      	bhi.n	800465a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004654:	2309      	movs	r3, #9
 8004656:	617b      	str	r3, [r7, #20]
 8004658:	e020      	b.n	800469c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	4a21      	ldr	r2, [pc, #132]	; (80046e4 <USB_SetTurnaroundTime+0x138>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d906      	bls.n	8004670 <USB_SetTurnaroundTime+0xc4>
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	4a20      	ldr	r2, [pc, #128]	; (80046e8 <USB_SetTurnaroundTime+0x13c>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d802      	bhi.n	8004670 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800466a:	2308      	movs	r3, #8
 800466c:	617b      	str	r3, [r7, #20]
 800466e:	e015      	b.n	800469c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	4a1d      	ldr	r2, [pc, #116]	; (80046e8 <USB_SetTurnaroundTime+0x13c>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d906      	bls.n	8004686 <USB_SetTurnaroundTime+0xda>
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	4a1c      	ldr	r2, [pc, #112]	; (80046ec <USB_SetTurnaroundTime+0x140>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d802      	bhi.n	8004686 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004680:	2307      	movs	r3, #7
 8004682:	617b      	str	r3, [r7, #20]
 8004684:	e00a      	b.n	800469c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004686:	2306      	movs	r3, #6
 8004688:	617b      	str	r3, [r7, #20]
 800468a:	e007      	b.n	800469c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800468c:	79fb      	ldrb	r3, [r7, #7]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d102      	bne.n	8004698 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004692:	2309      	movs	r3, #9
 8004694:	617b      	str	r3, [r7, #20]
 8004696:	e001      	b.n	800469c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004698:	2309      	movs	r3, #9
 800469a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	68da      	ldr	r2, [r3, #12]
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	029b      	lsls	r3, r3, #10
 80046b0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80046b4:	431a      	orrs	r2, r3
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80046ba:	2300      	movs	r3, #0
}
 80046bc:	4618      	mov	r0, r3
 80046be:	371c      	adds	r7, #28
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr
 80046c8:	00d8acbf 	.word	0x00d8acbf
 80046cc:	00e4e1bf 	.word	0x00e4e1bf
 80046d0:	00f423ff 	.word	0x00f423ff
 80046d4:	0106737f 	.word	0x0106737f
 80046d8:	011a499f 	.word	0x011a499f
 80046dc:	01312cff 	.word	0x01312cff
 80046e0:	014ca43f 	.word	0x014ca43f
 80046e4:	016e35ff 	.word	0x016e35ff
 80046e8:	01a6ab1f 	.word	0x01a6ab1f
 80046ec:	01e847ff 	.word	0x01e847ff

080046f0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	f043 0201 	orr.w	r2, r3, #1
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	370c      	adds	r7, #12
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr

08004712 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004712:	b480      	push	{r7}
 8004714:	b083      	sub	sp, #12
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	f023 0201 	bic.w	r2, r3, #1
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004726:	2300      	movs	r3, #0
}
 8004728:	4618      	mov	r0, r3
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b082      	sub	sp, #8
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	460b      	mov	r3, r1
 800473e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800474c:	78fb      	ldrb	r3, [r7, #3]
 800474e:	2b01      	cmp	r3, #1
 8004750:	d106      	bne.n	8004760 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	60da      	str	r2, [r3, #12]
 800475e:	e00b      	b.n	8004778 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004760:	78fb      	ldrb	r3, [r7, #3]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d106      	bne.n	8004774 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	60da      	str	r2, [r3, #12]
 8004772:	e001      	b.n	8004778 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e003      	b.n	8004780 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004778:	2032      	movs	r0, #50	; 0x32
 800477a:	f7fc fa87 	bl	8000c8c <HAL_Delay>

  return HAL_OK;
 800477e:	2300      	movs	r3, #0
}
 8004780:	4618      	mov	r0, r3
 8004782:	3708      	adds	r7, #8
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}

08004788 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004788:	b084      	sub	sp, #16
 800478a:	b580      	push	{r7, lr}
 800478c:	b086      	sub	sp, #24
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]
 8004792:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004796:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800479a:	2300      	movs	r3, #0
 800479c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80047a2:	2300      	movs	r3, #0
 80047a4:	613b      	str	r3, [r7, #16]
 80047a6:	e009      	b.n	80047bc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	3340      	adds	r3, #64	; 0x40
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	4413      	add	r3, r2
 80047b2:	2200      	movs	r2, #0
 80047b4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	3301      	adds	r3, #1
 80047ba:	613b      	str	r3, [r7, #16]
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	2b0e      	cmp	r3, #14
 80047c0:	d9f2      	bls.n	80047a8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80047c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d11c      	bne.n	8004802 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	68fa      	ldr	r2, [r7, #12]
 80047d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047d6:	f043 0302 	orr.w	r3, r3, #2
 80047da:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ec:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	639a      	str	r2, [r3, #56]	; 0x38
 8004800:	e00b      	b.n	800481a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004806:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004812:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004820:	461a      	mov	r2, r3
 8004822:	2300      	movs	r3, #0
 8004824:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800482c:	4619      	mov	r1, r3
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004834:	461a      	mov	r2, r3
 8004836:	680b      	ldr	r3, [r1, #0]
 8004838:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800483a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800483c:	2b01      	cmp	r3, #1
 800483e:	d10c      	bne.n	800485a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004842:	2b00      	cmp	r3, #0
 8004844:	d104      	bne.n	8004850 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004846:	2100      	movs	r1, #0
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f000 f949 	bl	8004ae0 <USB_SetDevSpeed>
 800484e:	e008      	b.n	8004862 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004850:	2101      	movs	r1, #1
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 f944 	bl	8004ae0 <USB_SetDevSpeed>
 8004858:	e003      	b.n	8004862 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800485a:	2103      	movs	r1, #3
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f000 f93f 	bl	8004ae0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004862:	2110      	movs	r1, #16
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f000 f8f3 	bl	8004a50 <USB_FlushTxFifo>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d001      	beq.n	8004874 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f000 f911 	bl	8004a9c <USB_FlushRxFifo>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d001      	beq.n	8004884 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800488a:	461a      	mov	r2, r3
 800488c:	2300      	movs	r3, #0
 800488e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004896:	461a      	mov	r2, r3
 8004898:	2300      	movs	r3, #0
 800489a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048a2:	461a      	mov	r2, r3
 80048a4:	2300      	movs	r3, #0
 80048a6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048a8:	2300      	movs	r3, #0
 80048aa:	613b      	str	r3, [r7, #16]
 80048ac:	e043      	b.n	8004936 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	015a      	lsls	r2, r3, #5
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	4413      	add	r3, r2
 80048b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048c4:	d118      	bne.n	80048f8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d10a      	bne.n	80048e2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	015a      	lsls	r2, r3, #5
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	4413      	add	r3, r2
 80048d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048d8:	461a      	mov	r2, r3
 80048da:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80048de:	6013      	str	r3, [r2, #0]
 80048e0:	e013      	b.n	800490a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	015a      	lsls	r2, r3, #5
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	4413      	add	r3, r2
 80048ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ee:	461a      	mov	r2, r3
 80048f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80048f4:	6013      	str	r3, [r2, #0]
 80048f6:	e008      	b.n	800490a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	015a      	lsls	r2, r3, #5
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	4413      	add	r3, r2
 8004900:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004904:	461a      	mov	r2, r3
 8004906:	2300      	movs	r3, #0
 8004908:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	015a      	lsls	r2, r3, #5
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	4413      	add	r3, r2
 8004912:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004916:	461a      	mov	r2, r3
 8004918:	2300      	movs	r3, #0
 800491a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	015a      	lsls	r2, r3, #5
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	4413      	add	r3, r2
 8004924:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004928:	461a      	mov	r2, r3
 800492a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800492e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	3301      	adds	r3, #1
 8004934:	613b      	str	r3, [r7, #16]
 8004936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004938:	693a      	ldr	r2, [r7, #16]
 800493a:	429a      	cmp	r2, r3
 800493c:	d3b7      	bcc.n	80048ae <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800493e:	2300      	movs	r3, #0
 8004940:	613b      	str	r3, [r7, #16]
 8004942:	e043      	b.n	80049cc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	015a      	lsls	r2, r3, #5
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	4413      	add	r3, r2
 800494c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004956:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800495a:	d118      	bne.n	800498e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d10a      	bne.n	8004978 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	015a      	lsls	r2, r3, #5
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	4413      	add	r3, r2
 800496a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800496e:	461a      	mov	r2, r3
 8004970:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004974:	6013      	str	r3, [r2, #0]
 8004976:	e013      	b.n	80049a0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	015a      	lsls	r2, r3, #5
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	4413      	add	r3, r2
 8004980:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004984:	461a      	mov	r2, r3
 8004986:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800498a:	6013      	str	r3, [r2, #0]
 800498c:	e008      	b.n	80049a0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	015a      	lsls	r2, r3, #5
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	4413      	add	r3, r2
 8004996:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800499a:	461a      	mov	r2, r3
 800499c:	2300      	movs	r3, #0
 800499e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	015a      	lsls	r2, r3, #5
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	4413      	add	r3, r2
 80049a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ac:	461a      	mov	r2, r3
 80049ae:	2300      	movs	r3, #0
 80049b0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	015a      	lsls	r2, r3, #5
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	4413      	add	r3, r2
 80049ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049be:	461a      	mov	r2, r3
 80049c0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80049c4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	3301      	adds	r3, #1
 80049ca:	613b      	str	r3, [r7, #16]
 80049cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ce:	693a      	ldr	r2, [r7, #16]
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d3b7      	bcc.n	8004944 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049da:	691b      	ldr	r3, [r3, #16]
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049e6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80049f4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80049f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d105      	bne.n	8004a08 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	699b      	ldr	r3, [r3, #24]
 8004a00:	f043 0210 	orr.w	r2, r3, #16
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	699a      	ldr	r2, [r3, #24]
 8004a0c:	4b0f      	ldr	r3, [pc, #60]	; (8004a4c <USB_DevInit+0x2c4>)
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004a14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d005      	beq.n	8004a26 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	699b      	ldr	r3, [r3, #24]
 8004a1e:	f043 0208 	orr.w	r2, r3, #8
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004a26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d107      	bne.n	8004a3c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	699b      	ldr	r3, [r3, #24]
 8004a30:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a34:	f043 0304 	orr.w	r3, r3, #4
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004a3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3718      	adds	r7, #24
 8004a42:	46bd      	mov	sp, r7
 8004a44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a48:	b004      	add	sp, #16
 8004a4a:	4770      	bx	lr
 8004a4c:	803c3800 	.word	0x803c3800

08004a50 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b085      	sub	sp, #20
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	019b      	lsls	r3, r3, #6
 8004a62:	f043 0220 	orr.w	r2, r3, #32
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	3301      	adds	r3, #1
 8004a6e:	60fb      	str	r3, [r7, #12]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	4a09      	ldr	r2, [pc, #36]	; (8004a98 <USB_FlushTxFifo+0x48>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d901      	bls.n	8004a7c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	e006      	b.n	8004a8a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	691b      	ldr	r3, [r3, #16]
 8004a80:	f003 0320 	and.w	r3, r3, #32
 8004a84:	2b20      	cmp	r3, #32
 8004a86:	d0f0      	beq.n	8004a6a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004a88:	2300      	movs	r3, #0
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3714      	adds	r7, #20
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr
 8004a96:	bf00      	nop
 8004a98:	00030d40 	.word	0x00030d40

08004a9c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b085      	sub	sp, #20
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2210      	movs	r2, #16
 8004aac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	3301      	adds	r3, #1
 8004ab2:	60fb      	str	r3, [r7, #12]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	4a09      	ldr	r2, [pc, #36]	; (8004adc <USB_FlushRxFifo+0x40>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d901      	bls.n	8004ac0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004abc:	2303      	movs	r3, #3
 8004abe:	e006      	b.n	8004ace <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	691b      	ldr	r3, [r3, #16]
 8004ac4:	f003 0310 	and.w	r3, r3, #16
 8004ac8:	2b10      	cmp	r3, #16
 8004aca:	d0f0      	beq.n	8004aae <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3714      	adds	r7, #20
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop
 8004adc:	00030d40 	.word	0x00030d40

08004ae0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b085      	sub	sp, #20
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	460b      	mov	r3, r1
 8004aea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	78fb      	ldrb	r3, [r7, #3]
 8004afa:	68f9      	ldr	r1, [r7, #12]
 8004afc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b00:	4313      	orrs	r3, r2
 8004b02:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3714      	adds	r7, #20
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr

08004b12 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004b12:	b480      	push	{r7}
 8004b14:	b087      	sub	sp, #28
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	f003 0306 	and.w	r3, r3, #6
 8004b2a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d102      	bne.n	8004b38 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004b32:	2300      	movs	r3, #0
 8004b34:	75fb      	strb	r3, [r7, #23]
 8004b36:	e00a      	b.n	8004b4e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2b02      	cmp	r3, #2
 8004b3c:	d002      	beq.n	8004b44 <USB_GetDevSpeed+0x32>
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2b06      	cmp	r3, #6
 8004b42:	d102      	bne.n	8004b4a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004b44:	2302      	movs	r3, #2
 8004b46:	75fb      	strb	r3, [r7, #23]
 8004b48:	e001      	b.n	8004b4e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004b4a:	230f      	movs	r3, #15
 8004b4c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004b4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	371c      	adds	r7, #28
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b085      	sub	sp, #20
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	781b      	ldrb	r3, [r3, #0]
 8004b6e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	785b      	ldrb	r3, [r3, #1]
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d13a      	bne.n	8004bee <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b7e:	69da      	ldr	r2, [r3, #28]
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	f003 030f 	and.w	r3, r3, #15
 8004b88:	2101      	movs	r1, #1
 8004b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	68f9      	ldr	r1, [r7, #12]
 8004b92:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b96:	4313      	orrs	r3, r2
 8004b98:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	015a      	lsls	r2, r3, #5
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	4413      	add	r3, r2
 8004ba2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d155      	bne.n	8004c5c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	015a      	lsls	r2, r3, #5
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	4413      	add	r3, r2
 8004bb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	78db      	ldrb	r3, [r3, #3]
 8004bca:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004bcc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	059b      	lsls	r3, r3, #22
 8004bd2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	68ba      	ldr	r2, [r7, #8]
 8004bd8:	0151      	lsls	r1, r2, #5
 8004bda:	68fa      	ldr	r2, [r7, #12]
 8004bdc:	440a      	add	r2, r1
 8004bde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004be2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004be6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bea:	6013      	str	r3, [r2, #0]
 8004bec:	e036      	b.n	8004c5c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bf4:	69da      	ldr	r2, [r3, #28]
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	f003 030f 	and.w	r3, r3, #15
 8004bfe:	2101      	movs	r1, #1
 8004c00:	fa01 f303 	lsl.w	r3, r1, r3
 8004c04:	041b      	lsls	r3, r3, #16
 8004c06:	68f9      	ldr	r1, [r7, #12]
 8004c08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	015a      	lsls	r2, r3, #5
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	4413      	add	r3, r2
 8004c18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d11a      	bne.n	8004c5c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	015a      	lsls	r2, r3, #5
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	4413      	add	r3, r2
 8004c2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	78db      	ldrb	r3, [r3, #3]
 8004c40:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004c42:	430b      	orrs	r3, r1
 8004c44:	4313      	orrs	r3, r2
 8004c46:	68ba      	ldr	r2, [r7, #8]
 8004c48:	0151      	lsls	r1, r2, #5
 8004c4a:	68fa      	ldr	r2, [r7, #12]
 8004c4c:	440a      	add	r2, r1
 8004c4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c5a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3714      	adds	r7, #20
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr
	...

08004c6c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b085      	sub	sp, #20
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	785b      	ldrb	r3, [r3, #1]
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d161      	bne.n	8004d4c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	015a      	lsls	r2, r3, #5
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	4413      	add	r3, r2
 8004c90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c9e:	d11f      	bne.n	8004ce0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	015a      	lsls	r2, r3, #5
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	4413      	add	r3, r2
 8004ca8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	68ba      	ldr	r2, [r7, #8]
 8004cb0:	0151      	lsls	r1, r2, #5
 8004cb2:	68fa      	ldr	r2, [r7, #12]
 8004cb4:	440a      	add	r2, r1
 8004cb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004cbe:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	015a      	lsls	r2, r3, #5
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	4413      	add	r3, r2
 8004cc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	68ba      	ldr	r2, [r7, #8]
 8004cd0:	0151      	lsls	r1, r2, #5
 8004cd2:	68fa      	ldr	r2, [r7, #12]
 8004cd4:	440a      	add	r2, r1
 8004cd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cda:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004cde:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ce6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	f003 030f 	and.w	r3, r3, #15
 8004cf0:	2101      	movs	r1, #1
 8004cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	43db      	mvns	r3, r3
 8004cfa:	68f9      	ldr	r1, [r7, #12]
 8004cfc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d00:	4013      	ands	r3, r2
 8004d02:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d0a:	69da      	ldr	r2, [r3, #28]
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	f003 030f 	and.w	r3, r3, #15
 8004d14:	2101      	movs	r1, #1
 8004d16:	fa01 f303 	lsl.w	r3, r1, r3
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	43db      	mvns	r3, r3
 8004d1e:	68f9      	ldr	r1, [r7, #12]
 8004d20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d24:	4013      	ands	r3, r2
 8004d26:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	015a      	lsls	r2, r3, #5
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	4413      	add	r3, r2
 8004d30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	0159      	lsls	r1, r3, #5
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	440b      	add	r3, r1
 8004d3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d42:	4619      	mov	r1, r3
 8004d44:	4b35      	ldr	r3, [pc, #212]	; (8004e1c <USB_DeactivateEndpoint+0x1b0>)
 8004d46:	4013      	ands	r3, r2
 8004d48:	600b      	str	r3, [r1, #0]
 8004d4a:	e060      	b.n	8004e0e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	015a      	lsls	r2, r3, #5
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	4413      	add	r3, r2
 8004d54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d62:	d11f      	bne.n	8004da4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	015a      	lsls	r2, r3, #5
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	4413      	add	r3, r2
 8004d6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	68ba      	ldr	r2, [r7, #8]
 8004d74:	0151      	lsls	r1, r2, #5
 8004d76:	68fa      	ldr	r2, [r7, #12]
 8004d78:	440a      	add	r2, r1
 8004d7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d7e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004d82:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	015a      	lsls	r2, r3, #5
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	4413      	add	r3, r2
 8004d8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68ba      	ldr	r2, [r7, #8]
 8004d94:	0151      	lsls	r1, r2, #5
 8004d96:	68fa      	ldr	r2, [r7, #12]
 8004d98:	440a      	add	r2, r1
 8004d9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d9e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004da2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004daa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	f003 030f 	and.w	r3, r3, #15
 8004db4:	2101      	movs	r1, #1
 8004db6:	fa01 f303 	lsl.w	r3, r1, r3
 8004dba:	041b      	lsls	r3, r3, #16
 8004dbc:	43db      	mvns	r3, r3
 8004dbe:	68f9      	ldr	r1, [r7, #12]
 8004dc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dce:	69da      	ldr	r2, [r3, #28]
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	f003 030f 	and.w	r3, r3, #15
 8004dd8:	2101      	movs	r1, #1
 8004dda:	fa01 f303 	lsl.w	r3, r1, r3
 8004dde:	041b      	lsls	r3, r3, #16
 8004de0:	43db      	mvns	r3, r3
 8004de2:	68f9      	ldr	r1, [r7, #12]
 8004de4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004de8:	4013      	ands	r3, r2
 8004dea:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	015a      	lsls	r2, r3, #5
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	4413      	add	r3, r2
 8004df4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	0159      	lsls	r1, r3, #5
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	440b      	add	r3, r1
 8004e02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e06:	4619      	mov	r1, r3
 8004e08:	4b05      	ldr	r3, [pc, #20]	; (8004e20 <USB_DeactivateEndpoint+0x1b4>)
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004e0e:	2300      	movs	r3, #0
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3714      	adds	r7, #20
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr
 8004e1c:	ec337800 	.word	0xec337800
 8004e20:	eff37800 	.word	0xeff37800

08004e24 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b08a      	sub	sp, #40	; 0x28
 8004e28:	af02      	add	r7, sp, #8
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	60b9      	str	r1, [r7, #8]
 8004e2e:	4613      	mov	r3, r2
 8004e30:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	785b      	ldrb	r3, [r3, #1]
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	f040 815c 	bne.w	80050fe <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	695b      	ldr	r3, [r3, #20]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d132      	bne.n	8004eb4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004e4e:	69bb      	ldr	r3, [r7, #24]
 8004e50:	015a      	lsls	r2, r3, #5
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	4413      	add	r3, r2
 8004e56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e5a:	691b      	ldr	r3, [r3, #16]
 8004e5c:	69ba      	ldr	r2, [r7, #24]
 8004e5e:	0151      	lsls	r1, r2, #5
 8004e60:	69fa      	ldr	r2, [r7, #28]
 8004e62:	440a      	add	r2, r1
 8004e64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e68:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e6c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e70:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	015a      	lsls	r2, r3, #5
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	4413      	add	r3, r2
 8004e7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	69ba      	ldr	r2, [r7, #24]
 8004e82:	0151      	lsls	r1, r2, #5
 8004e84:	69fa      	ldr	r2, [r7, #28]
 8004e86:	440a      	add	r2, r1
 8004e88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e8c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e90:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004e92:	69bb      	ldr	r3, [r7, #24]
 8004e94:	015a      	lsls	r2, r3, #5
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	4413      	add	r3, r2
 8004e9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e9e:	691b      	ldr	r3, [r3, #16]
 8004ea0:	69ba      	ldr	r2, [r7, #24]
 8004ea2:	0151      	lsls	r1, r2, #5
 8004ea4:	69fa      	ldr	r2, [r7, #28]
 8004ea6:	440a      	add	r2, r1
 8004ea8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eac:	0cdb      	lsrs	r3, r3, #19
 8004eae:	04db      	lsls	r3, r3, #19
 8004eb0:	6113      	str	r3, [r2, #16]
 8004eb2:	e074      	b.n	8004f9e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	015a      	lsls	r2, r3, #5
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	4413      	add	r3, r2
 8004ebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	69ba      	ldr	r2, [r7, #24]
 8004ec4:	0151      	lsls	r1, r2, #5
 8004ec6:	69fa      	ldr	r2, [r7, #28]
 8004ec8:	440a      	add	r2, r1
 8004eca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ece:	0cdb      	lsrs	r3, r3, #19
 8004ed0:	04db      	lsls	r3, r3, #19
 8004ed2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004ed4:	69bb      	ldr	r3, [r7, #24]
 8004ed6:	015a      	lsls	r2, r3, #5
 8004ed8:	69fb      	ldr	r3, [r7, #28]
 8004eda:	4413      	add	r3, r2
 8004edc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	69ba      	ldr	r2, [r7, #24]
 8004ee4:	0151      	lsls	r1, r2, #5
 8004ee6:	69fa      	ldr	r2, [r7, #28]
 8004ee8:	440a      	add	r2, r1
 8004eea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004ef2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004ef6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004ef8:	69bb      	ldr	r3, [r7, #24]
 8004efa:	015a      	lsls	r2, r3, #5
 8004efc:	69fb      	ldr	r3, [r7, #28]
 8004efe:	4413      	add	r3, r2
 8004f00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f04:	691a      	ldr	r2, [r3, #16]
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	6959      	ldr	r1, [r3, #20]
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	440b      	add	r3, r1
 8004f10:	1e59      	subs	r1, r3, #1
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f1a:	04d9      	lsls	r1, r3, #19
 8004f1c:	4b9d      	ldr	r3, [pc, #628]	; (8005194 <USB_EPStartXfer+0x370>)
 8004f1e:	400b      	ands	r3, r1
 8004f20:	69b9      	ldr	r1, [r7, #24]
 8004f22:	0148      	lsls	r0, r1, #5
 8004f24:	69f9      	ldr	r1, [r7, #28]
 8004f26:	4401      	add	r1, r0
 8004f28:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	015a      	lsls	r2, r3, #5
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	4413      	add	r3, r2
 8004f38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f3c:	691a      	ldr	r2, [r3, #16]
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	695b      	ldr	r3, [r3, #20]
 8004f42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f46:	69b9      	ldr	r1, [r7, #24]
 8004f48:	0148      	lsls	r0, r1, #5
 8004f4a:	69f9      	ldr	r1, [r7, #28]
 8004f4c:	4401      	add	r1, r0
 8004f4e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004f52:	4313      	orrs	r3, r2
 8004f54:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	78db      	ldrb	r3, [r3, #3]
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d11f      	bne.n	8004f9e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004f5e:	69bb      	ldr	r3, [r7, #24]
 8004f60:	015a      	lsls	r2, r3, #5
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	4413      	add	r3, r2
 8004f66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f6a:	691b      	ldr	r3, [r3, #16]
 8004f6c:	69ba      	ldr	r2, [r7, #24]
 8004f6e:	0151      	lsls	r1, r2, #5
 8004f70:	69fa      	ldr	r2, [r7, #28]
 8004f72:	440a      	add	r2, r1
 8004f74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f78:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004f7c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004f7e:	69bb      	ldr	r3, [r7, #24]
 8004f80:	015a      	lsls	r2, r3, #5
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	4413      	add	r3, r2
 8004f86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f8a:	691b      	ldr	r3, [r3, #16]
 8004f8c:	69ba      	ldr	r2, [r7, #24]
 8004f8e:	0151      	lsls	r1, r2, #5
 8004f90:	69fa      	ldr	r2, [r7, #28]
 8004f92:	440a      	add	r2, r1
 8004f94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f98:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f9c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004f9e:	79fb      	ldrb	r3, [r7, #7]
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d14b      	bne.n	800503c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	691b      	ldr	r3, [r3, #16]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d009      	beq.n	8004fc0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	015a      	lsls	r2, r3, #5
 8004fb0:	69fb      	ldr	r3, [r7, #28]
 8004fb2:	4413      	add	r3, r2
 8004fb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fb8:	461a      	mov	r2, r3
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	691b      	ldr	r3, [r3, #16]
 8004fbe:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	78db      	ldrb	r3, [r3, #3]
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d128      	bne.n	800501a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d110      	bne.n	8004ffa <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004fd8:	69bb      	ldr	r3, [r7, #24]
 8004fda:	015a      	lsls	r2, r3, #5
 8004fdc:	69fb      	ldr	r3, [r7, #28]
 8004fde:	4413      	add	r3, r2
 8004fe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	69ba      	ldr	r2, [r7, #24]
 8004fe8:	0151      	lsls	r1, r2, #5
 8004fea:	69fa      	ldr	r2, [r7, #28]
 8004fec:	440a      	add	r2, r1
 8004fee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ff2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ff6:	6013      	str	r3, [r2, #0]
 8004ff8:	e00f      	b.n	800501a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	015a      	lsls	r2, r3, #5
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	4413      	add	r3, r2
 8005002:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	69ba      	ldr	r2, [r7, #24]
 800500a:	0151      	lsls	r1, r2, #5
 800500c:	69fa      	ldr	r2, [r7, #28]
 800500e:	440a      	add	r2, r1
 8005010:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005014:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005018:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	015a      	lsls	r2, r3, #5
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	4413      	add	r3, r2
 8005022:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	69ba      	ldr	r2, [r7, #24]
 800502a:	0151      	lsls	r1, r2, #5
 800502c:	69fa      	ldr	r2, [r7, #28]
 800502e:	440a      	add	r2, r1
 8005030:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005034:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005038:	6013      	str	r3, [r2, #0]
 800503a:	e12f      	b.n	800529c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800503c:	69bb      	ldr	r3, [r7, #24]
 800503e:	015a      	lsls	r2, r3, #5
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	4413      	add	r3, r2
 8005044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	69ba      	ldr	r2, [r7, #24]
 800504c:	0151      	lsls	r1, r2, #5
 800504e:	69fa      	ldr	r2, [r7, #28]
 8005050:	440a      	add	r2, r1
 8005052:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005056:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800505a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	78db      	ldrb	r3, [r3, #3]
 8005060:	2b01      	cmp	r3, #1
 8005062:	d015      	beq.n	8005090 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	695b      	ldr	r3, [r3, #20]
 8005068:	2b00      	cmp	r3, #0
 800506a:	f000 8117 	beq.w	800529c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005074:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	f003 030f 	and.w	r3, r3, #15
 800507e:	2101      	movs	r1, #1
 8005080:	fa01 f303 	lsl.w	r3, r1, r3
 8005084:	69f9      	ldr	r1, [r7, #28]
 8005086:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800508a:	4313      	orrs	r3, r2
 800508c:	634b      	str	r3, [r1, #52]	; 0x34
 800508e:	e105      	b.n	800529c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800509c:	2b00      	cmp	r3, #0
 800509e:	d110      	bne.n	80050c2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80050a0:	69bb      	ldr	r3, [r7, #24]
 80050a2:	015a      	lsls	r2, r3, #5
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	4413      	add	r3, r2
 80050a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	69ba      	ldr	r2, [r7, #24]
 80050b0:	0151      	lsls	r1, r2, #5
 80050b2:	69fa      	ldr	r2, [r7, #28]
 80050b4:	440a      	add	r2, r1
 80050b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80050be:	6013      	str	r3, [r2, #0]
 80050c0:	e00f      	b.n	80050e2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	015a      	lsls	r2, r3, #5
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	4413      	add	r3, r2
 80050ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	69ba      	ldr	r2, [r7, #24]
 80050d2:	0151      	lsls	r1, r2, #5
 80050d4:	69fa      	ldr	r2, [r7, #28]
 80050d6:	440a      	add	r2, r1
 80050d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050e0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	68d9      	ldr	r1, [r3, #12]
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	781a      	ldrb	r2, [r3, #0]
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	695b      	ldr	r3, [r3, #20]
 80050ee:	b298      	uxth	r0, r3
 80050f0:	79fb      	ldrb	r3, [r7, #7]
 80050f2:	9300      	str	r3, [sp, #0]
 80050f4:	4603      	mov	r3, r0
 80050f6:	68f8      	ldr	r0, [r7, #12]
 80050f8:	f000 fa2b 	bl	8005552 <USB_WritePacket>
 80050fc:	e0ce      	b.n	800529c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80050fe:	69bb      	ldr	r3, [r7, #24]
 8005100:	015a      	lsls	r2, r3, #5
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	4413      	add	r3, r2
 8005106:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800510a:	691b      	ldr	r3, [r3, #16]
 800510c:	69ba      	ldr	r2, [r7, #24]
 800510e:	0151      	lsls	r1, r2, #5
 8005110:	69fa      	ldr	r2, [r7, #28]
 8005112:	440a      	add	r2, r1
 8005114:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005118:	0cdb      	lsrs	r3, r3, #19
 800511a:	04db      	lsls	r3, r3, #19
 800511c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800511e:	69bb      	ldr	r3, [r7, #24]
 8005120:	015a      	lsls	r2, r3, #5
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	4413      	add	r3, r2
 8005126:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800512a:	691b      	ldr	r3, [r3, #16]
 800512c:	69ba      	ldr	r2, [r7, #24]
 800512e:	0151      	lsls	r1, r2, #5
 8005130:	69fa      	ldr	r2, [r7, #28]
 8005132:	440a      	add	r2, r1
 8005134:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005138:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800513c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005140:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	695b      	ldr	r3, [r3, #20]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d126      	bne.n	8005198 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	015a      	lsls	r2, r3, #5
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	4413      	add	r3, r2
 8005152:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005156:	691a      	ldr	r2, [r3, #16]
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005160:	69b9      	ldr	r1, [r7, #24]
 8005162:	0148      	lsls	r0, r1, #5
 8005164:	69f9      	ldr	r1, [r7, #28]
 8005166:	4401      	add	r1, r0
 8005168:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800516c:	4313      	orrs	r3, r2
 800516e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	015a      	lsls	r2, r3, #5
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	4413      	add	r3, r2
 8005178:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	69ba      	ldr	r2, [r7, #24]
 8005180:	0151      	lsls	r1, r2, #5
 8005182:	69fa      	ldr	r2, [r7, #28]
 8005184:	440a      	add	r2, r1
 8005186:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800518a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800518e:	6113      	str	r3, [r2, #16]
 8005190:	e036      	b.n	8005200 <USB_EPStartXfer+0x3dc>
 8005192:	bf00      	nop
 8005194:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	695a      	ldr	r2, [r3, #20]
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	4413      	add	r3, r2
 80051a2:	1e5a      	subs	r2, r3, #1
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ac:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80051ae:	69bb      	ldr	r3, [r7, #24]
 80051b0:	015a      	lsls	r2, r3, #5
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	4413      	add	r3, r2
 80051b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ba:	691a      	ldr	r2, [r3, #16]
 80051bc:	8afb      	ldrh	r3, [r7, #22]
 80051be:	04d9      	lsls	r1, r3, #19
 80051c0:	4b39      	ldr	r3, [pc, #228]	; (80052a8 <USB_EPStartXfer+0x484>)
 80051c2:	400b      	ands	r3, r1
 80051c4:	69b9      	ldr	r1, [r7, #24]
 80051c6:	0148      	lsls	r0, r1, #5
 80051c8:	69f9      	ldr	r1, [r7, #28]
 80051ca:	4401      	add	r1, r0
 80051cc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80051d0:	4313      	orrs	r3, r2
 80051d2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80051d4:	69bb      	ldr	r3, [r7, #24]
 80051d6:	015a      	lsls	r2, r3, #5
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	4413      	add	r3, r2
 80051dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051e0:	691a      	ldr	r2, [r3, #16]
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	8af9      	ldrh	r1, [r7, #22]
 80051e8:	fb01 f303 	mul.w	r3, r1, r3
 80051ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051f0:	69b9      	ldr	r1, [r7, #24]
 80051f2:	0148      	lsls	r0, r1, #5
 80051f4:	69f9      	ldr	r1, [r7, #28]
 80051f6:	4401      	add	r1, r0
 80051f8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80051fc:	4313      	orrs	r3, r2
 80051fe:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005200:	79fb      	ldrb	r3, [r7, #7]
 8005202:	2b01      	cmp	r3, #1
 8005204:	d10d      	bne.n	8005222 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d009      	beq.n	8005222 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	68d9      	ldr	r1, [r3, #12]
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	015a      	lsls	r2, r3, #5
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	4413      	add	r3, r2
 800521a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800521e:	460a      	mov	r2, r1
 8005220:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	78db      	ldrb	r3, [r3, #3]
 8005226:	2b01      	cmp	r3, #1
 8005228:	d128      	bne.n	800527c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005236:	2b00      	cmp	r3, #0
 8005238:	d110      	bne.n	800525c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800523a:	69bb      	ldr	r3, [r7, #24]
 800523c:	015a      	lsls	r2, r3, #5
 800523e:	69fb      	ldr	r3, [r7, #28]
 8005240:	4413      	add	r3, r2
 8005242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	69ba      	ldr	r2, [r7, #24]
 800524a:	0151      	lsls	r1, r2, #5
 800524c:	69fa      	ldr	r2, [r7, #28]
 800524e:	440a      	add	r2, r1
 8005250:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005254:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005258:	6013      	str	r3, [r2, #0]
 800525a:	e00f      	b.n	800527c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	015a      	lsls	r2, r3, #5
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	4413      	add	r3, r2
 8005264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	69ba      	ldr	r2, [r7, #24]
 800526c:	0151      	lsls	r1, r2, #5
 800526e:	69fa      	ldr	r2, [r7, #28]
 8005270:	440a      	add	r2, r1
 8005272:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005276:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800527a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800527c:	69bb      	ldr	r3, [r7, #24]
 800527e:	015a      	lsls	r2, r3, #5
 8005280:	69fb      	ldr	r3, [r7, #28]
 8005282:	4413      	add	r3, r2
 8005284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	69ba      	ldr	r2, [r7, #24]
 800528c:	0151      	lsls	r1, r2, #5
 800528e:	69fa      	ldr	r2, [r7, #28]
 8005290:	440a      	add	r2, r1
 8005292:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005296:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800529a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800529c:	2300      	movs	r3, #0
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3720      	adds	r7, #32
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	bf00      	nop
 80052a8:	1ff80000 	.word	0x1ff80000

080052ac <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b087      	sub	sp, #28
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	60f8      	str	r0, [r7, #12]
 80052b4:	60b9      	str	r1, [r7, #8]
 80052b6:	4613      	mov	r3, r2
 80052b8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	781b      	ldrb	r3, [r3, #0]
 80052c2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	785b      	ldrb	r3, [r3, #1]
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	f040 80cd 	bne.w	8005468 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	695b      	ldr	r3, [r3, #20]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d132      	bne.n	800533c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	015a      	lsls	r2, r3, #5
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	4413      	add	r3, r2
 80052de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052e2:	691b      	ldr	r3, [r3, #16]
 80052e4:	693a      	ldr	r2, [r7, #16]
 80052e6:	0151      	lsls	r1, r2, #5
 80052e8:	697a      	ldr	r2, [r7, #20]
 80052ea:	440a      	add	r2, r1
 80052ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052f0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80052f4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80052f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	015a      	lsls	r2, r3, #5
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	4413      	add	r3, r2
 8005302:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005306:	691b      	ldr	r3, [r3, #16]
 8005308:	693a      	ldr	r2, [r7, #16]
 800530a:	0151      	lsls	r1, r2, #5
 800530c:	697a      	ldr	r2, [r7, #20]
 800530e:	440a      	add	r2, r1
 8005310:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005314:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005318:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	015a      	lsls	r2, r3, #5
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	4413      	add	r3, r2
 8005322:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005326:	691b      	ldr	r3, [r3, #16]
 8005328:	693a      	ldr	r2, [r7, #16]
 800532a:	0151      	lsls	r1, r2, #5
 800532c:	697a      	ldr	r2, [r7, #20]
 800532e:	440a      	add	r2, r1
 8005330:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005334:	0cdb      	lsrs	r3, r3, #19
 8005336:	04db      	lsls	r3, r3, #19
 8005338:	6113      	str	r3, [r2, #16]
 800533a:	e04e      	b.n	80053da <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	015a      	lsls	r2, r3, #5
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	4413      	add	r3, r2
 8005344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	693a      	ldr	r2, [r7, #16]
 800534c:	0151      	lsls	r1, r2, #5
 800534e:	697a      	ldr	r2, [r7, #20]
 8005350:	440a      	add	r2, r1
 8005352:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005356:	0cdb      	lsrs	r3, r3, #19
 8005358:	04db      	lsls	r3, r3, #19
 800535a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	015a      	lsls	r2, r3, #5
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	4413      	add	r3, r2
 8005364:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	693a      	ldr	r2, [r7, #16]
 800536c:	0151      	lsls	r1, r2, #5
 800536e:	697a      	ldr	r2, [r7, #20]
 8005370:	440a      	add	r2, r1
 8005372:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005376:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800537a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800537e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	695a      	ldr	r2, [r3, #20]
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	429a      	cmp	r2, r3
 800538a:	d903      	bls.n	8005394 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	689a      	ldr	r2, [r3, #8]
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	015a      	lsls	r2, r3, #5
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	4413      	add	r3, r2
 800539c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	693a      	ldr	r2, [r7, #16]
 80053a4:	0151      	lsls	r1, r2, #5
 80053a6:	697a      	ldr	r2, [r7, #20]
 80053a8:	440a      	add	r2, r1
 80053aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80053b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	015a      	lsls	r2, r3, #5
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	4413      	add	r3, r2
 80053bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053c0:	691a      	ldr	r2, [r3, #16]
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	695b      	ldr	r3, [r3, #20]
 80053c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053ca:	6939      	ldr	r1, [r7, #16]
 80053cc:	0148      	lsls	r0, r1, #5
 80053ce:	6979      	ldr	r1, [r7, #20]
 80053d0:	4401      	add	r1, r0
 80053d2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80053d6:	4313      	orrs	r3, r2
 80053d8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80053da:	79fb      	ldrb	r3, [r7, #7]
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d11e      	bne.n	800541e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	691b      	ldr	r3, [r3, #16]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d009      	beq.n	80053fc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	015a      	lsls	r2, r3, #5
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	4413      	add	r3, r2
 80053f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053f4:	461a      	mov	r2, r3
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	015a      	lsls	r2, r3, #5
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	4413      	add	r3, r2
 8005404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	693a      	ldr	r2, [r7, #16]
 800540c:	0151      	lsls	r1, r2, #5
 800540e:	697a      	ldr	r2, [r7, #20]
 8005410:	440a      	add	r2, r1
 8005412:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005416:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800541a:	6013      	str	r3, [r2, #0]
 800541c:	e092      	b.n	8005544 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	015a      	lsls	r2, r3, #5
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	4413      	add	r3, r2
 8005426:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	693a      	ldr	r2, [r7, #16]
 800542e:	0151      	lsls	r1, r2, #5
 8005430:	697a      	ldr	r2, [r7, #20]
 8005432:	440a      	add	r2, r1
 8005434:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005438:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800543c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	695b      	ldr	r3, [r3, #20]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d07e      	beq.n	8005544 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800544c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	f003 030f 	and.w	r3, r3, #15
 8005456:	2101      	movs	r1, #1
 8005458:	fa01 f303 	lsl.w	r3, r1, r3
 800545c:	6979      	ldr	r1, [r7, #20]
 800545e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005462:	4313      	orrs	r3, r2
 8005464:	634b      	str	r3, [r1, #52]	; 0x34
 8005466:	e06d      	b.n	8005544 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	015a      	lsls	r2, r3, #5
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	4413      	add	r3, r2
 8005470:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	693a      	ldr	r2, [r7, #16]
 8005478:	0151      	lsls	r1, r2, #5
 800547a:	697a      	ldr	r2, [r7, #20]
 800547c:	440a      	add	r2, r1
 800547e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005482:	0cdb      	lsrs	r3, r3, #19
 8005484:	04db      	lsls	r3, r3, #19
 8005486:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	015a      	lsls	r2, r3, #5
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	4413      	add	r3, r2
 8005490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	693a      	ldr	r2, [r7, #16]
 8005498:	0151      	lsls	r1, r2, #5
 800549a:	697a      	ldr	r2, [r7, #20]
 800549c:	440a      	add	r2, r1
 800549e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054a2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80054a6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80054aa:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	695b      	ldr	r3, [r3, #20]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d003      	beq.n	80054bc <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	689a      	ldr	r2, [r3, #8]
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	015a      	lsls	r2, r3, #5
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	4413      	add	r3, r2
 80054c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	693a      	ldr	r2, [r7, #16]
 80054cc:	0151      	lsls	r1, r2, #5
 80054ce:	697a      	ldr	r2, [r7, #20]
 80054d0:	440a      	add	r2, r1
 80054d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80054da:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	015a      	lsls	r2, r3, #5
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	4413      	add	r3, r2
 80054e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054e8:	691a      	ldr	r2, [r3, #16]
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054f2:	6939      	ldr	r1, [r7, #16]
 80054f4:	0148      	lsls	r0, r1, #5
 80054f6:	6979      	ldr	r1, [r7, #20]
 80054f8:	4401      	add	r1, r0
 80054fa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80054fe:	4313      	orrs	r3, r2
 8005500:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005502:	79fb      	ldrb	r3, [r7, #7]
 8005504:	2b01      	cmp	r3, #1
 8005506:	d10d      	bne.n	8005524 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d009      	beq.n	8005524 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	68d9      	ldr	r1, [r3, #12]
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	015a      	lsls	r2, r3, #5
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	4413      	add	r3, r2
 800551c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005520:	460a      	mov	r2, r1
 8005522:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	015a      	lsls	r2, r3, #5
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	4413      	add	r3, r2
 800552c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	693a      	ldr	r2, [r7, #16]
 8005534:	0151      	lsls	r1, r2, #5
 8005536:	697a      	ldr	r2, [r7, #20]
 8005538:	440a      	add	r2, r1
 800553a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800553e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005542:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005544:	2300      	movs	r3, #0
}
 8005546:	4618      	mov	r0, r3
 8005548:	371c      	adds	r7, #28
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr

08005552 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005552:	b480      	push	{r7}
 8005554:	b089      	sub	sp, #36	; 0x24
 8005556:	af00      	add	r7, sp, #0
 8005558:	60f8      	str	r0, [r7, #12]
 800555a:	60b9      	str	r1, [r7, #8]
 800555c:	4611      	mov	r1, r2
 800555e:	461a      	mov	r2, r3
 8005560:	460b      	mov	r3, r1
 8005562:	71fb      	strb	r3, [r7, #7]
 8005564:	4613      	mov	r3, r2
 8005566:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005570:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005574:	2b00      	cmp	r3, #0
 8005576:	d11a      	bne.n	80055ae <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005578:	88bb      	ldrh	r3, [r7, #4]
 800557a:	3303      	adds	r3, #3
 800557c:	089b      	lsrs	r3, r3, #2
 800557e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005580:	2300      	movs	r3, #0
 8005582:	61bb      	str	r3, [r7, #24]
 8005584:	e00f      	b.n	80055a6 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005586:	79fb      	ldrb	r3, [r7, #7]
 8005588:	031a      	lsls	r2, r3, #12
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	4413      	add	r3, r2
 800558e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005592:	461a      	mov	r2, r3
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	6013      	str	r3, [r2, #0]
      pSrc++;
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	3304      	adds	r3, #4
 800559e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80055a0:	69bb      	ldr	r3, [r7, #24]
 80055a2:	3301      	adds	r3, #1
 80055a4:	61bb      	str	r3, [r7, #24]
 80055a6:	69ba      	ldr	r2, [r7, #24]
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d3eb      	bcc.n	8005586 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80055ae:	2300      	movs	r3, #0
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3724      	adds	r7, #36	; 0x24
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr

080055bc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80055bc:	b480      	push	{r7}
 80055be:	b089      	sub	sp, #36	; 0x24
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	60f8      	str	r0, [r7, #12]
 80055c4:	60b9      	str	r1, [r7, #8]
 80055c6:	4613      	mov	r3, r2
 80055c8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80055d2:	88fb      	ldrh	r3, [r7, #6]
 80055d4:	3303      	adds	r3, #3
 80055d6:	089b      	lsrs	r3, r3, #2
 80055d8:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80055da:	2300      	movs	r3, #0
 80055dc:	61bb      	str	r3, [r7, #24]
 80055de:	e00b      	b.n	80055f8 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	601a      	str	r2, [r3, #0]
    pDest++;
 80055ec:	69fb      	ldr	r3, [r7, #28]
 80055ee:	3304      	adds	r3, #4
 80055f0:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	3301      	adds	r3, #1
 80055f6:	61bb      	str	r3, [r7, #24]
 80055f8:	69ba      	ldr	r2, [r7, #24]
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d3ef      	bcc.n	80055e0 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005600:	69fb      	ldr	r3, [r7, #28]
}
 8005602:	4618      	mov	r0, r3
 8005604:	3724      	adds	r7, #36	; 0x24
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr

0800560e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800560e:	b480      	push	{r7}
 8005610:	b085      	sub	sp, #20
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
 8005616:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	785b      	ldrb	r3, [r3, #1]
 8005626:	2b01      	cmp	r3, #1
 8005628:	d12c      	bne.n	8005684 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	015a      	lsls	r2, r3, #5
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	4413      	add	r3, r2
 8005632:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2b00      	cmp	r3, #0
 800563a:	db12      	blt.n	8005662 <USB_EPSetStall+0x54>
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d00f      	beq.n	8005662 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	015a      	lsls	r2, r3, #5
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	4413      	add	r3, r2
 800564a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	68ba      	ldr	r2, [r7, #8]
 8005652:	0151      	lsls	r1, r2, #5
 8005654:	68fa      	ldr	r2, [r7, #12]
 8005656:	440a      	add	r2, r1
 8005658:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800565c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005660:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	015a      	lsls	r2, r3, #5
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	4413      	add	r3, r2
 800566a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	68ba      	ldr	r2, [r7, #8]
 8005672:	0151      	lsls	r1, r2, #5
 8005674:	68fa      	ldr	r2, [r7, #12]
 8005676:	440a      	add	r2, r1
 8005678:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800567c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005680:	6013      	str	r3, [r2, #0]
 8005682:	e02b      	b.n	80056dc <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	015a      	lsls	r2, r3, #5
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	4413      	add	r3, r2
 800568c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	2b00      	cmp	r3, #0
 8005694:	db12      	blt.n	80056bc <USB_EPSetStall+0xae>
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d00f      	beq.n	80056bc <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	015a      	lsls	r2, r3, #5
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	4413      	add	r3, r2
 80056a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	68ba      	ldr	r2, [r7, #8]
 80056ac:	0151      	lsls	r1, r2, #5
 80056ae:	68fa      	ldr	r2, [r7, #12]
 80056b0:	440a      	add	r2, r1
 80056b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80056ba:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	015a      	lsls	r2, r3, #5
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	4413      	add	r3, r2
 80056c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	68ba      	ldr	r2, [r7, #8]
 80056cc:	0151      	lsls	r1, r2, #5
 80056ce:	68fa      	ldr	r2, [r7, #12]
 80056d0:	440a      	add	r2, r1
 80056d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80056da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80056dc:	2300      	movs	r3, #0
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3714      	adds	r7, #20
 80056e2:	46bd      	mov	sp, r7
 80056e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e8:	4770      	bx	lr

080056ea <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80056ea:	b480      	push	{r7}
 80056ec:	b085      	sub	sp, #20
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	6078      	str	r0, [r7, #4]
 80056f2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	785b      	ldrb	r3, [r3, #1]
 8005702:	2b01      	cmp	r3, #1
 8005704:	d128      	bne.n	8005758 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	015a      	lsls	r2, r3, #5
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	4413      	add	r3, r2
 800570e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	68ba      	ldr	r2, [r7, #8]
 8005716:	0151      	lsls	r1, r2, #5
 8005718:	68fa      	ldr	r2, [r7, #12]
 800571a:	440a      	add	r2, r1
 800571c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005720:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005724:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	78db      	ldrb	r3, [r3, #3]
 800572a:	2b03      	cmp	r3, #3
 800572c:	d003      	beq.n	8005736 <USB_EPClearStall+0x4c>
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	78db      	ldrb	r3, [r3, #3]
 8005732:	2b02      	cmp	r3, #2
 8005734:	d138      	bne.n	80057a8 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	015a      	lsls	r2, r3, #5
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	4413      	add	r3, r2
 800573e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	68ba      	ldr	r2, [r7, #8]
 8005746:	0151      	lsls	r1, r2, #5
 8005748:	68fa      	ldr	r2, [r7, #12]
 800574a:	440a      	add	r2, r1
 800574c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005754:	6013      	str	r3, [r2, #0]
 8005756:	e027      	b.n	80057a8 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	015a      	lsls	r2, r3, #5
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	4413      	add	r3, r2
 8005760:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	68ba      	ldr	r2, [r7, #8]
 8005768:	0151      	lsls	r1, r2, #5
 800576a:	68fa      	ldr	r2, [r7, #12]
 800576c:	440a      	add	r2, r1
 800576e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005772:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005776:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	78db      	ldrb	r3, [r3, #3]
 800577c:	2b03      	cmp	r3, #3
 800577e:	d003      	beq.n	8005788 <USB_EPClearStall+0x9e>
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	78db      	ldrb	r3, [r3, #3]
 8005784:	2b02      	cmp	r3, #2
 8005786:	d10f      	bne.n	80057a8 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	015a      	lsls	r2, r3, #5
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	4413      	add	r3, r2
 8005790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	68ba      	ldr	r2, [r7, #8]
 8005798:	0151      	lsls	r1, r2, #5
 800579a:	68fa      	ldr	r2, [r7, #12]
 800579c:	440a      	add	r2, r1
 800579e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057a6:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80057a8:	2300      	movs	r3, #0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3714      	adds	r7, #20
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr

080057b6 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80057b6:	b480      	push	{r7}
 80057b8:	b085      	sub	sp, #20
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
 80057be:	460b      	mov	r3, r1
 80057c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	68fa      	ldr	r2, [r7, #12]
 80057d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057d4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80057d8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	78fb      	ldrb	r3, [r7, #3]
 80057e4:	011b      	lsls	r3, r3, #4
 80057e6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80057ea:	68f9      	ldr	r1, [r7, #12]
 80057ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057f0:	4313      	orrs	r3, r2
 80057f2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80057f4:	2300      	movs	r3, #0
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3714      	adds	r7, #20
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr

08005802 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005802:	b480      	push	{r7}
 8005804:	b085      	sub	sp, #20
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	68fa      	ldr	r2, [r7, #12]
 8005818:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800581c:	f023 0303 	bic.w	r3, r3, #3
 8005820:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	68fa      	ldr	r2, [r7, #12]
 800582c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005830:	f023 0302 	bic.w	r3, r3, #2
 8005834:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005836:	2300      	movs	r3, #0
}
 8005838:	4618      	mov	r0, r3
 800583a:	3714      	adds	r7, #20
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr

08005844 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005844:	b480      	push	{r7}
 8005846:	b085      	sub	sp, #20
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800585e:	f023 0303 	bic.w	r3, r3, #3
 8005862:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005872:	f043 0302 	orr.w	r3, r3, #2
 8005876:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005878:	2300      	movs	r3, #0
}
 800587a:	4618      	mov	r0, r3
 800587c:	3714      	adds	r7, #20
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr

08005886 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005886:	b480      	push	{r7}
 8005888:	b085      	sub	sp, #20
 800588a:	af00      	add	r7, sp, #0
 800588c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	695b      	ldr	r3, [r3, #20]
 8005892:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	699b      	ldr	r3, [r3, #24]
 8005898:	68fa      	ldr	r2, [r7, #12]
 800589a:	4013      	ands	r3, r2
 800589c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800589e:	68fb      	ldr	r3, [r7, #12]
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3714      	adds	r7, #20
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr

080058ac <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b085      	sub	sp, #20
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058be:	699b      	ldr	r3, [r3, #24]
 80058c0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058c8:	69db      	ldr	r3, [r3, #28]
 80058ca:	68ba      	ldr	r2, [r7, #8]
 80058cc:	4013      	ands	r3, r2
 80058ce:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	0c1b      	lsrs	r3, r3, #16
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3714      	adds	r7, #20
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr

080058e0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b085      	sub	sp, #20
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058f2:	699b      	ldr	r3, [r3, #24]
 80058f4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058fc:	69db      	ldr	r3, [r3, #28]
 80058fe:	68ba      	ldr	r2, [r7, #8]
 8005900:	4013      	ands	r3, r2
 8005902:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	b29b      	uxth	r3, r3
}
 8005908:	4618      	mov	r0, r3
 800590a:	3714      	adds	r7, #20
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005914:	b480      	push	{r7}
 8005916:	b085      	sub	sp, #20
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	460b      	mov	r3, r1
 800591e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005924:	78fb      	ldrb	r3, [r7, #3]
 8005926:	015a      	lsls	r2, r3, #5
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	4413      	add	r3, r2
 800592c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800593a:	695b      	ldr	r3, [r3, #20]
 800593c:	68ba      	ldr	r2, [r7, #8]
 800593e:	4013      	ands	r3, r2
 8005940:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005942:	68bb      	ldr	r3, [r7, #8]
}
 8005944:	4618      	mov	r0, r3
 8005946:	3714      	adds	r7, #20
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005950:	b480      	push	{r7}
 8005952:	b087      	sub	sp, #28
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	460b      	mov	r3, r1
 800595a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005966:	691b      	ldr	r3, [r3, #16]
 8005968:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005972:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005974:	78fb      	ldrb	r3, [r7, #3]
 8005976:	f003 030f 	and.w	r3, r3, #15
 800597a:	68fa      	ldr	r2, [r7, #12]
 800597c:	fa22 f303 	lsr.w	r3, r2, r3
 8005980:	01db      	lsls	r3, r3, #7
 8005982:	b2db      	uxtb	r3, r3
 8005984:	693a      	ldr	r2, [r7, #16]
 8005986:	4313      	orrs	r3, r2
 8005988:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800598a:	78fb      	ldrb	r3, [r7, #3]
 800598c:	015a      	lsls	r2, r3, #5
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	4413      	add	r3, r2
 8005992:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	693a      	ldr	r2, [r7, #16]
 800599a:	4013      	ands	r3, r2
 800599c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800599e:	68bb      	ldr	r3, [r7, #8]
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	371c      	adds	r7, #28
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr

080059ac <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b083      	sub	sp, #12
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	695b      	ldr	r3, [r3, #20]
 80059b8:	f003 0301 	and.w	r3, r3, #1
}
 80059bc:	4618      	mov	r0, r3
 80059be:	370c      	adds	r7, #12
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr

080059c8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b085      	sub	sp, #20
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	68fa      	ldr	r2, [r7, #12]
 80059de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059e2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80059e6:	f023 0307 	bic.w	r3, r3, #7
 80059ea:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	68fa      	ldr	r2, [r7, #12]
 80059f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059fe:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005a00:	2300      	movs	r3, #0
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3714      	adds	r7, #20
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr
	...

08005a10 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b087      	sub	sp, #28
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	60f8      	str	r0, [r7, #12]
 8005a18:	460b      	mov	r3, r1
 8005a1a:	607a      	str	r2, [r7, #4]
 8005a1c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	333c      	adds	r3, #60	; 0x3c
 8005a26:	3304      	adds	r3, #4
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	4a26      	ldr	r2, [pc, #152]	; (8005ac8 <USB_EP0_OutStart+0xb8>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d90a      	bls.n	8005a4a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a44:	d101      	bne.n	8005a4a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005a46:	2300      	movs	r3, #0
 8005a48:	e037      	b.n	8005aba <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a50:	461a      	mov	r2, r3
 8005a52:	2300      	movs	r3, #0
 8005a54:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a5c:	691b      	ldr	r3, [r3, #16]
 8005a5e:	697a      	ldr	r2, [r7, #20]
 8005a60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a64:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a68:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a70:	691b      	ldr	r3, [r3, #16]
 8005a72:	697a      	ldr	r2, [r7, #20]
 8005a74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a78:	f043 0318 	orr.w	r3, r3, #24
 8005a7c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a84:	691b      	ldr	r3, [r3, #16]
 8005a86:	697a      	ldr	r2, [r7, #20]
 8005a88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a8c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005a90:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005a92:	7afb      	ldrb	r3, [r7, #11]
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d10f      	bne.n	8005ab8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	697a      	ldr	r2, [r7, #20]
 8005aae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ab2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005ab6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005ab8:	2300      	movs	r3, #0
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	371c      	adds	r7, #28
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr
 8005ac6:	bf00      	nop
 8005ac8:	4f54300a 	.word	0x4f54300a

08005acc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b085      	sub	sp, #20
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	3301      	adds	r3, #1
 8005adc:	60fb      	str	r3, [r7, #12]
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	4a13      	ldr	r2, [pc, #76]	; (8005b30 <USB_CoreReset+0x64>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d901      	bls.n	8005aea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005ae6:	2303      	movs	r3, #3
 8005ae8:	e01b      	b.n	8005b22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	daf2      	bge.n	8005ad8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005af2:	2300      	movs	r3, #0
 8005af4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	691b      	ldr	r3, [r3, #16]
 8005afa:	f043 0201 	orr.w	r2, r3, #1
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	3301      	adds	r3, #1
 8005b06:	60fb      	str	r3, [r7, #12]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	4a09      	ldr	r2, [pc, #36]	; (8005b30 <USB_CoreReset+0x64>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d901      	bls.n	8005b14 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005b10:	2303      	movs	r3, #3
 8005b12:	e006      	b.n	8005b22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	691b      	ldr	r3, [r3, #16]
 8005b18:	f003 0301 	and.w	r3, r3, #1
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d0f0      	beq.n	8005b02 <USB_CoreReset+0x36>

  return HAL_OK;
 8005b20:	2300      	movs	r3, #0
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3714      	adds	r7, #20
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr
 8005b2e:	bf00      	nop
 8005b30:	00030d40 	.word	0x00030d40

08005b34 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b084      	sub	sp, #16
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	460b      	mov	r3, r1
 8005b3e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005b40:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005b44:	f002 f936 	bl	8007db4 <malloc>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d105      	bne.n	8005b5e <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005b5a:	2302      	movs	r3, #2
 8005b5c:	e066      	b.n	8005c2c <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	68fa      	ldr	r2, [r7, #12]
 8005b62:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	7c1b      	ldrb	r3, [r3, #16]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d119      	bne.n	8005ba2 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005b6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b72:	2202      	movs	r2, #2
 8005b74:	2181      	movs	r1, #129	; 0x81
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f001 ffa3 	bl	8007ac2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005b82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b86:	2202      	movs	r2, #2
 8005b88:	2101      	movs	r1, #1
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f001 ff99 	bl	8007ac2 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2210      	movs	r2, #16
 8005b9c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005ba0:	e016      	b.n	8005bd0 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005ba2:	2340      	movs	r3, #64	; 0x40
 8005ba4:	2202      	movs	r2, #2
 8005ba6:	2181      	movs	r1, #129	; 0x81
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f001 ff8a 	bl	8007ac2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005bb4:	2340      	movs	r3, #64	; 0x40
 8005bb6:	2202      	movs	r2, #2
 8005bb8:	2101      	movs	r1, #1
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f001 ff81 	bl	8007ac2 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2210      	movs	r2, #16
 8005bcc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005bd0:	2308      	movs	r3, #8
 8005bd2:	2203      	movs	r2, #3
 8005bd4:	2182      	movs	r1, #130	; 0x82
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f001 ff73 	bl	8007ac2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2201      	movs	r2, #1
 8005be0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	7c1b      	ldrb	r3, [r3, #16]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d109      	bne.n	8005c1a <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005c0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c10:	2101      	movs	r1, #1
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f002 f844 	bl	8007ca0 <USBD_LL_PrepareReceive>
 8005c18:	e007      	b.n	8005c2a <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005c20:	2340      	movs	r3, #64	; 0x40
 8005c22:	2101      	movs	r1, #1
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f002 f83b 	bl	8007ca0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005c2a:	2300      	movs	r3, #0
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3710      	adds	r7, #16
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}

08005c34 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b084      	sub	sp, #16
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	460b      	mov	r3, r1
 8005c3e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8005c40:	2300      	movs	r3, #0
 8005c42:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005c44:	2181      	movs	r1, #129	; 0x81
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f001 ff61 	bl	8007b0e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005c52:	2101      	movs	r1, #1
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f001 ff5a 	bl	8007b0e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005c62:	2182      	movs	r1, #130	; 0x82
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f001 ff52 	bl	8007b0e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d00e      	beq.n	8005ca2 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c94:	4618      	mov	r0, r3
 8005c96:	f002 f895 	bl	8007dc4 <free>
    pdev->pClassData = NULL;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8005ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3710      	adds	r7, #16
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}

08005cac <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b086      	sub	sp, #24
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005cbc:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	781b      	ldrb	r3, [r3, #0]
 8005cce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d03a      	beq.n	8005d4c <USBD_CDC_Setup+0xa0>
 8005cd6:	2b20      	cmp	r3, #32
 8005cd8:	f040 8097 	bne.w	8005e0a <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	88db      	ldrh	r3, [r3, #6]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d029      	beq.n	8005d38 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	781b      	ldrb	r3, [r3, #0]
 8005ce8:	b25b      	sxtb	r3, r3
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	da11      	bge.n	8005d12 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	683a      	ldr	r2, [r7, #0]
 8005cf8:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8005cfa:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005cfc:	683a      	ldr	r2, [r7, #0]
 8005cfe:	88d2      	ldrh	r2, [r2, #6]
 8005d00:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005d02:	6939      	ldr	r1, [r7, #16]
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	88db      	ldrh	r3, [r3, #6]
 8005d08:	461a      	mov	r2, r3
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f001 fa9d 	bl	800724a <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8005d10:	e082      	b.n	8005e18 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	785a      	ldrb	r2, [r3, #1]
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	88db      	ldrh	r3, [r3, #6]
 8005d20:	b2da      	uxtb	r2, r3
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005d28:	6939      	ldr	r1, [r7, #16]
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	88db      	ldrh	r3, [r3, #6]
 8005d2e:	461a      	mov	r2, r3
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f001 fab6 	bl	80072a2 <USBD_CtlPrepareRx>
    break;
 8005d36:	e06f      	b.n	8005e18 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	683a      	ldr	r2, [r7, #0]
 8005d42:	7850      	ldrb	r0, [r2, #1]
 8005d44:	2200      	movs	r2, #0
 8005d46:	6839      	ldr	r1, [r7, #0]
 8005d48:	4798      	blx	r3
    break;
 8005d4a:	e065      	b.n	8005e18 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	785b      	ldrb	r3, [r3, #1]
 8005d50:	2b0b      	cmp	r3, #11
 8005d52:	d84f      	bhi.n	8005df4 <USBD_CDC_Setup+0x148>
 8005d54:	a201      	add	r2, pc, #4	; (adr r2, 8005d5c <USBD_CDC_Setup+0xb0>)
 8005d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d5a:	bf00      	nop
 8005d5c:	08005d8d 	.word	0x08005d8d
 8005d60:	08005e03 	.word	0x08005e03
 8005d64:	08005df5 	.word	0x08005df5
 8005d68:	08005df5 	.word	0x08005df5
 8005d6c:	08005df5 	.word	0x08005df5
 8005d70:	08005df5 	.word	0x08005df5
 8005d74:	08005df5 	.word	0x08005df5
 8005d78:	08005df5 	.word	0x08005df5
 8005d7c:	08005df5 	.word	0x08005df5
 8005d80:	08005df5 	.word	0x08005df5
 8005d84:	08005db5 	.word	0x08005db5
 8005d88:	08005ddd 	.word	0x08005ddd
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d92:	2b03      	cmp	r3, #3
 8005d94:	d107      	bne.n	8005da6 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005d96:	f107 030c 	add.w	r3, r7, #12
 8005d9a:	2202      	movs	r2, #2
 8005d9c:	4619      	mov	r1, r3
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f001 fa53 	bl	800724a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005da4:	e030      	b.n	8005e08 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8005da6:	6839      	ldr	r1, [r7, #0]
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f001 f9dd 	bl	8007168 <USBD_CtlError>
        ret = USBD_FAIL;
 8005dae:	2303      	movs	r3, #3
 8005db0:	75fb      	strb	r3, [r7, #23]
      break;
 8005db2:	e029      	b.n	8005e08 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005dba:	2b03      	cmp	r3, #3
 8005dbc:	d107      	bne.n	8005dce <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005dbe:	f107 030f 	add.w	r3, r7, #15
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	4619      	mov	r1, r3
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f001 fa3f 	bl	800724a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005dcc:	e01c      	b.n	8005e08 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8005dce:	6839      	ldr	r1, [r7, #0]
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f001 f9c9 	bl	8007168 <USBD_CtlError>
        ret = USBD_FAIL;
 8005dd6:	2303      	movs	r3, #3
 8005dd8:	75fb      	strb	r3, [r7, #23]
      break;
 8005dda:	e015      	b.n	8005e08 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005de2:	2b03      	cmp	r3, #3
 8005de4:	d00f      	beq.n	8005e06 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8005de6:	6839      	ldr	r1, [r7, #0]
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f001 f9bd 	bl	8007168 <USBD_CtlError>
        ret = USBD_FAIL;
 8005dee:	2303      	movs	r3, #3
 8005df0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005df2:	e008      	b.n	8005e06 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8005df4:	6839      	ldr	r1, [r7, #0]
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f001 f9b6 	bl	8007168 <USBD_CtlError>
      ret = USBD_FAIL;
 8005dfc:	2303      	movs	r3, #3
 8005dfe:	75fb      	strb	r3, [r7, #23]
      break;
 8005e00:	e002      	b.n	8005e08 <USBD_CDC_Setup+0x15c>
      break;
 8005e02:	bf00      	nop
 8005e04:	e008      	b.n	8005e18 <USBD_CDC_Setup+0x16c>
      break;
 8005e06:	bf00      	nop
    }
    break;
 8005e08:	e006      	b.n	8005e18 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8005e0a:	6839      	ldr	r1, [r7, #0]
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f001 f9ab 	bl	8007168 <USBD_CtlError>
    ret = USBD_FAIL;
 8005e12:	2303      	movs	r3, #3
 8005e14:	75fb      	strb	r3, [r7, #23]
    break;
 8005e16:	bf00      	nop
  }

  return (uint8_t)ret;
 8005e18:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3718      	adds	r7, #24
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop

08005e24 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b084      	sub	sp, #16
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	460b      	mov	r3, r1
 8005e2e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005e36:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d101      	bne.n	8005e46 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005e42:	2303      	movs	r3, #3
 8005e44:	e049      	b.n	8005eda <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e4c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005e4e:	78fa      	ldrb	r2, [r7, #3]
 8005e50:	6879      	ldr	r1, [r7, #4]
 8005e52:	4613      	mov	r3, r2
 8005e54:	009b      	lsls	r3, r3, #2
 8005e56:	4413      	add	r3, r2
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	440b      	add	r3, r1
 8005e5c:	3318      	adds	r3, #24
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d029      	beq.n	8005eb8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005e64:	78fa      	ldrb	r2, [r7, #3]
 8005e66:	6879      	ldr	r1, [r7, #4]
 8005e68:	4613      	mov	r3, r2
 8005e6a:	009b      	lsls	r3, r3, #2
 8005e6c:	4413      	add	r3, r2
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	440b      	add	r3, r1
 8005e72:	3318      	adds	r3, #24
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	78f9      	ldrb	r1, [r7, #3]
 8005e78:	68f8      	ldr	r0, [r7, #12]
 8005e7a:	460b      	mov	r3, r1
 8005e7c:	00db      	lsls	r3, r3, #3
 8005e7e:	1a5b      	subs	r3, r3, r1
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	4403      	add	r3, r0
 8005e84:	3344      	adds	r3, #68	; 0x44
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	fbb2 f1f3 	udiv	r1, r2, r3
 8005e8c:	fb03 f301 	mul.w	r3, r3, r1
 8005e90:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d110      	bne.n	8005eb8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005e96:	78fa      	ldrb	r2, [r7, #3]
 8005e98:	6879      	ldr	r1, [r7, #4]
 8005e9a:	4613      	mov	r3, r2
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	4413      	add	r3, r2
 8005ea0:	009b      	lsls	r3, r3, #2
 8005ea2:	440b      	add	r3, r1
 8005ea4:	3318      	adds	r3, #24
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005eaa:	78f9      	ldrb	r1, [r7, #3]
 8005eac:	2300      	movs	r3, #0
 8005eae:	2200      	movs	r2, #0
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f001 fed4 	bl	8007c5e <USBD_LL_Transmit>
 8005eb6:	e00f      	b.n	8005ed8 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005ec6:	691b      	ldr	r3, [r3, #16]
 8005ec8:	68ba      	ldr	r2, [r7, #8]
 8005eca:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005ece:	68ba      	ldr	r2, [r7, #8]
 8005ed0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005ed4:	78fa      	ldrb	r2, [r7, #3]
 8005ed6:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8005ed8:	2300      	movs	r3, #0
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3710      	adds	r7, #16
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}

08005ee2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005ee2:	b580      	push	{r7, lr}
 8005ee4:	b084      	sub	sp, #16
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	6078      	str	r0, [r7, #4]
 8005eea:	460b      	mov	r3, r1
 8005eec:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ef4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d101      	bne.n	8005f04 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005f00:	2303      	movs	r3, #3
 8005f02:	e015      	b.n	8005f30 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005f04:	78fb      	ldrb	r3, [r7, #3]
 8005f06:	4619      	mov	r1, r3
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f001 feea 	bl	8007ce2 <USBD_LL_GetRxDataSize>
 8005f0e:	4602      	mov	r2, r0
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	68fa      	ldr	r2, [r7, #12]
 8005f20:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005f24:	68fa      	ldr	r2, [r7, #12]
 8005f26:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005f2a:	4611      	mov	r1, r2
 8005f2c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005f2e:	2300      	movs	r3, #0
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3710      	adds	r7, #16
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}

08005f38 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f46:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d015      	beq.n	8005f7e <USBD_CDC_EP0_RxReady+0x46>
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005f58:	2bff      	cmp	r3, #255	; 0xff
 8005f5a:	d010      	beq.n	8005f7e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	68fa      	ldr	r2, [r7, #12]
 8005f66:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005f6a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005f72:	b292      	uxth	r2, r2
 8005f74:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	22ff      	movs	r2, #255	; 0xff
 8005f7a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8005f7e:	2300      	movs	r3, #0
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3710      	adds	r7, #16
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}

08005f88 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b083      	sub	sp, #12
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2243      	movs	r2, #67	; 0x43
 8005f94:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8005f96:	4b03      	ldr	r3, [pc, #12]	; (8005fa4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	370c      	adds	r7, #12
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr
 8005fa4:	20000094 	.word	0x20000094

08005fa8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b083      	sub	sp, #12
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2243      	movs	r2, #67	; 0x43
 8005fb4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8005fb6:	4b03      	ldr	r3, [pc, #12]	; (8005fc4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	370c      	adds	r7, #12
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr
 8005fc4:	20000050 	.word	0x20000050

08005fc8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b083      	sub	sp, #12
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2243      	movs	r2, #67	; 0x43
 8005fd4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8005fd6:	4b03      	ldr	r3, [pc, #12]	; (8005fe4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	370c      	adds	r7, #12
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr
 8005fe4:	200000d8 	.word	0x200000d8

08005fe8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b083      	sub	sp, #12
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	220a      	movs	r2, #10
 8005ff4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005ff6:	4b03      	ldr	r3, [pc, #12]	; (8006004 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	370c      	adds	r7, #12
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr
 8006004:	2000000c 	.word	0x2000000c

08006008 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006008:	b480      	push	{r7}
 800600a:	b083      	sub	sp, #12
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d101      	bne.n	800601c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006018:	2303      	movs	r3, #3
 800601a:	e004      	b.n	8006026 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	683a      	ldr	r2, [r7, #0]
 8006020:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006024:	2300      	movs	r3, #0
}
 8006026:	4618      	mov	r0, r3
 8006028:	370c      	adds	r7, #12
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr

08006032 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006032:	b480      	push	{r7}
 8006034:	b087      	sub	sp, #28
 8006036:	af00      	add	r7, sp, #0
 8006038:	60f8      	str	r0, [r7, #12]
 800603a:	60b9      	str	r1, [r7, #8]
 800603c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006044:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	68ba      	ldr	r2, [r7, #8]
 800604a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006056:	2300      	movs	r3, #0
}
 8006058:	4618      	mov	r0, r3
 800605a:	371c      	adds	r7, #28
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr

08006064 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006064:	b480      	push	{r7}
 8006066:	b085      	sub	sp, #20
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006074:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	683a      	ldr	r2, [r7, #0]
 800607a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800607e:	2300      	movs	r3, #0
}
 8006080:	4618      	mov	r0, r3
 8006082:	3714      	adds	r7, #20
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr

0800608c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b084      	sub	sp, #16
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800609a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800609c:	2301      	movs	r3, #1
 800609e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d101      	bne.n	80060ae <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80060aa:	2303      	movs	r3, #3
 80060ac:	e01a      	b.n	80060e4 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d114      	bne.n	80060e2 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	2201      	movs	r2, #1
 80060bc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80060d6:	2181      	movs	r1, #129	; 0x81
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f001 fdc0 	bl	8007c5e <USBD_LL_Transmit>

    ret = USBD_OK;
 80060de:	2300      	movs	r3, #0
 80060e0:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80060e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	3710      	adds	r7, #16
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}

080060ec <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80060fa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006102:	2b00      	cmp	r3, #0
 8006104:	d101      	bne.n	800610a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006106:	2303      	movs	r3, #3
 8006108:	e016      	b.n	8006138 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	7c1b      	ldrb	r3, [r3, #16]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d109      	bne.n	8006126 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006118:	f44f 7300 	mov.w	r3, #512	; 0x200
 800611c:	2101      	movs	r1, #1
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f001 fdbe 	bl	8007ca0 <USBD_LL_PrepareReceive>
 8006124:	e007      	b.n	8006136 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800612c:	2340      	movs	r3, #64	; 0x40
 800612e:	2101      	movs	r1, #1
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f001 fdb5 	bl	8007ca0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006136:	2300      	movs	r3, #0
}
 8006138:	4618      	mov	r0, r3
 800613a:	3710      	adds	r7, #16
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}

08006140 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b086      	sub	sp, #24
 8006144:	af00      	add	r7, sp, #0
 8006146:	60f8      	str	r0, [r7, #12]
 8006148:	60b9      	str	r1, [r7, #8]
 800614a:	4613      	mov	r3, r2
 800614c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d101      	bne.n	8006158 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006154:	2303      	movs	r3, #3
 8006156:	e025      	b.n	80061a4 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800615e:	2b00      	cmp	r3, #0
 8006160:	d003      	beq.n	800616a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2200      	movs	r2, #0
 8006166:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8006170:	2b00      	cmp	r3, #0
 8006172:	d003      	beq.n	800617c <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2200      	movs	r2, #0
 8006178:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d003      	beq.n	800618a <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	68ba      	ldr	r2, [r7, #8]
 8006186:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2201      	movs	r2, #1
 800618e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	79fa      	ldrb	r2, [r7, #7]
 8006196:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006198:	68f8      	ldr	r0, [r7, #12]
 800619a:	f001 fc2b 	bl	80079f4 <USBD_LL_Init>
 800619e:	4603      	mov	r3, r0
 80061a0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80061a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3718      	adds	r7, #24
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}

080061ac <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b084      	sub	sp, #16
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80061b6:	2300      	movs	r3, #0
 80061b8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d101      	bne.n	80061c4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80061c0:	2303      	movs	r3, #3
 80061c2:	e010      	b.n	80061e6 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	683a      	ldr	r2, [r7, #0]
 80061c8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061d4:	f107 020e 	add.w	r2, r7, #14
 80061d8:	4610      	mov	r0, r2
 80061da:	4798      	blx	r3
 80061dc:	4602      	mov	r2, r0
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 80061e4:	2300      	movs	r3, #0
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3710      	adds	r7, #16
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}

080061ee <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80061ee:	b580      	push	{r7, lr}
 80061f0:	b082      	sub	sp, #8
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f001 fc48 	bl	8007a8c <USBD_LL_Start>
 80061fc:	4603      	mov	r3, r0
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3708      	adds	r7, #8
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}

08006206 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006206:	b480      	push	{r7}
 8006208:	b083      	sub	sp, #12
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800620e:	2300      	movs	r3, #0
}
 8006210:	4618      	mov	r0, r3
 8006212:	370c      	adds	r7, #12
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr

0800621c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b084      	sub	sp, #16
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	460b      	mov	r3, r1
 8006226:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006228:	2303      	movs	r3, #3
 800622a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006232:	2b00      	cmp	r3, #0
 8006234:	d009      	beq.n	800624a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	78fa      	ldrb	r2, [r7, #3]
 8006240:	4611      	mov	r1, r2
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	4798      	blx	r3
 8006246:	4603      	mov	r3, r0
 8006248:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800624a:	7bfb      	ldrb	r3, [r7, #15]
}
 800624c:	4618      	mov	r0, r3
 800624e:	3710      	adds	r7, #16
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b082      	sub	sp, #8
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	460b      	mov	r3, r1
 800625e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006266:	2b00      	cmp	r3, #0
 8006268:	d007      	beq.n	800627a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	78fa      	ldrb	r2, [r7, #3]
 8006274:	4611      	mov	r1, r2
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	4798      	blx	r3
  }

  return USBD_OK;
 800627a:	2300      	movs	r3, #0
}
 800627c:	4618      	mov	r0, r3
 800627e:	3708      	adds	r7, #8
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}

08006284 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b084      	sub	sp, #16
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006294:	6839      	ldr	r1, [r7, #0]
 8006296:	4618      	mov	r0, r3
 8006298:	f000 ff2c 	bl	80070f4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2201      	movs	r2, #1
 80062a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80062aa:	461a      	mov	r2, r3
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80062b8:	f003 031f 	and.w	r3, r3, #31
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d00e      	beq.n	80062de <USBD_LL_SetupStage+0x5a>
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d302      	bcc.n	80062ca <USBD_LL_SetupStage+0x46>
 80062c4:	2b02      	cmp	r3, #2
 80062c6:	d014      	beq.n	80062f2 <USBD_LL_SetupStage+0x6e>
 80062c8:	e01d      	b.n	8006306 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80062d0:	4619      	mov	r1, r3
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 fa18 	bl	8006708 <USBD_StdDevReq>
 80062d8:	4603      	mov	r3, r0
 80062da:	73fb      	strb	r3, [r7, #15]
      break;
 80062dc:	e020      	b.n	8006320 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80062e4:	4619      	mov	r1, r3
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f000 fa7c 	bl	80067e4 <USBD_StdItfReq>
 80062ec:	4603      	mov	r3, r0
 80062ee:	73fb      	strb	r3, [r7, #15]
      break;
 80062f0:	e016      	b.n	8006320 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80062f8:	4619      	mov	r1, r3
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 fab8 	bl	8006870 <USBD_StdEPReq>
 8006300:	4603      	mov	r3, r0
 8006302:	73fb      	strb	r3, [r7, #15]
      break;
 8006304:	e00c      	b.n	8006320 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800630c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006310:	b2db      	uxtb	r3, r3
 8006312:	4619      	mov	r1, r3
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f001 fc19 	bl	8007b4c <USBD_LL_StallEP>
 800631a:	4603      	mov	r3, r0
 800631c:	73fb      	strb	r3, [r7, #15]
      break;
 800631e:	bf00      	nop
  }

  return ret;
 8006320:	7bfb      	ldrb	r3, [r7, #15]
}
 8006322:	4618      	mov	r0, r3
 8006324:	3710      	adds	r7, #16
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}

0800632a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800632a:	b580      	push	{r7, lr}
 800632c:	b086      	sub	sp, #24
 800632e:	af00      	add	r7, sp, #0
 8006330:	60f8      	str	r0, [r7, #12]
 8006332:	460b      	mov	r3, r1
 8006334:	607a      	str	r2, [r7, #4]
 8006336:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006338:	7afb      	ldrb	r3, [r7, #11]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d137      	bne.n	80063ae <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006344:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800634c:	2b03      	cmp	r3, #3
 800634e:	d14a      	bne.n	80063e6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	689a      	ldr	r2, [r3, #8]
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	429a      	cmp	r2, r3
 800635a:	d913      	bls.n	8006384 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	689a      	ldr	r2, [r3, #8]
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	68db      	ldr	r3, [r3, #12]
 8006364:	1ad2      	subs	r2, r2, r3
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	68da      	ldr	r2, [r3, #12]
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	4293      	cmp	r3, r2
 8006374:	bf28      	it	cs
 8006376:	4613      	movcs	r3, r2
 8006378:	461a      	mov	r2, r3
 800637a:	6879      	ldr	r1, [r7, #4]
 800637c:	68f8      	ldr	r0, [r7, #12]
 800637e:	f000 ffad 	bl	80072dc <USBD_CtlContinueRx>
 8006382:	e030      	b.n	80063e6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800638a:	691b      	ldr	r3, [r3, #16]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d00a      	beq.n	80063a6 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006396:	2b03      	cmp	r3, #3
 8006398:	d105      	bne.n	80063a6 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063a0:	691b      	ldr	r3, [r3, #16]
 80063a2:	68f8      	ldr	r0, [r7, #12]
 80063a4:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80063a6:	68f8      	ldr	r0, [r7, #12]
 80063a8:	f000 ffa9 	bl	80072fe <USBD_CtlSendStatus>
 80063ac:	e01b      	b.n	80063e6 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063b4:	699b      	ldr	r3, [r3, #24]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d013      	beq.n	80063e2 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80063c0:	2b03      	cmp	r3, #3
 80063c2:	d10e      	bne.n	80063e2 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063ca:	699b      	ldr	r3, [r3, #24]
 80063cc:	7afa      	ldrb	r2, [r7, #11]
 80063ce:	4611      	mov	r1, r2
 80063d0:	68f8      	ldr	r0, [r7, #12]
 80063d2:	4798      	blx	r3
 80063d4:	4603      	mov	r3, r0
 80063d6:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80063d8:	7dfb      	ldrb	r3, [r7, #23]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d003      	beq.n	80063e6 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80063de:	7dfb      	ldrb	r3, [r7, #23]
 80063e0:	e002      	b.n	80063e8 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80063e2:	2303      	movs	r3, #3
 80063e4:	e000      	b.n	80063e8 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80063e6:	2300      	movs	r3, #0
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	3718      	adds	r7, #24
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}

080063f0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b086      	sub	sp, #24
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	60f8      	str	r0, [r7, #12]
 80063f8:	460b      	mov	r3, r1
 80063fa:	607a      	str	r2, [r7, #4]
 80063fc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80063fe:	7afb      	ldrb	r3, [r7, #11]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d16a      	bne.n	80064da <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	3314      	adds	r3, #20
 8006408:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006410:	2b02      	cmp	r3, #2
 8006412:	d155      	bne.n	80064c0 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	689a      	ldr	r2, [r3, #8]
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	429a      	cmp	r2, r3
 800641e:	d914      	bls.n	800644a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	689a      	ldr	r2, [r3, #8]
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	68db      	ldr	r3, [r3, #12]
 8006428:	1ad2      	subs	r2, r2, r3
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	461a      	mov	r2, r3
 8006434:	6879      	ldr	r1, [r7, #4]
 8006436:	68f8      	ldr	r0, [r7, #12]
 8006438:	f000 ff22 	bl	8007280 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800643c:	2300      	movs	r3, #0
 800643e:	2200      	movs	r2, #0
 8006440:	2100      	movs	r1, #0
 8006442:	68f8      	ldr	r0, [r7, #12]
 8006444:	f001 fc2c 	bl	8007ca0 <USBD_LL_PrepareReceive>
 8006448:	e03a      	b.n	80064c0 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	68da      	ldr	r2, [r3, #12]
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	689b      	ldr	r3, [r3, #8]
 8006452:	429a      	cmp	r2, r3
 8006454:	d11c      	bne.n	8006490 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	685a      	ldr	r2, [r3, #4]
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800645e:	429a      	cmp	r2, r3
 8006460:	d316      	bcc.n	8006490 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	685a      	ldr	r2, [r3, #4]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800646c:	429a      	cmp	r2, r3
 800646e:	d20f      	bcs.n	8006490 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006470:	2200      	movs	r2, #0
 8006472:	2100      	movs	r1, #0
 8006474:	68f8      	ldr	r0, [r7, #12]
 8006476:	f000 ff03 	bl	8007280 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2200      	movs	r2, #0
 800647e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006482:	2300      	movs	r3, #0
 8006484:	2200      	movs	r2, #0
 8006486:	2100      	movs	r1, #0
 8006488:	68f8      	ldr	r0, [r7, #12]
 800648a:	f001 fc09 	bl	8007ca0 <USBD_LL_PrepareReceive>
 800648e:	e017      	b.n	80064c0 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d00a      	beq.n	80064b2 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80064a2:	2b03      	cmp	r3, #3
 80064a4:	d105      	bne.n	80064b2 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064ac:	68db      	ldr	r3, [r3, #12]
 80064ae:	68f8      	ldr	r0, [r7, #12]
 80064b0:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80064b2:	2180      	movs	r1, #128	; 0x80
 80064b4:	68f8      	ldr	r0, [r7, #12]
 80064b6:	f001 fb49 	bl	8007b4c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80064ba:	68f8      	ldr	r0, [r7, #12]
 80064bc:	f000 ff32 	bl	8007324 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d123      	bne.n	8006512 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80064ca:	68f8      	ldr	r0, [r7, #12]
 80064cc:	f7ff fe9b 	bl	8006206 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2200      	movs	r2, #0
 80064d4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80064d8:	e01b      	b.n	8006512 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064e0:	695b      	ldr	r3, [r3, #20]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d013      	beq.n	800650e <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80064ec:	2b03      	cmp	r3, #3
 80064ee:	d10e      	bne.n	800650e <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064f6:	695b      	ldr	r3, [r3, #20]
 80064f8:	7afa      	ldrb	r2, [r7, #11]
 80064fa:	4611      	mov	r1, r2
 80064fc:	68f8      	ldr	r0, [r7, #12]
 80064fe:	4798      	blx	r3
 8006500:	4603      	mov	r3, r0
 8006502:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8006504:	7dfb      	ldrb	r3, [r7, #23]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d003      	beq.n	8006512 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800650a:	7dfb      	ldrb	r3, [r7, #23]
 800650c:	e002      	b.n	8006514 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800650e:	2303      	movs	r3, #3
 8006510:	e000      	b.n	8006514 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8006512:	2300      	movs	r3, #0
}
 8006514:	4618      	mov	r0, r3
 8006516:	3718      	adds	r7, #24
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}

0800651c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b082      	sub	sp, #8
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2201      	movs	r2, #1
 8006528:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2200      	movs	r2, #0
 800653e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006548:	2b00      	cmp	r3, #0
 800654a:	d009      	beq.n	8006560 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	6852      	ldr	r2, [r2, #4]
 8006558:	b2d2      	uxtb	r2, r2
 800655a:	4611      	mov	r1, r2
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006560:	2340      	movs	r3, #64	; 0x40
 8006562:	2200      	movs	r2, #0
 8006564:	2100      	movs	r1, #0
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f001 faab 	bl	8007ac2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2201      	movs	r2, #1
 8006570:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2240      	movs	r2, #64	; 0x40
 8006578:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800657c:	2340      	movs	r3, #64	; 0x40
 800657e:	2200      	movs	r2, #0
 8006580:	2180      	movs	r1, #128	; 0x80
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f001 fa9d 	bl	8007ac2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2201      	movs	r2, #1
 800658c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2240      	movs	r2, #64	; 0x40
 8006592:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006594:	2300      	movs	r3, #0
}
 8006596:	4618      	mov	r0, r3
 8006598:	3708      	adds	r7, #8
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}

0800659e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800659e:	b480      	push	{r7}
 80065a0:	b083      	sub	sp, #12
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	6078      	str	r0, [r7, #4]
 80065a6:	460b      	mov	r3, r1
 80065a8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	78fa      	ldrb	r2, [r7, #3]
 80065ae:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80065b0:	2300      	movs	r3, #0
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	370c      	adds	r7, #12
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr

080065be <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80065be:	b480      	push	{r7}
 80065c0:	b083      	sub	sp, #12
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2204      	movs	r2, #4
 80065d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80065da:	2300      	movs	r3, #0
}
 80065dc:	4618      	mov	r0, r3
 80065de:	370c      	adds	r7, #12
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr

080065e8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b083      	sub	sp, #12
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065f6:	2b04      	cmp	r3, #4
 80065f8:	d105      	bne.n	8006606 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006606:	2300      	movs	r3, #0
}
 8006608:	4618      	mov	r0, r3
 800660a:	370c      	adds	r7, #12
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr

08006614 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b082      	sub	sp, #8
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006622:	2b03      	cmp	r3, #3
 8006624:	d10b      	bne.n	800663e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800662c:	69db      	ldr	r3, [r3, #28]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d005      	beq.n	800663e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006638:	69db      	ldr	r3, [r3, #28]
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800663e:	2300      	movs	r3, #0
}
 8006640:	4618      	mov	r0, r3
 8006642:	3708      	adds	r7, #8
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}

08006648 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006648:	b480      	push	{r7}
 800664a:	b083      	sub	sp, #12
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	460b      	mov	r3, r1
 8006652:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006654:	2300      	movs	r3, #0
}
 8006656:	4618      	mov	r0, r3
 8006658:	370c      	adds	r7, #12
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr

08006662 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006662:	b480      	push	{r7}
 8006664:	b083      	sub	sp, #12
 8006666:	af00      	add	r7, sp, #0
 8006668:	6078      	str	r0, [r7, #4]
 800666a:	460b      	mov	r3, r1
 800666c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800666e:	2300      	movs	r3, #0
}
 8006670:	4618      	mov	r0, r3
 8006672:	370c      	adds	r7, #12
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr

0800667c <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800667c:	b480      	push	{r7}
 800667e:	b083      	sub	sp, #12
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006684:	2300      	movs	r3, #0
}
 8006686:	4618      	mov	r0, r3
 8006688:	370c      	adds	r7, #12
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr

08006692 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006692:	b580      	push	{r7, lr}
 8006694:	b082      	sub	sp, #8
 8006696:	af00      	add	r7, sp, #0
 8006698:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2201      	movs	r2, #1
 800669e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d009      	beq.n	80066c0 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	687a      	ldr	r2, [r7, #4]
 80066b6:	6852      	ldr	r2, [r2, #4]
 80066b8:	b2d2      	uxtb	r2, r2
 80066ba:	4611      	mov	r1, r2
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	4798      	blx	r3
  }

  return USBD_OK;
 80066c0:	2300      	movs	r3, #0
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3708      	adds	r7, #8
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}

080066ca <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80066ca:	b480      	push	{r7}
 80066cc:	b087      	sub	sp, #28
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	3301      	adds	r3, #1
 80066e0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80066e8:	8a3b      	ldrh	r3, [r7, #16]
 80066ea:	021b      	lsls	r3, r3, #8
 80066ec:	b21a      	sxth	r2, r3
 80066ee:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80066f2:	4313      	orrs	r3, r2
 80066f4:	b21b      	sxth	r3, r3
 80066f6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80066f8:	89fb      	ldrh	r3, [r7, #14]
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	371c      	adds	r7, #28
 80066fe:	46bd      	mov	sp, r7
 8006700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006704:	4770      	bx	lr
	...

08006708 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b084      	sub	sp, #16
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
 8006710:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006712:	2300      	movs	r3, #0
 8006714:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	781b      	ldrb	r3, [r3, #0]
 800671a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800671e:	2b20      	cmp	r3, #32
 8006720:	d004      	beq.n	800672c <USBD_StdDevReq+0x24>
 8006722:	2b40      	cmp	r3, #64	; 0x40
 8006724:	d002      	beq.n	800672c <USBD_StdDevReq+0x24>
 8006726:	2b00      	cmp	r3, #0
 8006728:	d00a      	beq.n	8006740 <USBD_StdDevReq+0x38>
 800672a:	e050      	b.n	80067ce <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	6839      	ldr	r1, [r7, #0]
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	4798      	blx	r3
 800673a:	4603      	mov	r3, r0
 800673c:	73fb      	strb	r3, [r7, #15]
    break;
 800673e:	e04b      	b.n	80067d8 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	785b      	ldrb	r3, [r3, #1]
 8006744:	2b09      	cmp	r3, #9
 8006746:	d83c      	bhi.n	80067c2 <USBD_StdDevReq+0xba>
 8006748:	a201      	add	r2, pc, #4	; (adr r2, 8006750 <USBD_StdDevReq+0x48>)
 800674a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800674e:	bf00      	nop
 8006750:	080067a5 	.word	0x080067a5
 8006754:	080067b9 	.word	0x080067b9
 8006758:	080067c3 	.word	0x080067c3
 800675c:	080067af 	.word	0x080067af
 8006760:	080067c3 	.word	0x080067c3
 8006764:	08006783 	.word	0x08006783
 8006768:	08006779 	.word	0x08006779
 800676c:	080067c3 	.word	0x080067c3
 8006770:	0800679b 	.word	0x0800679b
 8006774:	0800678d 	.word	0x0800678d
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8006778:	6839      	ldr	r1, [r7, #0]
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 f9ce 	bl	8006b1c <USBD_GetDescriptor>
      break;
 8006780:	e024      	b.n	80067cc <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8006782:	6839      	ldr	r1, [r7, #0]
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f000 fb33 	bl	8006df0 <USBD_SetAddress>
      break;
 800678a:	e01f      	b.n	80067cc <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800678c:	6839      	ldr	r1, [r7, #0]
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f000 fb70 	bl	8006e74 <USBD_SetConfig>
 8006794:	4603      	mov	r3, r0
 8006796:	73fb      	strb	r3, [r7, #15]
      break;
 8006798:	e018      	b.n	80067cc <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800679a:	6839      	ldr	r1, [r7, #0]
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f000 fc0d 	bl	8006fbc <USBD_GetConfig>
      break;
 80067a2:	e013      	b.n	80067cc <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80067a4:	6839      	ldr	r1, [r7, #0]
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 fc3c 	bl	8007024 <USBD_GetStatus>
      break;
 80067ac:	e00e      	b.n	80067cc <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80067ae:	6839      	ldr	r1, [r7, #0]
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f000 fc6a 	bl	800708a <USBD_SetFeature>
      break;
 80067b6:	e009      	b.n	80067cc <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80067b8:	6839      	ldr	r1, [r7, #0]
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 fc79 	bl	80070b2 <USBD_ClrFeature>
      break;
 80067c0:	e004      	b.n	80067cc <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80067c2:	6839      	ldr	r1, [r7, #0]
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f000 fccf 	bl	8007168 <USBD_CtlError>
      break;
 80067ca:	bf00      	nop
    }
    break;
 80067cc:	e004      	b.n	80067d8 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80067ce:	6839      	ldr	r1, [r7, #0]
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f000 fcc9 	bl	8007168 <USBD_CtlError>
    break;
 80067d6:	bf00      	nop
  }

  return ret;
 80067d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3710      	adds	r7, #16
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	bf00      	nop

080067e4 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b084      	sub	sp, #16
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80067ee:	2300      	movs	r3, #0
 80067f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80067fa:	2b20      	cmp	r3, #32
 80067fc:	d003      	beq.n	8006806 <USBD_StdItfReq+0x22>
 80067fe:	2b40      	cmp	r3, #64	; 0x40
 8006800:	d001      	beq.n	8006806 <USBD_StdItfReq+0x22>
 8006802:	2b00      	cmp	r3, #0
 8006804:	d12a      	bne.n	800685c <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800680c:	3b01      	subs	r3, #1
 800680e:	2b02      	cmp	r3, #2
 8006810:	d81d      	bhi.n	800684e <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	889b      	ldrh	r3, [r3, #4]
 8006816:	b2db      	uxtb	r3, r3
 8006818:	2b01      	cmp	r3, #1
 800681a:	d813      	bhi.n	8006844 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	6839      	ldr	r1, [r7, #0]
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	4798      	blx	r3
 800682a:	4603      	mov	r3, r0
 800682c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	88db      	ldrh	r3, [r3, #6]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d110      	bne.n	8006858 <USBD_StdItfReq+0x74>
 8006836:	7bfb      	ldrb	r3, [r7, #15]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d10d      	bne.n	8006858 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f000 fd5e 	bl	80072fe <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8006842:	e009      	b.n	8006858 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8006844:	6839      	ldr	r1, [r7, #0]
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f000 fc8e 	bl	8007168 <USBD_CtlError>
      break;
 800684c:	e004      	b.n	8006858 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800684e:	6839      	ldr	r1, [r7, #0]
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f000 fc89 	bl	8007168 <USBD_CtlError>
      break;
 8006856:	e000      	b.n	800685a <USBD_StdItfReq+0x76>
      break;
 8006858:	bf00      	nop
    }
    break;
 800685a:	e004      	b.n	8006866 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800685c:	6839      	ldr	r1, [r7, #0]
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f000 fc82 	bl	8007168 <USBD_CtlError>
    break;
 8006864:	bf00      	nop
  }

  return ret;
 8006866:	7bfb      	ldrb	r3, [r7, #15]
}
 8006868:	4618      	mov	r0, r3
 800686a:	3710      	adds	r7, #16
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}

08006870 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b084      	sub	sp, #16
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800687a:	2300      	movs	r3, #0
 800687c:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	889b      	ldrh	r3, [r3, #4]
 8006882:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800688c:	2b20      	cmp	r3, #32
 800688e:	d004      	beq.n	800689a <USBD_StdEPReq+0x2a>
 8006890:	2b40      	cmp	r3, #64	; 0x40
 8006892:	d002      	beq.n	800689a <USBD_StdEPReq+0x2a>
 8006894:	2b00      	cmp	r3, #0
 8006896:	d00a      	beq.n	80068ae <USBD_StdEPReq+0x3e>
 8006898:	e135      	b.n	8006b06 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	6839      	ldr	r1, [r7, #0]
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	4798      	blx	r3
 80068a8:	4603      	mov	r3, r0
 80068aa:	73fb      	strb	r3, [r7, #15]
    break;
 80068ac:	e130      	b.n	8006b10 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	785b      	ldrb	r3, [r3, #1]
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	d03e      	beq.n	8006934 <USBD_StdEPReq+0xc4>
 80068b6:	2b03      	cmp	r3, #3
 80068b8:	d002      	beq.n	80068c0 <USBD_StdEPReq+0x50>
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d077      	beq.n	80069ae <USBD_StdEPReq+0x13e>
 80068be:	e11c      	b.n	8006afa <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068c6:	2b02      	cmp	r3, #2
 80068c8:	d002      	beq.n	80068d0 <USBD_StdEPReq+0x60>
 80068ca:	2b03      	cmp	r3, #3
 80068cc:	d015      	beq.n	80068fa <USBD_StdEPReq+0x8a>
 80068ce:	e02b      	b.n	8006928 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80068d0:	7bbb      	ldrb	r3, [r7, #14]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d00c      	beq.n	80068f0 <USBD_StdEPReq+0x80>
 80068d6:	7bbb      	ldrb	r3, [r7, #14]
 80068d8:	2b80      	cmp	r3, #128	; 0x80
 80068da:	d009      	beq.n	80068f0 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80068dc:	7bbb      	ldrb	r3, [r7, #14]
 80068de:	4619      	mov	r1, r3
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f001 f933 	bl	8007b4c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80068e6:	2180      	movs	r1, #128	; 0x80
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f001 f92f 	bl	8007b4c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80068ee:	e020      	b.n	8006932 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 80068f0:	6839      	ldr	r1, [r7, #0]
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f000 fc38 	bl	8007168 <USBD_CtlError>
        break;
 80068f8:	e01b      	b.n	8006932 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	885b      	ldrh	r3, [r3, #2]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d10e      	bne.n	8006920 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006902:	7bbb      	ldrb	r3, [r7, #14]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d00b      	beq.n	8006920 <USBD_StdEPReq+0xb0>
 8006908:	7bbb      	ldrb	r3, [r7, #14]
 800690a:	2b80      	cmp	r3, #128	; 0x80
 800690c:	d008      	beq.n	8006920 <USBD_StdEPReq+0xb0>
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	88db      	ldrh	r3, [r3, #6]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d104      	bne.n	8006920 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8006916:	7bbb      	ldrb	r3, [r7, #14]
 8006918:	4619      	mov	r1, r3
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f001 f916 	bl	8007b4c <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f000 fcec 	bl	80072fe <USBD_CtlSendStatus>

        break;
 8006926:	e004      	b.n	8006932 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8006928:	6839      	ldr	r1, [r7, #0]
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f000 fc1c 	bl	8007168 <USBD_CtlError>
        break;
 8006930:	bf00      	nop
      }
      break;
 8006932:	e0e7      	b.n	8006b04 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800693a:	2b02      	cmp	r3, #2
 800693c:	d002      	beq.n	8006944 <USBD_StdEPReq+0xd4>
 800693e:	2b03      	cmp	r3, #3
 8006940:	d015      	beq.n	800696e <USBD_StdEPReq+0xfe>
 8006942:	e02d      	b.n	80069a0 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006944:	7bbb      	ldrb	r3, [r7, #14]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d00c      	beq.n	8006964 <USBD_StdEPReq+0xf4>
 800694a:	7bbb      	ldrb	r3, [r7, #14]
 800694c:	2b80      	cmp	r3, #128	; 0x80
 800694e:	d009      	beq.n	8006964 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006950:	7bbb      	ldrb	r3, [r7, #14]
 8006952:	4619      	mov	r1, r3
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f001 f8f9 	bl	8007b4c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800695a:	2180      	movs	r1, #128	; 0x80
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f001 f8f5 	bl	8007b4c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006962:	e023      	b.n	80069ac <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8006964:	6839      	ldr	r1, [r7, #0]
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 fbfe 	bl	8007168 <USBD_CtlError>
        break;
 800696c:	e01e      	b.n	80069ac <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	885b      	ldrh	r3, [r3, #2]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d119      	bne.n	80069aa <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8006976:	7bbb      	ldrb	r3, [r7, #14]
 8006978:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800697c:	2b00      	cmp	r3, #0
 800697e:	d004      	beq.n	800698a <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006980:	7bbb      	ldrb	r3, [r7, #14]
 8006982:	4619      	mov	r1, r3
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f001 f900 	bl	8007b8a <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f000 fcb7 	bl	80072fe <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	6839      	ldr	r1, [r7, #0]
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	4798      	blx	r3
        }
        break;
 800699e:	e004      	b.n	80069aa <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 80069a0:	6839      	ldr	r1, [r7, #0]
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f000 fbe0 	bl	8007168 <USBD_CtlError>
        break;
 80069a8:	e000      	b.n	80069ac <USBD_StdEPReq+0x13c>
        break;
 80069aa:	bf00      	nop
      }
      break;
 80069ac:	e0aa      	b.n	8006b04 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069b4:	2b02      	cmp	r3, #2
 80069b6:	d002      	beq.n	80069be <USBD_StdEPReq+0x14e>
 80069b8:	2b03      	cmp	r3, #3
 80069ba:	d032      	beq.n	8006a22 <USBD_StdEPReq+0x1b2>
 80069bc:	e097      	b.n	8006aee <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80069be:	7bbb      	ldrb	r3, [r7, #14]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d007      	beq.n	80069d4 <USBD_StdEPReq+0x164>
 80069c4:	7bbb      	ldrb	r3, [r7, #14]
 80069c6:	2b80      	cmp	r3, #128	; 0x80
 80069c8:	d004      	beq.n	80069d4 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 80069ca:	6839      	ldr	r1, [r7, #0]
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f000 fbcb 	bl	8007168 <USBD_CtlError>
          break;
 80069d2:	e091      	b.n	8006af8 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80069d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	da0b      	bge.n	80069f4 <USBD_StdEPReq+0x184>
 80069dc:	7bbb      	ldrb	r3, [r7, #14]
 80069de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80069e2:	4613      	mov	r3, r2
 80069e4:	009b      	lsls	r3, r3, #2
 80069e6:	4413      	add	r3, r2
 80069e8:	009b      	lsls	r3, r3, #2
 80069ea:	3310      	adds	r3, #16
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	4413      	add	r3, r2
 80069f0:	3304      	adds	r3, #4
 80069f2:	e00b      	b.n	8006a0c <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80069f4:	7bbb      	ldrb	r3, [r7, #14]
 80069f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80069fa:	4613      	mov	r3, r2
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	4413      	add	r3, r2
 8006a00:	009b      	lsls	r3, r3, #2
 8006a02:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006a06:	687a      	ldr	r2, [r7, #4]
 8006a08:	4413      	add	r3, r2
 8006a0a:	3304      	adds	r3, #4
 8006a0c:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	2200      	movs	r2, #0
 8006a12:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	2202      	movs	r2, #2
 8006a18:	4619      	mov	r1, r3
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 fc15 	bl	800724a <USBD_CtlSendData>
        break;
 8006a20:	e06a      	b.n	8006af8 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8006a22:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	da11      	bge.n	8006a4e <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006a2a:	7bbb      	ldrb	r3, [r7, #14]
 8006a2c:	f003 020f 	and.w	r2, r3, #15
 8006a30:	6879      	ldr	r1, [r7, #4]
 8006a32:	4613      	mov	r3, r2
 8006a34:	009b      	lsls	r3, r3, #2
 8006a36:	4413      	add	r3, r2
 8006a38:	009b      	lsls	r3, r3, #2
 8006a3a:	440b      	add	r3, r1
 8006a3c:	3324      	adds	r3, #36	; 0x24
 8006a3e:	881b      	ldrh	r3, [r3, #0]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d117      	bne.n	8006a74 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8006a44:	6839      	ldr	r1, [r7, #0]
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f000 fb8e 	bl	8007168 <USBD_CtlError>
            break;
 8006a4c:	e054      	b.n	8006af8 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006a4e:	7bbb      	ldrb	r3, [r7, #14]
 8006a50:	f003 020f 	and.w	r2, r3, #15
 8006a54:	6879      	ldr	r1, [r7, #4]
 8006a56:	4613      	mov	r3, r2
 8006a58:	009b      	lsls	r3, r3, #2
 8006a5a:	4413      	add	r3, r2
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	440b      	add	r3, r1
 8006a60:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006a64:	881b      	ldrh	r3, [r3, #0]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d104      	bne.n	8006a74 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8006a6a:	6839      	ldr	r1, [r7, #0]
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f000 fb7b 	bl	8007168 <USBD_CtlError>
            break;
 8006a72:	e041      	b.n	8006af8 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	da0b      	bge.n	8006a94 <USBD_StdEPReq+0x224>
 8006a7c:	7bbb      	ldrb	r3, [r7, #14]
 8006a7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006a82:	4613      	mov	r3, r2
 8006a84:	009b      	lsls	r3, r3, #2
 8006a86:	4413      	add	r3, r2
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	3310      	adds	r3, #16
 8006a8c:	687a      	ldr	r2, [r7, #4]
 8006a8e:	4413      	add	r3, r2
 8006a90:	3304      	adds	r3, #4
 8006a92:	e00b      	b.n	8006aac <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006a94:	7bbb      	ldrb	r3, [r7, #14]
 8006a96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a9a:	4613      	mov	r3, r2
 8006a9c:	009b      	lsls	r3, r3, #2
 8006a9e:	4413      	add	r3, r2
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006aa6:	687a      	ldr	r2, [r7, #4]
 8006aa8:	4413      	add	r3, r2
 8006aaa:	3304      	adds	r3, #4
 8006aac:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006aae:	7bbb      	ldrb	r3, [r7, #14]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d002      	beq.n	8006aba <USBD_StdEPReq+0x24a>
 8006ab4:	7bbb      	ldrb	r3, [r7, #14]
 8006ab6:	2b80      	cmp	r3, #128	; 0x80
 8006ab8:	d103      	bne.n	8006ac2 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	2200      	movs	r2, #0
 8006abe:	601a      	str	r2, [r3, #0]
 8006ac0:	e00e      	b.n	8006ae0 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006ac2:	7bbb      	ldrb	r3, [r7, #14]
 8006ac4:	4619      	mov	r1, r3
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f001 f87e 	bl	8007bc8 <USBD_LL_IsStallEP>
 8006acc:	4603      	mov	r3, r0
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d003      	beq.n	8006ada <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	601a      	str	r2, [r3, #0]
 8006ad8:	e002      	b.n	8006ae0 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	2200      	movs	r2, #0
 8006ade:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	2202      	movs	r2, #2
 8006ae4:	4619      	mov	r1, r3
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 fbaf 	bl	800724a <USBD_CtlSendData>
          break;
 8006aec:	e004      	b.n	8006af8 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8006aee:	6839      	ldr	r1, [r7, #0]
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f000 fb39 	bl	8007168 <USBD_CtlError>
        break;
 8006af6:	bf00      	nop
      }
      break;
 8006af8:	e004      	b.n	8006b04 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8006afa:	6839      	ldr	r1, [r7, #0]
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f000 fb33 	bl	8007168 <USBD_CtlError>
      break;
 8006b02:	bf00      	nop
    }
    break;
 8006b04:	e004      	b.n	8006b10 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8006b06:	6839      	ldr	r1, [r7, #0]
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f000 fb2d 	bl	8007168 <USBD_CtlError>
    break;
 8006b0e:	bf00      	nop
  }

  return ret;
 8006b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3710      	adds	r7, #16
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}
	...

08006b1c <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b084      	sub	sp, #16
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006b26:	2300      	movs	r3, #0
 8006b28:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	885b      	ldrh	r3, [r3, #2]
 8006b36:	0a1b      	lsrs	r3, r3, #8
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	3b01      	subs	r3, #1
 8006b3c:	2b06      	cmp	r3, #6
 8006b3e:	f200 8128 	bhi.w	8006d92 <USBD_GetDescriptor+0x276>
 8006b42:	a201      	add	r2, pc, #4	; (adr r2, 8006b48 <USBD_GetDescriptor+0x2c>)
 8006b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b48:	08006b65 	.word	0x08006b65
 8006b4c:	08006b7d 	.word	0x08006b7d
 8006b50:	08006bbd 	.word	0x08006bbd
 8006b54:	08006d93 	.word	0x08006d93
 8006b58:	08006d93 	.word	0x08006d93
 8006b5c:	08006d33 	.word	0x08006d33
 8006b60:	08006d5f 	.word	0x08006d5f
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	687a      	ldr	r2, [r7, #4]
 8006b6e:	7c12      	ldrb	r2, [r2, #16]
 8006b70:	f107 0108 	add.w	r1, r7, #8
 8006b74:	4610      	mov	r0, r2
 8006b76:	4798      	blx	r3
 8006b78:	60f8      	str	r0, [r7, #12]
    break;
 8006b7a:	e112      	b.n	8006da2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	7c1b      	ldrb	r3, [r3, #16]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d10d      	bne.n	8006ba0 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b8c:	f107 0208 	add.w	r2, r7, #8
 8006b90:	4610      	mov	r0, r2
 8006b92:	4798      	blx	r3
 8006b94:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	3301      	adds	r3, #1
 8006b9a:	2202      	movs	r2, #2
 8006b9c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8006b9e:	e100      	b.n	8006da2 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ba8:	f107 0208 	add.w	r2, r7, #8
 8006bac:	4610      	mov	r0, r2
 8006bae:	4798      	blx	r3
 8006bb0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	3301      	adds	r3, #1
 8006bb6:	2202      	movs	r2, #2
 8006bb8:	701a      	strb	r2, [r3, #0]
    break;
 8006bba:	e0f2      	b.n	8006da2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	885b      	ldrh	r3, [r3, #2]
 8006bc0:	b2db      	uxtb	r3, r3
 8006bc2:	2b05      	cmp	r3, #5
 8006bc4:	f200 80ac 	bhi.w	8006d20 <USBD_GetDescriptor+0x204>
 8006bc8:	a201      	add	r2, pc, #4	; (adr r2, 8006bd0 <USBD_GetDescriptor+0xb4>)
 8006bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bce:	bf00      	nop
 8006bd0:	08006be9 	.word	0x08006be9
 8006bd4:	08006c1d 	.word	0x08006c1d
 8006bd8:	08006c51 	.word	0x08006c51
 8006bdc:	08006c85 	.word	0x08006c85
 8006be0:	08006cb9 	.word	0x08006cb9
 8006be4:	08006ced 	.word	0x08006ced
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d00b      	beq.n	8006c0c <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	687a      	ldr	r2, [r7, #4]
 8006bfe:	7c12      	ldrb	r2, [r2, #16]
 8006c00:	f107 0108 	add.w	r1, r7, #8
 8006c04:	4610      	mov	r0, r2
 8006c06:	4798      	blx	r3
 8006c08:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006c0a:	e091      	b.n	8006d30 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006c0c:	6839      	ldr	r1, [r7, #0]
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 faaa 	bl	8007168 <USBD_CtlError>
        err++;
 8006c14:	7afb      	ldrb	r3, [r7, #11]
 8006c16:	3301      	adds	r3, #1
 8006c18:	72fb      	strb	r3, [r7, #11]
      break;
 8006c1a:	e089      	b.n	8006d30 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d00b      	beq.n	8006c40 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	687a      	ldr	r2, [r7, #4]
 8006c32:	7c12      	ldrb	r2, [r2, #16]
 8006c34:	f107 0108 	add.w	r1, r7, #8
 8006c38:	4610      	mov	r0, r2
 8006c3a:	4798      	blx	r3
 8006c3c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006c3e:	e077      	b.n	8006d30 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006c40:	6839      	ldr	r1, [r7, #0]
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 fa90 	bl	8007168 <USBD_CtlError>
        err++;
 8006c48:	7afb      	ldrb	r3, [r7, #11]
 8006c4a:	3301      	adds	r3, #1
 8006c4c:	72fb      	strb	r3, [r7, #11]
      break;
 8006c4e:	e06f      	b.n	8006d30 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d00b      	beq.n	8006c74 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c62:	68db      	ldr	r3, [r3, #12]
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	7c12      	ldrb	r2, [r2, #16]
 8006c68:	f107 0108 	add.w	r1, r7, #8
 8006c6c:	4610      	mov	r0, r2
 8006c6e:	4798      	blx	r3
 8006c70:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006c72:	e05d      	b.n	8006d30 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006c74:	6839      	ldr	r1, [r7, #0]
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f000 fa76 	bl	8007168 <USBD_CtlError>
        err++;
 8006c7c:	7afb      	ldrb	r3, [r7, #11]
 8006c7e:	3301      	adds	r3, #1
 8006c80:	72fb      	strb	r3, [r7, #11]
      break;
 8006c82:	e055      	b.n	8006d30 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c8a:	691b      	ldr	r3, [r3, #16]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d00b      	beq.n	8006ca8 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c96:	691b      	ldr	r3, [r3, #16]
 8006c98:	687a      	ldr	r2, [r7, #4]
 8006c9a:	7c12      	ldrb	r2, [r2, #16]
 8006c9c:	f107 0108 	add.w	r1, r7, #8
 8006ca0:	4610      	mov	r0, r2
 8006ca2:	4798      	blx	r3
 8006ca4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006ca6:	e043      	b.n	8006d30 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006ca8:	6839      	ldr	r1, [r7, #0]
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 fa5c 	bl	8007168 <USBD_CtlError>
        err++;
 8006cb0:	7afb      	ldrb	r3, [r7, #11]
 8006cb2:	3301      	adds	r3, #1
 8006cb4:	72fb      	strb	r3, [r7, #11]
      break;
 8006cb6:	e03b      	b.n	8006d30 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cbe:	695b      	ldr	r3, [r3, #20]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d00b      	beq.n	8006cdc <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cca:	695b      	ldr	r3, [r3, #20]
 8006ccc:	687a      	ldr	r2, [r7, #4]
 8006cce:	7c12      	ldrb	r2, [r2, #16]
 8006cd0:	f107 0108 	add.w	r1, r7, #8
 8006cd4:	4610      	mov	r0, r2
 8006cd6:	4798      	blx	r3
 8006cd8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006cda:	e029      	b.n	8006d30 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006cdc:	6839      	ldr	r1, [r7, #0]
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 fa42 	bl	8007168 <USBD_CtlError>
        err++;
 8006ce4:	7afb      	ldrb	r3, [r7, #11]
 8006ce6:	3301      	adds	r3, #1
 8006ce8:	72fb      	strb	r3, [r7, #11]
      break;
 8006cea:	e021      	b.n	8006d30 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cf2:	699b      	ldr	r3, [r3, #24]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d00b      	beq.n	8006d10 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cfe:	699b      	ldr	r3, [r3, #24]
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	7c12      	ldrb	r2, [r2, #16]
 8006d04:	f107 0108 	add.w	r1, r7, #8
 8006d08:	4610      	mov	r0, r2
 8006d0a:	4798      	blx	r3
 8006d0c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006d0e:	e00f      	b.n	8006d30 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006d10:	6839      	ldr	r1, [r7, #0]
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f000 fa28 	bl	8007168 <USBD_CtlError>
        err++;
 8006d18:	7afb      	ldrb	r3, [r7, #11]
 8006d1a:	3301      	adds	r3, #1
 8006d1c:	72fb      	strb	r3, [r7, #11]
      break;
 8006d1e:	e007      	b.n	8006d30 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8006d20:	6839      	ldr	r1, [r7, #0]
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f000 fa20 	bl	8007168 <USBD_CtlError>
      err++;
 8006d28:	7afb      	ldrb	r3, [r7, #11]
 8006d2a:	3301      	adds	r3, #1
 8006d2c:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8006d2e:	bf00      	nop
    }
    break;
 8006d30:	e037      	b.n	8006da2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	7c1b      	ldrb	r3, [r3, #16]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d109      	bne.n	8006d4e <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d42:	f107 0208 	add.w	r2, r7, #8
 8006d46:	4610      	mov	r0, r2
 8006d48:	4798      	blx	r3
 8006d4a:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006d4c:	e029      	b.n	8006da2 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8006d4e:	6839      	ldr	r1, [r7, #0]
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f000 fa09 	bl	8007168 <USBD_CtlError>
      err++;
 8006d56:	7afb      	ldrb	r3, [r7, #11]
 8006d58:	3301      	adds	r3, #1
 8006d5a:	72fb      	strb	r3, [r7, #11]
    break;
 8006d5c:	e021      	b.n	8006da2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	7c1b      	ldrb	r3, [r3, #16]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d10d      	bne.n	8006d82 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d6e:	f107 0208 	add.w	r2, r7, #8
 8006d72:	4610      	mov	r0, r2
 8006d74:	4798      	blx	r3
 8006d76:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	2207      	movs	r2, #7
 8006d7e:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006d80:	e00f      	b.n	8006da2 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8006d82:	6839      	ldr	r1, [r7, #0]
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f000 f9ef 	bl	8007168 <USBD_CtlError>
      err++;
 8006d8a:	7afb      	ldrb	r3, [r7, #11]
 8006d8c:	3301      	adds	r3, #1
 8006d8e:	72fb      	strb	r3, [r7, #11]
    break;
 8006d90:	e007      	b.n	8006da2 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8006d92:	6839      	ldr	r1, [r7, #0]
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f000 f9e7 	bl	8007168 <USBD_CtlError>
    err++;
 8006d9a:	7afb      	ldrb	r3, [r7, #11]
 8006d9c:	3301      	adds	r3, #1
 8006d9e:	72fb      	strb	r3, [r7, #11]
    break;
 8006da0:	bf00      	nop
  }

  if (err != 0U)
 8006da2:	7afb      	ldrb	r3, [r7, #11]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d11e      	bne.n	8006de6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	88db      	ldrh	r3, [r3, #6]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d016      	beq.n	8006dde <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8006db0:	893b      	ldrh	r3, [r7, #8]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d00e      	beq.n	8006dd4 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	88da      	ldrh	r2, [r3, #6]
 8006dba:	893b      	ldrh	r3, [r7, #8]
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	bf28      	it	cs
 8006dc0:	4613      	movcs	r3, r2
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8006dc6:	893b      	ldrh	r3, [r7, #8]
 8006dc8:	461a      	mov	r2, r3
 8006dca:	68f9      	ldr	r1, [r7, #12]
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f000 fa3c 	bl	800724a <USBD_CtlSendData>
 8006dd2:	e009      	b.n	8006de8 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8006dd4:	6839      	ldr	r1, [r7, #0]
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 f9c6 	bl	8007168 <USBD_CtlError>
 8006ddc:	e004      	b.n	8006de8 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f000 fa8d 	bl	80072fe <USBD_CtlSendStatus>
 8006de4:	e000      	b.n	8006de8 <USBD_GetDescriptor+0x2cc>
    return;
 8006de6:	bf00      	nop
    }
  }
}
 8006de8:	3710      	adds	r7, #16
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}
 8006dee:	bf00      	nop

08006df0 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b084      	sub	sp, #16
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
 8006df8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	889b      	ldrh	r3, [r3, #4]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d130      	bne.n	8006e64 <USBD_SetAddress+0x74>
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	88db      	ldrh	r3, [r3, #6]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d12c      	bne.n	8006e64 <USBD_SetAddress+0x74>
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	885b      	ldrh	r3, [r3, #2]
 8006e0e:	2b7f      	cmp	r3, #127	; 0x7f
 8006e10:	d828      	bhi.n	8006e64 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	885b      	ldrh	r3, [r3, #2]
 8006e16:	b2db      	uxtb	r3, r3
 8006e18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e1c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e24:	2b03      	cmp	r3, #3
 8006e26:	d104      	bne.n	8006e32 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006e28:	6839      	ldr	r1, [r7, #0]
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f000 f99c 	bl	8007168 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e30:	e01c      	b.n	8006e6c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	7bfa      	ldrb	r2, [r7, #15]
 8006e36:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006e3a:	7bfb      	ldrb	r3, [r7, #15]
 8006e3c:	4619      	mov	r1, r3
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f000 feee 	bl	8007c20 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f000 fa5a 	bl	80072fe <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006e4a:	7bfb      	ldrb	r3, [r7, #15]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d004      	beq.n	8006e5a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2202      	movs	r2, #2
 8006e54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e58:	e008      	b.n	8006e6c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e62:	e003      	b.n	8006e6c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006e64:	6839      	ldr	r1, [r7, #0]
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 f97e 	bl	8007168 <USBD_CtlError>
  }
}
 8006e6c:	bf00      	nop
 8006e6e:	3710      	adds	r7, #16
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}

08006e74 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b084      	sub	sp, #16
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	885b      	ldrh	r3, [r3, #2]
 8006e86:	b2da      	uxtb	r2, r3
 8006e88:	4b4b      	ldr	r3, [pc, #300]	; (8006fb8 <USBD_SetConfig+0x144>)
 8006e8a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006e8c:	4b4a      	ldr	r3, [pc, #296]	; (8006fb8 <USBD_SetConfig+0x144>)
 8006e8e:	781b      	ldrb	r3, [r3, #0]
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	d905      	bls.n	8006ea0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006e94:	6839      	ldr	r1, [r7, #0]
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f000 f966 	bl	8007168 <USBD_CtlError>
    return USBD_FAIL;
 8006e9c:	2303      	movs	r3, #3
 8006e9e:	e087      	b.n	8006fb0 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ea6:	2b02      	cmp	r3, #2
 8006ea8:	d002      	beq.n	8006eb0 <USBD_SetConfig+0x3c>
 8006eaa:	2b03      	cmp	r3, #3
 8006eac:	d025      	beq.n	8006efa <USBD_SetConfig+0x86>
 8006eae:	e071      	b.n	8006f94 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8006eb0:	4b41      	ldr	r3, [pc, #260]	; (8006fb8 <USBD_SetConfig+0x144>)
 8006eb2:	781b      	ldrb	r3, [r3, #0]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d01c      	beq.n	8006ef2 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8006eb8:	4b3f      	ldr	r3, [pc, #252]	; (8006fb8 <USBD_SetConfig+0x144>)
 8006eba:	781b      	ldrb	r3, [r3, #0]
 8006ebc:	461a      	mov	r2, r3
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006ec2:	4b3d      	ldr	r3, [pc, #244]	; (8006fb8 <USBD_SetConfig+0x144>)
 8006ec4:	781b      	ldrb	r3, [r3, #0]
 8006ec6:	4619      	mov	r1, r3
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f7ff f9a7 	bl	800621c <USBD_SetClassConfig>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8006ed2:	7bfb      	ldrb	r3, [r7, #15]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d004      	beq.n	8006ee2 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8006ed8:	6839      	ldr	r1, [r7, #0]
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f000 f944 	bl	8007168 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006ee0:	e065      	b.n	8006fae <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 fa0b 	bl	80072fe <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2203      	movs	r2, #3
 8006eec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006ef0:	e05d      	b.n	8006fae <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f000 fa03 	bl	80072fe <USBD_CtlSendStatus>
    break;
 8006ef8:	e059      	b.n	8006fae <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8006efa:	4b2f      	ldr	r3, [pc, #188]	; (8006fb8 <USBD_SetConfig+0x144>)
 8006efc:	781b      	ldrb	r3, [r3, #0]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d112      	bne.n	8006f28 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2202      	movs	r2, #2
 8006f06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8006f0a:	4b2b      	ldr	r3, [pc, #172]	; (8006fb8 <USBD_SetConfig+0x144>)
 8006f0c:	781b      	ldrb	r3, [r3, #0]
 8006f0e:	461a      	mov	r2, r3
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006f14:	4b28      	ldr	r3, [pc, #160]	; (8006fb8 <USBD_SetConfig+0x144>)
 8006f16:	781b      	ldrb	r3, [r3, #0]
 8006f18:	4619      	mov	r1, r3
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f7ff f99a 	bl	8006254 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f000 f9ec 	bl	80072fe <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006f26:	e042      	b.n	8006fae <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8006f28:	4b23      	ldr	r3, [pc, #140]	; (8006fb8 <USBD_SetConfig+0x144>)
 8006f2a:	781b      	ldrb	r3, [r3, #0]
 8006f2c:	461a      	mov	r2, r3
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	429a      	cmp	r2, r3
 8006f34:	d02a      	beq.n	8006f8c <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	b2db      	uxtb	r3, r3
 8006f3c:	4619      	mov	r1, r3
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f7ff f988 	bl	8006254 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8006f44:	4b1c      	ldr	r3, [pc, #112]	; (8006fb8 <USBD_SetConfig+0x144>)
 8006f46:	781b      	ldrb	r3, [r3, #0]
 8006f48:	461a      	mov	r2, r3
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006f4e:	4b1a      	ldr	r3, [pc, #104]	; (8006fb8 <USBD_SetConfig+0x144>)
 8006f50:	781b      	ldrb	r3, [r3, #0]
 8006f52:	4619      	mov	r1, r3
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f7ff f961 	bl	800621c <USBD_SetClassConfig>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8006f5e:	7bfb      	ldrb	r3, [r7, #15]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d00f      	beq.n	8006f84 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8006f64:	6839      	ldr	r1, [r7, #0]
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f000 f8fe 	bl	8007168 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	4619      	mov	r1, r3
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f7ff f96d 	bl	8006254 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2202      	movs	r2, #2
 8006f7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006f82:	e014      	b.n	8006fae <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f000 f9ba 	bl	80072fe <USBD_CtlSendStatus>
    break;
 8006f8a:	e010      	b.n	8006fae <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f000 f9b6 	bl	80072fe <USBD_CtlSendStatus>
    break;
 8006f92:	e00c      	b.n	8006fae <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8006f94:	6839      	ldr	r1, [r7, #0]
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f000 f8e6 	bl	8007168 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006f9c:	4b06      	ldr	r3, [pc, #24]	; (8006fb8 <USBD_SetConfig+0x144>)
 8006f9e:	781b      	ldrb	r3, [r3, #0]
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f7ff f956 	bl	8006254 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8006fa8:	2303      	movs	r3, #3
 8006faa:	73fb      	strb	r3, [r7, #15]
    break;
 8006fac:	bf00      	nop
  }

  return ret;
 8006fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3710      	adds	r7, #16
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}
 8006fb8:	2000020c 	.word	0x2000020c

08006fbc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b082      	sub	sp, #8
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	88db      	ldrh	r3, [r3, #6]
 8006fca:	2b01      	cmp	r3, #1
 8006fcc:	d004      	beq.n	8006fd8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006fce:	6839      	ldr	r1, [r7, #0]
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f000 f8c9 	bl	8007168 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8006fd6:	e021      	b.n	800701c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	db17      	blt.n	8007012 <USBD_GetConfig+0x56>
 8006fe2:	2b02      	cmp	r3, #2
 8006fe4:	dd02      	ble.n	8006fec <USBD_GetConfig+0x30>
 8006fe6:	2b03      	cmp	r3, #3
 8006fe8:	d00b      	beq.n	8007002 <USBD_GetConfig+0x46>
 8006fea:	e012      	b.n	8007012 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	3308      	adds	r3, #8
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	4619      	mov	r1, r3
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f000 f925 	bl	800724a <USBD_CtlSendData>
      break;
 8007000:	e00c      	b.n	800701c <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	3304      	adds	r3, #4
 8007006:	2201      	movs	r2, #1
 8007008:	4619      	mov	r1, r3
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f000 f91d 	bl	800724a <USBD_CtlSendData>
      break;
 8007010:	e004      	b.n	800701c <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8007012:	6839      	ldr	r1, [r7, #0]
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f000 f8a7 	bl	8007168 <USBD_CtlError>
      break;
 800701a:	bf00      	nop
}
 800701c:	bf00      	nop
 800701e:	3708      	adds	r7, #8
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}

08007024 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b082      	sub	sp, #8
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007034:	3b01      	subs	r3, #1
 8007036:	2b02      	cmp	r3, #2
 8007038:	d81e      	bhi.n	8007078 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	88db      	ldrh	r3, [r3, #6]
 800703e:	2b02      	cmp	r3, #2
 8007040:	d004      	beq.n	800704c <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8007042:	6839      	ldr	r1, [r7, #0]
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f000 f88f 	bl	8007168 <USBD_CtlError>
      break;
 800704a:	e01a      	b.n	8007082 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2201      	movs	r2, #1
 8007050:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007058:	2b00      	cmp	r3, #0
 800705a:	d005      	beq.n	8007068 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	68db      	ldr	r3, [r3, #12]
 8007060:	f043 0202 	orr.w	r2, r3, #2
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	330c      	adds	r3, #12
 800706c:	2202      	movs	r2, #2
 800706e:	4619      	mov	r1, r3
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f000 f8ea 	bl	800724a <USBD_CtlSendData>
    break;
 8007076:	e004      	b.n	8007082 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8007078:	6839      	ldr	r1, [r7, #0]
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f000 f874 	bl	8007168 <USBD_CtlError>
    break;
 8007080:	bf00      	nop
  }
}
 8007082:	bf00      	nop
 8007084:	3708      	adds	r7, #8
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}

0800708a <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800708a:	b580      	push	{r7, lr}
 800708c:	b082      	sub	sp, #8
 800708e:	af00      	add	r7, sp, #0
 8007090:	6078      	str	r0, [r7, #4]
 8007092:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	885b      	ldrh	r3, [r3, #2]
 8007098:	2b01      	cmp	r3, #1
 800709a:	d106      	bne.n	80070aa <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2201      	movs	r2, #1
 80070a0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f000 f92a 	bl	80072fe <USBD_CtlSendStatus>
  }
}
 80070aa:	bf00      	nop
 80070ac:	3708      	adds	r7, #8
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}

080070b2 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070b2:	b580      	push	{r7, lr}
 80070b4:	b082      	sub	sp, #8
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	6078      	str	r0, [r7, #4]
 80070ba:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070c2:	3b01      	subs	r3, #1
 80070c4:	2b02      	cmp	r3, #2
 80070c6:	d80b      	bhi.n	80070e0 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	885b      	ldrh	r3, [r3, #2]
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	d10c      	bne.n	80070ea <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2200      	movs	r2, #0
 80070d4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f000 f910 	bl	80072fe <USBD_CtlSendStatus>
      }
      break;
 80070de:	e004      	b.n	80070ea <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80070e0:	6839      	ldr	r1, [r7, #0]
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f000 f840 	bl	8007168 <USBD_CtlError>
      break;
 80070e8:	e000      	b.n	80070ec <USBD_ClrFeature+0x3a>
      break;
 80070ea:	bf00      	nop
  }
}
 80070ec:	bf00      	nop
 80070ee:	3708      	adds	r7, #8
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b084      	sub	sp, #16
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	781a      	ldrb	r2, [r3, #0]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	3301      	adds	r3, #1
 800710e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	781a      	ldrb	r2, [r3, #0]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	3301      	adds	r3, #1
 800711c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800711e:	68f8      	ldr	r0, [r7, #12]
 8007120:	f7ff fad3 	bl	80066ca <SWAPBYTE>
 8007124:	4603      	mov	r3, r0
 8007126:	461a      	mov	r2, r3
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	3301      	adds	r3, #1
 8007130:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	3301      	adds	r3, #1
 8007136:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007138:	68f8      	ldr	r0, [r7, #12]
 800713a:	f7ff fac6 	bl	80066ca <SWAPBYTE>
 800713e:	4603      	mov	r3, r0
 8007140:	461a      	mov	r2, r3
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	3301      	adds	r3, #1
 800714a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	3301      	adds	r3, #1
 8007150:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007152:	68f8      	ldr	r0, [r7, #12]
 8007154:	f7ff fab9 	bl	80066ca <SWAPBYTE>
 8007158:	4603      	mov	r3, r0
 800715a:	461a      	mov	r2, r3
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	80da      	strh	r2, [r3, #6]
}
 8007160:	bf00      	nop
 8007162:	3710      	adds	r7, #16
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}

08007168 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b082      	sub	sp, #8
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007172:	2180      	movs	r1, #128	; 0x80
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f000 fce9 	bl	8007b4c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800717a:	2100      	movs	r1, #0
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f000 fce5 	bl	8007b4c <USBD_LL_StallEP>
}
 8007182:	bf00      	nop
 8007184:	3708      	adds	r7, #8
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}

0800718a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800718a:	b580      	push	{r7, lr}
 800718c:	b086      	sub	sp, #24
 800718e:	af00      	add	r7, sp, #0
 8007190:	60f8      	str	r0, [r7, #12]
 8007192:	60b9      	str	r1, [r7, #8]
 8007194:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007196:	2300      	movs	r3, #0
 8007198:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d036      	beq.n	800720e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80071a4:	6938      	ldr	r0, [r7, #16]
 80071a6:	f000 f836 	bl	8007216 <USBD_GetLen>
 80071aa:	4603      	mov	r3, r0
 80071ac:	3301      	adds	r3, #1
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	005b      	lsls	r3, r3, #1
 80071b2:	b29a      	uxth	r2, r3
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80071b8:	7dfb      	ldrb	r3, [r7, #23]
 80071ba:	68ba      	ldr	r2, [r7, #8]
 80071bc:	4413      	add	r3, r2
 80071be:	687a      	ldr	r2, [r7, #4]
 80071c0:	7812      	ldrb	r2, [r2, #0]
 80071c2:	701a      	strb	r2, [r3, #0]
  idx++;
 80071c4:	7dfb      	ldrb	r3, [r7, #23]
 80071c6:	3301      	adds	r3, #1
 80071c8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80071ca:	7dfb      	ldrb	r3, [r7, #23]
 80071cc:	68ba      	ldr	r2, [r7, #8]
 80071ce:	4413      	add	r3, r2
 80071d0:	2203      	movs	r2, #3
 80071d2:	701a      	strb	r2, [r3, #0]
  idx++;
 80071d4:	7dfb      	ldrb	r3, [r7, #23]
 80071d6:	3301      	adds	r3, #1
 80071d8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80071da:	e013      	b.n	8007204 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80071dc:	7dfb      	ldrb	r3, [r7, #23]
 80071de:	68ba      	ldr	r2, [r7, #8]
 80071e0:	4413      	add	r3, r2
 80071e2:	693a      	ldr	r2, [r7, #16]
 80071e4:	7812      	ldrb	r2, [r2, #0]
 80071e6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	3301      	adds	r3, #1
 80071ec:	613b      	str	r3, [r7, #16]
    idx++;
 80071ee:	7dfb      	ldrb	r3, [r7, #23]
 80071f0:	3301      	adds	r3, #1
 80071f2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80071f4:	7dfb      	ldrb	r3, [r7, #23]
 80071f6:	68ba      	ldr	r2, [r7, #8]
 80071f8:	4413      	add	r3, r2
 80071fa:	2200      	movs	r2, #0
 80071fc:	701a      	strb	r2, [r3, #0]
    idx++;
 80071fe:	7dfb      	ldrb	r3, [r7, #23]
 8007200:	3301      	adds	r3, #1
 8007202:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	781b      	ldrb	r3, [r3, #0]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d1e7      	bne.n	80071dc <USBD_GetString+0x52>
 800720c:	e000      	b.n	8007210 <USBD_GetString+0x86>
    return;
 800720e:	bf00      	nop
  }
}
 8007210:	3718      	adds	r7, #24
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}

08007216 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007216:	b480      	push	{r7}
 8007218:	b085      	sub	sp, #20
 800721a:	af00      	add	r7, sp, #0
 800721c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800721e:	2300      	movs	r3, #0
 8007220:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007226:	e005      	b.n	8007234 <USBD_GetLen+0x1e>
  {
    len++;
 8007228:	7bfb      	ldrb	r3, [r7, #15]
 800722a:	3301      	adds	r3, #1
 800722c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	3301      	adds	r3, #1
 8007232:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	781b      	ldrb	r3, [r3, #0]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d1f5      	bne.n	8007228 <USBD_GetLen+0x12>
  }

  return len;
 800723c:	7bfb      	ldrb	r3, [r7, #15]
}
 800723e:	4618      	mov	r0, r3
 8007240:	3714      	adds	r7, #20
 8007242:	46bd      	mov	sp, r7
 8007244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007248:	4770      	bx	lr

0800724a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800724a:	b580      	push	{r7, lr}
 800724c:	b084      	sub	sp, #16
 800724e:	af00      	add	r7, sp, #0
 8007250:	60f8      	str	r0, [r7, #12]
 8007252:	60b9      	str	r1, [r7, #8]
 8007254:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2202      	movs	r2, #2
 800725a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	687a      	ldr	r2, [r7, #4]
 8007262:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	687a      	ldr	r2, [r7, #4]
 8007268:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	68ba      	ldr	r2, [r7, #8]
 800726e:	2100      	movs	r1, #0
 8007270:	68f8      	ldr	r0, [r7, #12]
 8007272:	f000 fcf4 	bl	8007c5e <USBD_LL_Transmit>

  return USBD_OK;
 8007276:	2300      	movs	r3, #0
}
 8007278:	4618      	mov	r0, r3
 800727a:	3710      	adds	r7, #16
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}

08007280 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b084      	sub	sp, #16
 8007284:	af00      	add	r7, sp, #0
 8007286:	60f8      	str	r0, [r7, #12]
 8007288:	60b9      	str	r1, [r7, #8]
 800728a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	68ba      	ldr	r2, [r7, #8]
 8007290:	2100      	movs	r1, #0
 8007292:	68f8      	ldr	r0, [r7, #12]
 8007294:	f000 fce3 	bl	8007c5e <USBD_LL_Transmit>

  return USBD_OK;
 8007298:	2300      	movs	r3, #0
}
 800729a:	4618      	mov	r0, r3
 800729c:	3710      	adds	r7, #16
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}

080072a2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80072a2:	b580      	push	{r7, lr}
 80072a4:	b084      	sub	sp, #16
 80072a6:	af00      	add	r7, sp, #0
 80072a8:	60f8      	str	r0, [r7, #12]
 80072aa:	60b9      	str	r1, [r7, #8]
 80072ac:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2203      	movs	r2, #3
 80072b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	687a      	ldr	r2, [r7, #4]
 80072ba:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	68ba      	ldr	r2, [r7, #8]
 80072ca:	2100      	movs	r1, #0
 80072cc:	68f8      	ldr	r0, [r7, #12]
 80072ce:	f000 fce7 	bl	8007ca0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80072d2:	2300      	movs	r3, #0
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3710      	adds	r7, #16
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}

080072dc <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b084      	sub	sp, #16
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	60f8      	str	r0, [r7, #12]
 80072e4:	60b9      	str	r1, [r7, #8]
 80072e6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	68ba      	ldr	r2, [r7, #8]
 80072ec:	2100      	movs	r1, #0
 80072ee:	68f8      	ldr	r0, [r7, #12]
 80072f0:	f000 fcd6 	bl	8007ca0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80072f4:	2300      	movs	r3, #0
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3710      	adds	r7, #16
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}

080072fe <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80072fe:	b580      	push	{r7, lr}
 8007300:	b082      	sub	sp, #8
 8007302:	af00      	add	r7, sp, #0
 8007304:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2204      	movs	r2, #4
 800730a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800730e:	2300      	movs	r3, #0
 8007310:	2200      	movs	r2, #0
 8007312:	2100      	movs	r1, #0
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f000 fca2 	bl	8007c5e <USBD_LL_Transmit>

  return USBD_OK;
 800731a:	2300      	movs	r3, #0
}
 800731c:	4618      	mov	r0, r3
 800731e:	3708      	adds	r7, #8
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}

08007324 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b082      	sub	sp, #8
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2205      	movs	r2, #5
 8007330:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007334:	2300      	movs	r3, #0
 8007336:	2200      	movs	r2, #0
 8007338:	2100      	movs	r1, #0
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f000 fcb0 	bl	8007ca0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007340:	2300      	movs	r3, #0
}
 8007342:	4618      	mov	r0, r3
 8007344:	3708      	adds	r7, #8
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}
	...

0800734c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007350:	2200      	movs	r2, #0
 8007352:	4912      	ldr	r1, [pc, #72]	; (800739c <MX_USB_DEVICE_Init+0x50>)
 8007354:	4812      	ldr	r0, [pc, #72]	; (80073a0 <MX_USB_DEVICE_Init+0x54>)
 8007356:	f7fe fef3 	bl	8006140 <USBD_Init>
 800735a:	4603      	mov	r3, r0
 800735c:	2b00      	cmp	r3, #0
 800735e:	d001      	beq.n	8007364 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007360:	f7f9 faa8 	bl	80008b4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007364:	490f      	ldr	r1, [pc, #60]	; (80073a4 <MX_USB_DEVICE_Init+0x58>)
 8007366:	480e      	ldr	r0, [pc, #56]	; (80073a0 <MX_USB_DEVICE_Init+0x54>)
 8007368:	f7fe ff20 	bl	80061ac <USBD_RegisterClass>
 800736c:	4603      	mov	r3, r0
 800736e:	2b00      	cmp	r3, #0
 8007370:	d001      	beq.n	8007376 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007372:	f7f9 fa9f 	bl	80008b4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007376:	490c      	ldr	r1, [pc, #48]	; (80073a8 <MX_USB_DEVICE_Init+0x5c>)
 8007378:	4809      	ldr	r0, [pc, #36]	; (80073a0 <MX_USB_DEVICE_Init+0x54>)
 800737a:	f7fe fe45 	bl	8006008 <USBD_CDC_RegisterInterface>
 800737e:	4603      	mov	r3, r0
 8007380:	2b00      	cmp	r3, #0
 8007382:	d001      	beq.n	8007388 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007384:	f7f9 fa96 	bl	80008b4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007388:	4805      	ldr	r0, [pc, #20]	; (80073a0 <MX_USB_DEVICE_Init+0x54>)
 800738a:	f7fe ff30 	bl	80061ee <USBD_Start>
 800738e:	4603      	mov	r3, r0
 8007390:	2b00      	cmp	r3, #0
 8007392:	d001      	beq.n	8007398 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007394:	f7f9 fa8e 	bl	80008b4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007398:	bf00      	nop
 800739a:	bd80      	pop	{r7, pc}
 800739c:	20000138 	.word	0x20000138
 80073a0:	20004304 	.word	0x20004304
 80073a4:	20000018 	.word	0x20000018
 80073a8:	2000011c 	.word	0x2000011c

080073ac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80073b0:	2200      	movs	r2, #0
 80073b2:	4905      	ldr	r1, [pc, #20]	; (80073c8 <CDC_Init_FS+0x1c>)
 80073b4:	4805      	ldr	r0, [pc, #20]	; (80073cc <CDC_Init_FS+0x20>)
 80073b6:	f7fe fe3c 	bl	8006032 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80073ba:	4905      	ldr	r1, [pc, #20]	; (80073d0 <CDC_Init_FS+0x24>)
 80073bc:	4803      	ldr	r0, [pc, #12]	; (80073cc <CDC_Init_FS+0x20>)
 80073be:	f7fe fe51 	bl	8006064 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80073c2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	bd80      	pop	{r7, pc}
 80073c8:	200049bc 	.word	0x200049bc
 80073cc:	20004304 	.word	0x20004304
 80073d0:	200045d4 	.word	0x200045d4

080073d4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80073d4:	b480      	push	{r7}
 80073d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80073d8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80073da:	4618      	mov	r0, r3
 80073dc:	46bd      	mov	sp, r7
 80073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e2:	4770      	bx	lr

080073e4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b083      	sub	sp, #12
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	4603      	mov	r3, r0
 80073ec:	6039      	str	r1, [r7, #0]
 80073ee:	71fb      	strb	r3, [r7, #7]
 80073f0:	4613      	mov	r3, r2
 80073f2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80073f4:	79fb      	ldrb	r3, [r7, #7]
 80073f6:	2b23      	cmp	r3, #35	; 0x23
 80073f8:	d85c      	bhi.n	80074b4 <CDC_Control_FS+0xd0>
 80073fa:	a201      	add	r2, pc, #4	; (adr r2, 8007400 <CDC_Control_FS+0x1c>)
 80073fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007400:	080074b5 	.word	0x080074b5
 8007404:	080074b5 	.word	0x080074b5
 8007408:	080074b5 	.word	0x080074b5
 800740c:	080074b5 	.word	0x080074b5
 8007410:	080074b5 	.word	0x080074b5
 8007414:	080074b5 	.word	0x080074b5
 8007418:	080074b5 	.word	0x080074b5
 800741c:	080074b5 	.word	0x080074b5
 8007420:	080074b5 	.word	0x080074b5
 8007424:	080074b5 	.word	0x080074b5
 8007428:	080074b5 	.word	0x080074b5
 800742c:	080074b5 	.word	0x080074b5
 8007430:	080074b5 	.word	0x080074b5
 8007434:	080074b5 	.word	0x080074b5
 8007438:	080074b5 	.word	0x080074b5
 800743c:	080074b5 	.word	0x080074b5
 8007440:	080074b5 	.word	0x080074b5
 8007444:	080074b5 	.word	0x080074b5
 8007448:	080074b5 	.word	0x080074b5
 800744c:	080074b5 	.word	0x080074b5
 8007450:	080074b5 	.word	0x080074b5
 8007454:	080074b5 	.word	0x080074b5
 8007458:	080074b5 	.word	0x080074b5
 800745c:	080074b5 	.word	0x080074b5
 8007460:	080074b5 	.word	0x080074b5
 8007464:	080074b5 	.word	0x080074b5
 8007468:	080074b5 	.word	0x080074b5
 800746c:	080074b5 	.word	0x080074b5
 8007470:	080074b5 	.word	0x080074b5
 8007474:	080074b5 	.word	0x080074b5
 8007478:	080074b5 	.word	0x080074b5
 800747c:	080074b5 	.word	0x080074b5
 8007480:	08007491 	.word	0x08007491
 8007484:	080074a3 	.word	0x080074a3
 8007488:	080074b5 	.word	0x080074b5
 800748c:	080074b5 	.word	0x080074b5
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    static uint8_t lineCoding[7] // 115200bps, 1stop, no parity, 8bit
            = { 0x00, 0xC2, 0x01, 0x00, 0x00, 0x00, 0x08 };
    case CDC_SET_LINE_CODING:
    	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 8007490:	4b0c      	ldr	r3, [pc, #48]	; (80074c4 <CDC_Control_FS+0xe0>)
 8007492:	683a      	ldr	r2, [r7, #0]
 8007494:	6810      	ldr	r0, [r2, #0]
 8007496:	6018      	str	r0, [r3, #0]
 8007498:	8891      	ldrh	r1, [r2, #4]
 800749a:	7992      	ldrb	r2, [r2, #6]
 800749c:	8099      	strh	r1, [r3, #4]
 800749e:	719a      	strb	r2, [r3, #6]
    break;
 80074a0:	e009      	b.n	80074b6 <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
    	memcpy(pbuf, lineCoding, sizeof(lineCoding));
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	4a07      	ldr	r2, [pc, #28]	; (80074c4 <CDC_Control_FS+0xe0>)
 80074a6:	6810      	ldr	r0, [r2, #0]
 80074a8:	6018      	str	r0, [r3, #0]
 80074aa:	8891      	ldrh	r1, [r2, #4]
 80074ac:	7992      	ldrb	r2, [r2, #6]
 80074ae:	8099      	strh	r1, [r3, #4]
 80074b0:	719a      	strb	r2, [r3, #6]
    break;
 80074b2:	e000      	b.n	80074b6 <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80074b4:	bf00      	nop
  }

  return (USBD_OK);
 80074b6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	370c      	adds	r7, #12
 80074bc:	46bd      	mov	sp, r7
 80074be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c2:	4770      	bx	lr
 80074c4:	20000130 	.word	0x20000130

080074c8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b082      	sub	sp, #8
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80074d2:	6879      	ldr	r1, [r7, #4]
 80074d4:	4805      	ldr	r0, [pc, #20]	; (80074ec <CDC_Receive_FS+0x24>)
 80074d6:	f7fe fdc5 	bl	8006064 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80074da:	4804      	ldr	r0, [pc, #16]	; (80074ec <CDC_Receive_FS+0x24>)
 80074dc:	f7fe fe06 	bl	80060ec <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80074e0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3708      	adds	r7, #8
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}
 80074ea:	bf00      	nop
 80074ec:	20004304 	.word	0x20004304

080074f0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b084      	sub	sp, #16
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	460b      	mov	r3, r1
 80074fa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80074fc:	2300      	movs	r3, #0
 80074fe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007500:	4b0d      	ldr	r3, [pc, #52]	; (8007538 <CDC_Transmit_FS+0x48>)
 8007502:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007506:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800750e:	2b00      	cmp	r3, #0
 8007510:	d001      	beq.n	8007516 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007512:	2301      	movs	r3, #1
 8007514:	e00b      	b.n	800752e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007516:	887b      	ldrh	r3, [r7, #2]
 8007518:	461a      	mov	r2, r3
 800751a:	6879      	ldr	r1, [r7, #4]
 800751c:	4806      	ldr	r0, [pc, #24]	; (8007538 <CDC_Transmit_FS+0x48>)
 800751e:	f7fe fd88 	bl	8006032 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007522:	4805      	ldr	r0, [pc, #20]	; (8007538 <CDC_Transmit_FS+0x48>)
 8007524:	f7fe fdb2 	bl	800608c <USBD_CDC_TransmitPacket>
 8007528:	4603      	mov	r3, r0
 800752a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800752c:	7bfb      	ldrb	r3, [r7, #15]
}
 800752e:	4618      	mov	r0, r3
 8007530:	3710      	adds	r7, #16
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}
 8007536:	bf00      	nop
 8007538:	20004304 	.word	0x20004304

0800753c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800753c:	b480      	push	{r7}
 800753e:	b087      	sub	sp, #28
 8007540:	af00      	add	r7, sp, #0
 8007542:	60f8      	str	r0, [r7, #12]
 8007544:	60b9      	str	r1, [r7, #8]
 8007546:	4613      	mov	r3, r2
 8007548:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800754a:	2300      	movs	r3, #0
 800754c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800754e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007552:	4618      	mov	r0, r3
 8007554:	371c      	adds	r7, #28
 8007556:	46bd      	mov	sp, r7
 8007558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755c:	4770      	bx	lr
	...

08007560 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007560:	b480      	push	{r7}
 8007562:	b083      	sub	sp, #12
 8007564:	af00      	add	r7, sp, #0
 8007566:	4603      	mov	r3, r0
 8007568:	6039      	str	r1, [r7, #0]
 800756a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	2212      	movs	r2, #18
 8007570:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007572:	4b03      	ldr	r3, [pc, #12]	; (8007580 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007574:	4618      	mov	r0, r3
 8007576:	370c      	adds	r7, #12
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr
 8007580:	20000154 	.word	0x20000154

08007584 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007584:	b480      	push	{r7}
 8007586:	b083      	sub	sp, #12
 8007588:	af00      	add	r7, sp, #0
 800758a:	4603      	mov	r3, r0
 800758c:	6039      	str	r1, [r7, #0]
 800758e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	2204      	movs	r2, #4
 8007594:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007596:	4b03      	ldr	r3, [pc, #12]	; (80075a4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007598:	4618      	mov	r0, r3
 800759a:	370c      	adds	r7, #12
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr
 80075a4:	20000168 	.word	0x20000168

080075a8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b082      	sub	sp, #8
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	4603      	mov	r3, r0
 80075b0:	6039      	str	r1, [r7, #0]
 80075b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80075b4:	79fb      	ldrb	r3, [r7, #7]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d105      	bne.n	80075c6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80075ba:	683a      	ldr	r2, [r7, #0]
 80075bc:	4907      	ldr	r1, [pc, #28]	; (80075dc <USBD_FS_ProductStrDescriptor+0x34>)
 80075be:	4808      	ldr	r0, [pc, #32]	; (80075e0 <USBD_FS_ProductStrDescriptor+0x38>)
 80075c0:	f7ff fde3 	bl	800718a <USBD_GetString>
 80075c4:	e004      	b.n	80075d0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80075c6:	683a      	ldr	r2, [r7, #0]
 80075c8:	4904      	ldr	r1, [pc, #16]	; (80075dc <USBD_FS_ProductStrDescriptor+0x34>)
 80075ca:	4805      	ldr	r0, [pc, #20]	; (80075e0 <USBD_FS_ProductStrDescriptor+0x38>)
 80075cc:	f7ff fddd 	bl	800718a <USBD_GetString>
  }
  return USBD_StrDesc;
 80075d0:	4b02      	ldr	r3, [pc, #8]	; (80075dc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3708      	adds	r7, #8
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}
 80075da:	bf00      	nop
 80075dc:	20004da4 	.word	0x20004da4
 80075e0:	08007f70 	.word	0x08007f70

080075e4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b082      	sub	sp, #8
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	4603      	mov	r3, r0
 80075ec:	6039      	str	r1, [r7, #0]
 80075ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80075f0:	683a      	ldr	r2, [r7, #0]
 80075f2:	4904      	ldr	r1, [pc, #16]	; (8007604 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80075f4:	4804      	ldr	r0, [pc, #16]	; (8007608 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80075f6:	f7ff fdc8 	bl	800718a <USBD_GetString>
  return USBD_StrDesc;
 80075fa:	4b02      	ldr	r3, [pc, #8]	; (8007604 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3708      	adds	r7, #8
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}
 8007604:	20004da4 	.word	0x20004da4
 8007608:	08007f88 	.word	0x08007f88

0800760c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b082      	sub	sp, #8
 8007610:	af00      	add	r7, sp, #0
 8007612:	4603      	mov	r3, r0
 8007614:	6039      	str	r1, [r7, #0]
 8007616:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	221a      	movs	r2, #26
 800761c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800761e:	f000 f843 	bl	80076a8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007622:	4b02      	ldr	r3, [pc, #8]	; (800762c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007624:	4618      	mov	r0, r3
 8007626:	3708      	adds	r7, #8
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}
 800762c:	2000016c 	.word	0x2000016c

08007630 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b082      	sub	sp, #8
 8007634:	af00      	add	r7, sp, #0
 8007636:	4603      	mov	r3, r0
 8007638:	6039      	str	r1, [r7, #0]
 800763a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800763c:	79fb      	ldrb	r3, [r7, #7]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d105      	bne.n	800764e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007642:	683a      	ldr	r2, [r7, #0]
 8007644:	4907      	ldr	r1, [pc, #28]	; (8007664 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007646:	4808      	ldr	r0, [pc, #32]	; (8007668 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007648:	f7ff fd9f 	bl	800718a <USBD_GetString>
 800764c:	e004      	b.n	8007658 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800764e:	683a      	ldr	r2, [r7, #0]
 8007650:	4904      	ldr	r1, [pc, #16]	; (8007664 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007652:	4805      	ldr	r0, [pc, #20]	; (8007668 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007654:	f7ff fd99 	bl	800718a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007658:	4b02      	ldr	r3, [pc, #8]	; (8007664 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800765a:	4618      	mov	r0, r3
 800765c:	3708      	adds	r7, #8
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}
 8007662:	bf00      	nop
 8007664:	20004da4 	.word	0x20004da4
 8007668:	08007f9c 	.word	0x08007f9c

0800766c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b082      	sub	sp, #8
 8007670:	af00      	add	r7, sp, #0
 8007672:	4603      	mov	r3, r0
 8007674:	6039      	str	r1, [r7, #0]
 8007676:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007678:	79fb      	ldrb	r3, [r7, #7]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d105      	bne.n	800768a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800767e:	683a      	ldr	r2, [r7, #0]
 8007680:	4907      	ldr	r1, [pc, #28]	; (80076a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007682:	4808      	ldr	r0, [pc, #32]	; (80076a4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007684:	f7ff fd81 	bl	800718a <USBD_GetString>
 8007688:	e004      	b.n	8007694 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800768a:	683a      	ldr	r2, [r7, #0]
 800768c:	4904      	ldr	r1, [pc, #16]	; (80076a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800768e:	4805      	ldr	r0, [pc, #20]	; (80076a4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007690:	f7ff fd7b 	bl	800718a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007694:	4b02      	ldr	r3, [pc, #8]	; (80076a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007696:	4618      	mov	r0, r3
 8007698:	3708      	adds	r7, #8
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
 800769e:	bf00      	nop
 80076a0:	20004da4 	.word	0x20004da4
 80076a4:	08007fa8 	.word	0x08007fa8

080076a8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b084      	sub	sp, #16
 80076ac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80076ae:	4b0f      	ldr	r3, [pc, #60]	; (80076ec <Get_SerialNum+0x44>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80076b4:	4b0e      	ldr	r3, [pc, #56]	; (80076f0 <Get_SerialNum+0x48>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80076ba:	4b0e      	ldr	r3, [pc, #56]	; (80076f4 <Get_SerialNum+0x4c>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80076c0:	68fa      	ldr	r2, [r7, #12]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	4413      	add	r3, r2
 80076c6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d009      	beq.n	80076e2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80076ce:	2208      	movs	r2, #8
 80076d0:	4909      	ldr	r1, [pc, #36]	; (80076f8 <Get_SerialNum+0x50>)
 80076d2:	68f8      	ldr	r0, [r7, #12]
 80076d4:	f000 f814 	bl	8007700 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80076d8:	2204      	movs	r2, #4
 80076da:	4908      	ldr	r1, [pc, #32]	; (80076fc <Get_SerialNum+0x54>)
 80076dc:	68b8      	ldr	r0, [r7, #8]
 80076de:	f000 f80f 	bl	8007700 <IntToUnicode>
  }
}
 80076e2:	bf00      	nop
 80076e4:	3710      	adds	r7, #16
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}
 80076ea:	bf00      	nop
 80076ec:	1fff7a10 	.word	0x1fff7a10
 80076f0:	1fff7a14 	.word	0x1fff7a14
 80076f4:	1fff7a18 	.word	0x1fff7a18
 80076f8:	2000016e 	.word	0x2000016e
 80076fc:	2000017e 	.word	0x2000017e

08007700 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007700:	b480      	push	{r7}
 8007702:	b087      	sub	sp, #28
 8007704:	af00      	add	r7, sp, #0
 8007706:	60f8      	str	r0, [r7, #12]
 8007708:	60b9      	str	r1, [r7, #8]
 800770a:	4613      	mov	r3, r2
 800770c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800770e:	2300      	movs	r3, #0
 8007710:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007712:	2300      	movs	r3, #0
 8007714:	75fb      	strb	r3, [r7, #23]
 8007716:	e027      	b.n	8007768 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	0f1b      	lsrs	r3, r3, #28
 800771c:	2b09      	cmp	r3, #9
 800771e:	d80b      	bhi.n	8007738 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	0f1b      	lsrs	r3, r3, #28
 8007724:	b2da      	uxtb	r2, r3
 8007726:	7dfb      	ldrb	r3, [r7, #23]
 8007728:	005b      	lsls	r3, r3, #1
 800772a:	4619      	mov	r1, r3
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	440b      	add	r3, r1
 8007730:	3230      	adds	r2, #48	; 0x30
 8007732:	b2d2      	uxtb	r2, r2
 8007734:	701a      	strb	r2, [r3, #0]
 8007736:	e00a      	b.n	800774e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	0f1b      	lsrs	r3, r3, #28
 800773c:	b2da      	uxtb	r2, r3
 800773e:	7dfb      	ldrb	r3, [r7, #23]
 8007740:	005b      	lsls	r3, r3, #1
 8007742:	4619      	mov	r1, r3
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	440b      	add	r3, r1
 8007748:	3237      	adds	r2, #55	; 0x37
 800774a:	b2d2      	uxtb	r2, r2
 800774c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	011b      	lsls	r3, r3, #4
 8007752:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007754:	7dfb      	ldrb	r3, [r7, #23]
 8007756:	005b      	lsls	r3, r3, #1
 8007758:	3301      	adds	r3, #1
 800775a:	68ba      	ldr	r2, [r7, #8]
 800775c:	4413      	add	r3, r2
 800775e:	2200      	movs	r2, #0
 8007760:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007762:	7dfb      	ldrb	r3, [r7, #23]
 8007764:	3301      	adds	r3, #1
 8007766:	75fb      	strb	r3, [r7, #23]
 8007768:	7dfa      	ldrb	r2, [r7, #23]
 800776a:	79fb      	ldrb	r3, [r7, #7]
 800776c:	429a      	cmp	r2, r3
 800776e:	d3d3      	bcc.n	8007718 <IntToUnicode+0x18>
  }
}
 8007770:	bf00      	nop
 8007772:	371c      	adds	r7, #28
 8007774:	46bd      	mov	sp, r7
 8007776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777a:	4770      	bx	lr

0800777c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b08a      	sub	sp, #40	; 0x28
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007784:	f107 0314 	add.w	r3, r7, #20
 8007788:	2200      	movs	r2, #0
 800778a:	601a      	str	r2, [r3, #0]
 800778c:	605a      	str	r2, [r3, #4]
 800778e:	609a      	str	r2, [r3, #8]
 8007790:	60da      	str	r2, [r3, #12]
 8007792:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800779c:	d13a      	bne.n	8007814 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800779e:	2300      	movs	r3, #0
 80077a0:	613b      	str	r3, [r7, #16]
 80077a2:	4b1e      	ldr	r3, [pc, #120]	; (800781c <HAL_PCD_MspInit+0xa0>)
 80077a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077a6:	4a1d      	ldr	r2, [pc, #116]	; (800781c <HAL_PCD_MspInit+0xa0>)
 80077a8:	f043 0301 	orr.w	r3, r3, #1
 80077ac:	6313      	str	r3, [r2, #48]	; 0x30
 80077ae:	4b1b      	ldr	r3, [pc, #108]	; (800781c <HAL_PCD_MspInit+0xa0>)
 80077b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077b2:	f003 0301 	and.w	r3, r3, #1
 80077b6:	613b      	str	r3, [r7, #16]
 80077b8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80077ba:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80077be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077c0:	2302      	movs	r3, #2
 80077c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077c4:	2300      	movs	r3, #0
 80077c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80077c8:	2303      	movs	r3, #3
 80077ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80077cc:	230a      	movs	r3, #10
 80077ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80077d0:	f107 0314 	add.w	r3, r7, #20
 80077d4:	4619      	mov	r1, r3
 80077d6:	4812      	ldr	r0, [pc, #72]	; (8007820 <HAL_PCD_MspInit+0xa4>)
 80077d8:	f7fa fabc 	bl	8001d54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80077dc:	4b0f      	ldr	r3, [pc, #60]	; (800781c <HAL_PCD_MspInit+0xa0>)
 80077de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077e0:	4a0e      	ldr	r2, [pc, #56]	; (800781c <HAL_PCD_MspInit+0xa0>)
 80077e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077e6:	6353      	str	r3, [r2, #52]	; 0x34
 80077e8:	2300      	movs	r3, #0
 80077ea:	60fb      	str	r3, [r7, #12]
 80077ec:	4b0b      	ldr	r3, [pc, #44]	; (800781c <HAL_PCD_MspInit+0xa0>)
 80077ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077f0:	4a0a      	ldr	r2, [pc, #40]	; (800781c <HAL_PCD_MspInit+0xa0>)
 80077f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80077f6:	6453      	str	r3, [r2, #68]	; 0x44
 80077f8:	4b08      	ldr	r3, [pc, #32]	; (800781c <HAL_PCD_MspInit+0xa0>)
 80077fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007800:	60fb      	str	r3, [r7, #12]
 8007802:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007804:	2200      	movs	r2, #0
 8007806:	2100      	movs	r1, #0
 8007808:	2043      	movs	r0, #67	; 0x43
 800780a:	f7f9 fefe 	bl	800160a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800780e:	2043      	movs	r0, #67	; 0x43
 8007810:	f7f9 ff17 	bl	8001642 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007814:	bf00      	nop
 8007816:	3728      	adds	r7, #40	; 0x28
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}
 800781c:	40023800 	.word	0x40023800
 8007820:	40020000 	.word	0x40020000

08007824 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b082      	sub	sp, #8
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007838:	4619      	mov	r1, r3
 800783a:	4610      	mov	r0, r2
 800783c:	f7fe fd22 	bl	8006284 <USBD_LL_SetupStage>
}
 8007840:	bf00      	nop
 8007842:	3708      	adds	r7, #8
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}

08007848 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b082      	sub	sp, #8
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	460b      	mov	r3, r1
 8007852:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800785a:	78fa      	ldrb	r2, [r7, #3]
 800785c:	6879      	ldr	r1, [r7, #4]
 800785e:	4613      	mov	r3, r2
 8007860:	00db      	lsls	r3, r3, #3
 8007862:	1a9b      	subs	r3, r3, r2
 8007864:	009b      	lsls	r3, r3, #2
 8007866:	440b      	add	r3, r1
 8007868:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800786c:	681a      	ldr	r2, [r3, #0]
 800786e:	78fb      	ldrb	r3, [r7, #3]
 8007870:	4619      	mov	r1, r3
 8007872:	f7fe fd5a 	bl	800632a <USBD_LL_DataOutStage>
}
 8007876:	bf00      	nop
 8007878:	3708      	adds	r7, #8
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}

0800787e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800787e:	b580      	push	{r7, lr}
 8007880:	b082      	sub	sp, #8
 8007882:	af00      	add	r7, sp, #0
 8007884:	6078      	str	r0, [r7, #4]
 8007886:	460b      	mov	r3, r1
 8007888:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007890:	78fa      	ldrb	r2, [r7, #3]
 8007892:	6879      	ldr	r1, [r7, #4]
 8007894:	4613      	mov	r3, r2
 8007896:	00db      	lsls	r3, r3, #3
 8007898:	1a9b      	subs	r3, r3, r2
 800789a:	009b      	lsls	r3, r3, #2
 800789c:	440b      	add	r3, r1
 800789e:	3348      	adds	r3, #72	; 0x48
 80078a0:	681a      	ldr	r2, [r3, #0]
 80078a2:	78fb      	ldrb	r3, [r7, #3]
 80078a4:	4619      	mov	r1, r3
 80078a6:	f7fe fda3 	bl	80063f0 <USBD_LL_DataInStage>
}
 80078aa:	bf00      	nop
 80078ac:	3708      	adds	r7, #8
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}

080078b2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078b2:	b580      	push	{r7, lr}
 80078b4:	b082      	sub	sp, #8
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80078c0:	4618      	mov	r0, r3
 80078c2:	f7fe fea7 	bl	8006614 <USBD_LL_SOF>
}
 80078c6:	bf00      	nop
 80078c8:	3708      	adds	r7, #8
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}

080078ce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078ce:	b580      	push	{r7, lr}
 80078d0:	b084      	sub	sp, #16
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80078d6:	2301      	movs	r3, #1
 80078d8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	68db      	ldr	r3, [r3, #12]
 80078de:	2b02      	cmp	r3, #2
 80078e0:	d001      	beq.n	80078e6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80078e2:	f7f8 ffe7 	bl	80008b4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80078ec:	7bfa      	ldrb	r2, [r7, #15]
 80078ee:	4611      	mov	r1, r2
 80078f0:	4618      	mov	r0, r3
 80078f2:	f7fe fe54 	bl	800659e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80078fc:	4618      	mov	r0, r3
 80078fe:	f7fe fe0d 	bl	800651c <USBD_LL_Reset>
}
 8007902:	bf00      	nop
 8007904:	3710      	adds	r7, #16
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}
	...

0800790c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b082      	sub	sp, #8
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800791a:	4618      	mov	r0, r3
 800791c:	f7fe fe4f 	bl	80065be <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	687a      	ldr	r2, [r7, #4]
 800792c:	6812      	ldr	r2, [r2, #0]
 800792e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007932:	f043 0301 	orr.w	r3, r3, #1
 8007936:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6a1b      	ldr	r3, [r3, #32]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d005      	beq.n	800794c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007940:	4b04      	ldr	r3, [pc, #16]	; (8007954 <HAL_PCD_SuspendCallback+0x48>)
 8007942:	691b      	ldr	r3, [r3, #16]
 8007944:	4a03      	ldr	r2, [pc, #12]	; (8007954 <HAL_PCD_SuspendCallback+0x48>)
 8007946:	f043 0306 	orr.w	r3, r3, #6
 800794a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800794c:	bf00      	nop
 800794e:	3708      	adds	r7, #8
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}
 8007954:	e000ed00 	.word	0xe000ed00

08007958 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b082      	sub	sp, #8
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007966:	4618      	mov	r0, r3
 8007968:	f7fe fe3e 	bl	80065e8 <USBD_LL_Resume>
}
 800796c:	bf00      	nop
 800796e:	3708      	adds	r7, #8
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}

08007974 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b082      	sub	sp, #8
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
 800797c:	460b      	mov	r3, r1
 800797e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007986:	78fa      	ldrb	r2, [r7, #3]
 8007988:	4611      	mov	r1, r2
 800798a:	4618      	mov	r0, r3
 800798c:	f7fe fe69 	bl	8006662 <USBD_LL_IsoOUTIncomplete>
}
 8007990:	bf00      	nop
 8007992:	3708      	adds	r7, #8
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}

08007998 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b082      	sub	sp, #8
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	460b      	mov	r3, r1
 80079a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80079aa:	78fa      	ldrb	r2, [r7, #3]
 80079ac:	4611      	mov	r1, r2
 80079ae:	4618      	mov	r0, r3
 80079b0:	f7fe fe4a 	bl	8006648 <USBD_LL_IsoINIncomplete>
}
 80079b4:	bf00      	nop
 80079b6:	3708      	adds	r7, #8
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}

080079bc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b082      	sub	sp, #8
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80079ca:	4618      	mov	r0, r3
 80079cc:	f7fe fe56 	bl	800667c <USBD_LL_DevConnected>
}
 80079d0:	bf00      	nop
 80079d2:	3708      	adds	r7, #8
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}

080079d8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b082      	sub	sp, #8
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80079e6:	4618      	mov	r0, r3
 80079e8:	f7fe fe53 	bl	8006692 <USBD_LL_DevDisconnected>
}
 80079ec:	bf00      	nop
 80079ee:	3708      	adds	r7, #8
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}

080079f4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b082      	sub	sp, #8
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	781b      	ldrb	r3, [r3, #0]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d13c      	bne.n	8007a7e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007a04:	4a20      	ldr	r2, [pc, #128]	; (8007a88 <USBD_LL_Init+0x94>)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	4a1e      	ldr	r2, [pc, #120]	; (8007a88 <USBD_LL_Init+0x94>)
 8007a10:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007a14:	4b1c      	ldr	r3, [pc, #112]	; (8007a88 <USBD_LL_Init+0x94>)
 8007a16:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007a1a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007a1c:	4b1a      	ldr	r3, [pc, #104]	; (8007a88 <USBD_LL_Init+0x94>)
 8007a1e:	2204      	movs	r2, #4
 8007a20:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007a22:	4b19      	ldr	r3, [pc, #100]	; (8007a88 <USBD_LL_Init+0x94>)
 8007a24:	2202      	movs	r2, #2
 8007a26:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007a28:	4b17      	ldr	r3, [pc, #92]	; (8007a88 <USBD_LL_Init+0x94>)
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007a2e:	4b16      	ldr	r3, [pc, #88]	; (8007a88 <USBD_LL_Init+0x94>)
 8007a30:	2202      	movs	r2, #2
 8007a32:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007a34:	4b14      	ldr	r3, [pc, #80]	; (8007a88 <USBD_LL_Init+0x94>)
 8007a36:	2200      	movs	r2, #0
 8007a38:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007a3a:	4b13      	ldr	r3, [pc, #76]	; (8007a88 <USBD_LL_Init+0x94>)
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007a40:	4b11      	ldr	r3, [pc, #68]	; (8007a88 <USBD_LL_Init+0x94>)
 8007a42:	2200      	movs	r2, #0
 8007a44:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007a46:	4b10      	ldr	r3, [pc, #64]	; (8007a88 <USBD_LL_Init+0x94>)
 8007a48:	2200      	movs	r2, #0
 8007a4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007a4c:	4b0e      	ldr	r3, [pc, #56]	; (8007a88 <USBD_LL_Init+0x94>)
 8007a4e:	2200      	movs	r2, #0
 8007a50:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007a52:	480d      	ldr	r0, [pc, #52]	; (8007a88 <USBD_LL_Init+0x94>)
 8007a54:	f7fa fb00 	bl	8002058 <HAL_PCD_Init>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d001      	beq.n	8007a62 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007a5e:	f7f8 ff29 	bl	80008b4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007a62:	2180      	movs	r1, #128	; 0x80
 8007a64:	4808      	ldr	r0, [pc, #32]	; (8007a88 <USBD_LL_Init+0x94>)
 8007a66:	f7fb fc5e 	bl	8003326 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007a6a:	2240      	movs	r2, #64	; 0x40
 8007a6c:	2100      	movs	r1, #0
 8007a6e:	4806      	ldr	r0, [pc, #24]	; (8007a88 <USBD_LL_Init+0x94>)
 8007a70:	f7fb fc12 	bl	8003298 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007a74:	2280      	movs	r2, #128	; 0x80
 8007a76:	2101      	movs	r1, #1
 8007a78:	4803      	ldr	r0, [pc, #12]	; (8007a88 <USBD_LL_Init+0x94>)
 8007a7a:	f7fb fc0d 	bl	8003298 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007a7e:	2300      	movs	r3, #0
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3708      	adds	r7, #8
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}
 8007a88:	20004fa4 	.word	0x20004fa4

08007a8c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b084      	sub	sp, #16
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a94:	2300      	movs	r3, #0
 8007a96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f7fa fbf5 	bl	8002292 <HAL_PCD_Start>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007aac:	7bfb      	ldrb	r3, [r7, #15]
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f000 f92a 	bl	8007d08 <USBD_Get_USB_Status>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ab8:	7bbb      	ldrb	r3, [r7, #14]
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3710      	adds	r7, #16
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}

08007ac2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007ac2:	b580      	push	{r7, lr}
 8007ac4:	b084      	sub	sp, #16
 8007ac6:	af00      	add	r7, sp, #0
 8007ac8:	6078      	str	r0, [r7, #4]
 8007aca:	4608      	mov	r0, r1
 8007acc:	4611      	mov	r1, r2
 8007ace:	461a      	mov	r2, r3
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	70fb      	strb	r3, [r7, #3]
 8007ad4:	460b      	mov	r3, r1
 8007ad6:	70bb      	strb	r3, [r7, #2]
 8007ad8:	4613      	mov	r3, r2
 8007ada:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007adc:	2300      	movs	r3, #0
 8007ade:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007aea:	78bb      	ldrb	r3, [r7, #2]
 8007aec:	883a      	ldrh	r2, [r7, #0]
 8007aee:	78f9      	ldrb	r1, [r7, #3]
 8007af0:	f7fa ffd9 	bl	8002aa6 <HAL_PCD_EP_Open>
 8007af4:	4603      	mov	r3, r0
 8007af6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007af8:	7bfb      	ldrb	r3, [r7, #15]
 8007afa:	4618      	mov	r0, r3
 8007afc:	f000 f904 	bl	8007d08 <USBD_Get_USB_Status>
 8007b00:	4603      	mov	r3, r0
 8007b02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b04:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3710      	adds	r7, #16
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}

08007b0e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b0e:	b580      	push	{r7, lr}
 8007b10:	b084      	sub	sp, #16
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	6078      	str	r0, [r7, #4]
 8007b16:	460b      	mov	r3, r1
 8007b18:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007b28:	78fa      	ldrb	r2, [r7, #3]
 8007b2a:	4611      	mov	r1, r2
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f7fb f822 	bl	8002b76 <HAL_PCD_EP_Close>
 8007b32:	4603      	mov	r3, r0
 8007b34:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b36:	7bfb      	ldrb	r3, [r7, #15]
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f000 f8e5 	bl	8007d08 <USBD_Get_USB_Status>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b42:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	3710      	adds	r7, #16
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}

08007b4c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b084      	sub	sp, #16
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	460b      	mov	r3, r1
 8007b56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b58:	2300      	movs	r3, #0
 8007b5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007b66:	78fa      	ldrb	r2, [r7, #3]
 8007b68:	4611      	mov	r1, r2
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f7fb f8fa 	bl	8002d64 <HAL_PCD_EP_SetStall>
 8007b70:	4603      	mov	r3, r0
 8007b72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b74:	7bfb      	ldrb	r3, [r7, #15]
 8007b76:	4618      	mov	r0, r3
 8007b78:	f000 f8c6 	bl	8007d08 <USBD_Get_USB_Status>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b80:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3710      	adds	r7, #16
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}

08007b8a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b8a:	b580      	push	{r7, lr}
 8007b8c:	b084      	sub	sp, #16
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	6078      	str	r0, [r7, #4]
 8007b92:	460b      	mov	r3, r1
 8007b94:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b96:	2300      	movs	r3, #0
 8007b98:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007ba4:	78fa      	ldrb	r2, [r7, #3]
 8007ba6:	4611      	mov	r1, r2
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f7fb f93f 	bl	8002e2c <HAL_PCD_EP_ClrStall>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007bb2:	7bfb      	ldrb	r3, [r7, #15]
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f000 f8a7 	bl	8007d08 <USBD_Get_USB_Status>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007bbe:	7bbb      	ldrb	r3, [r7, #14]
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3710      	adds	r7, #16
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}

08007bc8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b085      	sub	sp, #20
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
 8007bd0:	460b      	mov	r3, r1
 8007bd2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007bda:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007bdc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	da0b      	bge.n	8007bfc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007be4:	78fb      	ldrb	r3, [r7, #3]
 8007be6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007bea:	68f9      	ldr	r1, [r7, #12]
 8007bec:	4613      	mov	r3, r2
 8007bee:	00db      	lsls	r3, r3, #3
 8007bf0:	1a9b      	subs	r3, r3, r2
 8007bf2:	009b      	lsls	r3, r3, #2
 8007bf4:	440b      	add	r3, r1
 8007bf6:	333e      	adds	r3, #62	; 0x3e
 8007bf8:	781b      	ldrb	r3, [r3, #0]
 8007bfa:	e00b      	b.n	8007c14 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007bfc:	78fb      	ldrb	r3, [r7, #3]
 8007bfe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c02:	68f9      	ldr	r1, [r7, #12]
 8007c04:	4613      	mov	r3, r2
 8007c06:	00db      	lsls	r3, r3, #3
 8007c08:	1a9b      	subs	r3, r3, r2
 8007c0a:	009b      	lsls	r3, r3, #2
 8007c0c:	440b      	add	r3, r1
 8007c0e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007c12:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3714      	adds	r7, #20
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr

08007c20 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b084      	sub	sp, #16
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	460b      	mov	r3, r1
 8007c2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c30:	2300      	movs	r3, #0
 8007c32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007c3a:	78fa      	ldrb	r2, [r7, #3]
 8007c3c:	4611      	mov	r1, r2
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f7fa ff0c 	bl	8002a5c <HAL_PCD_SetAddress>
 8007c44:	4603      	mov	r3, r0
 8007c46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c48:	7bfb      	ldrb	r3, [r7, #15]
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f000 f85c 	bl	8007d08 <USBD_Get_USB_Status>
 8007c50:	4603      	mov	r3, r0
 8007c52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c54:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3710      	adds	r7, #16
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}

08007c5e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007c5e:	b580      	push	{r7, lr}
 8007c60:	b086      	sub	sp, #24
 8007c62:	af00      	add	r7, sp, #0
 8007c64:	60f8      	str	r0, [r7, #12]
 8007c66:	607a      	str	r2, [r7, #4]
 8007c68:	603b      	str	r3, [r7, #0]
 8007c6a:	460b      	mov	r3, r1
 8007c6c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c72:	2300      	movs	r3, #0
 8007c74:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007c7c:	7af9      	ldrb	r1, [r7, #11]
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	687a      	ldr	r2, [r7, #4]
 8007c82:	f7fb f825 	bl	8002cd0 <HAL_PCD_EP_Transmit>
 8007c86:	4603      	mov	r3, r0
 8007c88:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c8a:	7dfb      	ldrb	r3, [r7, #23]
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f000 f83b 	bl	8007d08 <USBD_Get_USB_Status>
 8007c92:	4603      	mov	r3, r0
 8007c94:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007c96:	7dbb      	ldrb	r3, [r7, #22]
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3718      	adds	r7, #24
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}

08007ca0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b086      	sub	sp, #24
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	60f8      	str	r0, [r7, #12]
 8007ca8:	607a      	str	r2, [r7, #4]
 8007caa:	603b      	str	r3, [r7, #0]
 8007cac:	460b      	mov	r3, r1
 8007cae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007cbe:	7af9      	ldrb	r1, [r7, #11]
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	687a      	ldr	r2, [r7, #4]
 8007cc4:	f7fa ffa1 	bl	8002c0a <HAL_PCD_EP_Receive>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ccc:	7dfb      	ldrb	r3, [r7, #23]
 8007cce:	4618      	mov	r0, r3
 8007cd0:	f000 f81a 	bl	8007d08 <USBD_Get_USB_Status>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007cd8:	7dbb      	ldrb	r3, [r7, #22]
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3718      	adds	r7, #24
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}

08007ce2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ce2:	b580      	push	{r7, lr}
 8007ce4:	b082      	sub	sp, #8
 8007ce6:	af00      	add	r7, sp, #0
 8007ce8:	6078      	str	r0, [r7, #4]
 8007cea:	460b      	mov	r3, r1
 8007cec:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007cf4:	78fa      	ldrb	r2, [r7, #3]
 8007cf6:	4611      	mov	r1, r2
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f7fa ffd1 	bl	8002ca0 <HAL_PCD_EP_GetRxCount>
 8007cfe:	4603      	mov	r3, r0
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	3708      	adds	r7, #8
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}

08007d08 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b085      	sub	sp, #20
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	4603      	mov	r3, r0
 8007d10:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d12:	2300      	movs	r3, #0
 8007d14:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007d16:	79fb      	ldrb	r3, [r7, #7]
 8007d18:	2b03      	cmp	r3, #3
 8007d1a:	d817      	bhi.n	8007d4c <USBD_Get_USB_Status+0x44>
 8007d1c:	a201      	add	r2, pc, #4	; (adr r2, 8007d24 <USBD_Get_USB_Status+0x1c>)
 8007d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d22:	bf00      	nop
 8007d24:	08007d35 	.word	0x08007d35
 8007d28:	08007d3b 	.word	0x08007d3b
 8007d2c:	08007d41 	.word	0x08007d41
 8007d30:	08007d47 	.word	0x08007d47
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007d34:	2300      	movs	r3, #0
 8007d36:	73fb      	strb	r3, [r7, #15]
    break;
 8007d38:	e00b      	b.n	8007d52 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007d3a:	2303      	movs	r3, #3
 8007d3c:	73fb      	strb	r3, [r7, #15]
    break;
 8007d3e:	e008      	b.n	8007d52 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007d40:	2301      	movs	r3, #1
 8007d42:	73fb      	strb	r3, [r7, #15]
    break;
 8007d44:	e005      	b.n	8007d52 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007d46:	2303      	movs	r3, #3
 8007d48:	73fb      	strb	r3, [r7, #15]
    break;
 8007d4a:	e002      	b.n	8007d52 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007d4c:	2303      	movs	r3, #3
 8007d4e:	73fb      	strb	r3, [r7, #15]
    break;
 8007d50:	bf00      	nop
  }
  return usb_status;
 8007d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3714      	adds	r7, #20
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5e:	4770      	bx	lr

08007d60 <__errno>:
 8007d60:	4b01      	ldr	r3, [pc, #4]	; (8007d68 <__errno+0x8>)
 8007d62:	6818      	ldr	r0, [r3, #0]
 8007d64:	4770      	bx	lr
 8007d66:	bf00      	nop
 8007d68:	20000188 	.word	0x20000188

08007d6c <__libc_init_array>:
 8007d6c:	b570      	push	{r4, r5, r6, lr}
 8007d6e:	4e0d      	ldr	r6, [pc, #52]	; (8007da4 <__libc_init_array+0x38>)
 8007d70:	4c0d      	ldr	r4, [pc, #52]	; (8007da8 <__libc_init_array+0x3c>)
 8007d72:	1ba4      	subs	r4, r4, r6
 8007d74:	10a4      	asrs	r4, r4, #2
 8007d76:	2500      	movs	r5, #0
 8007d78:	42a5      	cmp	r5, r4
 8007d7a:	d109      	bne.n	8007d90 <__libc_init_array+0x24>
 8007d7c:	4e0b      	ldr	r6, [pc, #44]	; (8007dac <__libc_init_array+0x40>)
 8007d7e:	4c0c      	ldr	r4, [pc, #48]	; (8007db0 <__libc_init_array+0x44>)
 8007d80:	f000 f8ea 	bl	8007f58 <_init>
 8007d84:	1ba4      	subs	r4, r4, r6
 8007d86:	10a4      	asrs	r4, r4, #2
 8007d88:	2500      	movs	r5, #0
 8007d8a:	42a5      	cmp	r5, r4
 8007d8c:	d105      	bne.n	8007d9a <__libc_init_array+0x2e>
 8007d8e:	bd70      	pop	{r4, r5, r6, pc}
 8007d90:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007d94:	4798      	blx	r3
 8007d96:	3501      	adds	r5, #1
 8007d98:	e7ee      	b.n	8007d78 <__libc_init_array+0xc>
 8007d9a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007d9e:	4798      	blx	r3
 8007da0:	3501      	adds	r5, #1
 8007da2:	e7f2      	b.n	8007d8a <__libc_init_array+0x1e>
 8007da4:	08007fd8 	.word	0x08007fd8
 8007da8:	08007fd8 	.word	0x08007fd8
 8007dac:	08007fd8 	.word	0x08007fd8
 8007db0:	08007fdc 	.word	0x08007fdc

08007db4 <malloc>:
 8007db4:	4b02      	ldr	r3, [pc, #8]	; (8007dc0 <malloc+0xc>)
 8007db6:	4601      	mov	r1, r0
 8007db8:	6818      	ldr	r0, [r3, #0]
 8007dba:	f000 b861 	b.w	8007e80 <_malloc_r>
 8007dbe:	bf00      	nop
 8007dc0:	20000188 	.word	0x20000188

08007dc4 <free>:
 8007dc4:	4b02      	ldr	r3, [pc, #8]	; (8007dd0 <free+0xc>)
 8007dc6:	4601      	mov	r1, r0
 8007dc8:	6818      	ldr	r0, [r3, #0]
 8007dca:	f000 b80b 	b.w	8007de4 <_free_r>
 8007dce:	bf00      	nop
 8007dd0:	20000188 	.word	0x20000188

08007dd4 <memset>:
 8007dd4:	4402      	add	r2, r0
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d100      	bne.n	8007dde <memset+0xa>
 8007ddc:	4770      	bx	lr
 8007dde:	f803 1b01 	strb.w	r1, [r3], #1
 8007de2:	e7f9      	b.n	8007dd8 <memset+0x4>

08007de4 <_free_r>:
 8007de4:	b538      	push	{r3, r4, r5, lr}
 8007de6:	4605      	mov	r5, r0
 8007de8:	2900      	cmp	r1, #0
 8007dea:	d045      	beq.n	8007e78 <_free_r+0x94>
 8007dec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007df0:	1f0c      	subs	r4, r1, #4
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	bfb8      	it	lt
 8007df6:	18e4      	addlt	r4, r4, r3
 8007df8:	f000 f8ac 	bl	8007f54 <__malloc_lock>
 8007dfc:	4a1f      	ldr	r2, [pc, #124]	; (8007e7c <_free_r+0x98>)
 8007dfe:	6813      	ldr	r3, [r2, #0]
 8007e00:	4610      	mov	r0, r2
 8007e02:	b933      	cbnz	r3, 8007e12 <_free_r+0x2e>
 8007e04:	6063      	str	r3, [r4, #4]
 8007e06:	6014      	str	r4, [r2, #0]
 8007e08:	4628      	mov	r0, r5
 8007e0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e0e:	f000 b8a2 	b.w	8007f56 <__malloc_unlock>
 8007e12:	42a3      	cmp	r3, r4
 8007e14:	d90c      	bls.n	8007e30 <_free_r+0x4c>
 8007e16:	6821      	ldr	r1, [r4, #0]
 8007e18:	1862      	adds	r2, r4, r1
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	bf04      	itt	eq
 8007e1e:	681a      	ldreq	r2, [r3, #0]
 8007e20:	685b      	ldreq	r3, [r3, #4]
 8007e22:	6063      	str	r3, [r4, #4]
 8007e24:	bf04      	itt	eq
 8007e26:	1852      	addeq	r2, r2, r1
 8007e28:	6022      	streq	r2, [r4, #0]
 8007e2a:	6004      	str	r4, [r0, #0]
 8007e2c:	e7ec      	b.n	8007e08 <_free_r+0x24>
 8007e2e:	4613      	mov	r3, r2
 8007e30:	685a      	ldr	r2, [r3, #4]
 8007e32:	b10a      	cbz	r2, 8007e38 <_free_r+0x54>
 8007e34:	42a2      	cmp	r2, r4
 8007e36:	d9fa      	bls.n	8007e2e <_free_r+0x4a>
 8007e38:	6819      	ldr	r1, [r3, #0]
 8007e3a:	1858      	adds	r0, r3, r1
 8007e3c:	42a0      	cmp	r0, r4
 8007e3e:	d10b      	bne.n	8007e58 <_free_r+0x74>
 8007e40:	6820      	ldr	r0, [r4, #0]
 8007e42:	4401      	add	r1, r0
 8007e44:	1858      	adds	r0, r3, r1
 8007e46:	4282      	cmp	r2, r0
 8007e48:	6019      	str	r1, [r3, #0]
 8007e4a:	d1dd      	bne.n	8007e08 <_free_r+0x24>
 8007e4c:	6810      	ldr	r0, [r2, #0]
 8007e4e:	6852      	ldr	r2, [r2, #4]
 8007e50:	605a      	str	r2, [r3, #4]
 8007e52:	4401      	add	r1, r0
 8007e54:	6019      	str	r1, [r3, #0]
 8007e56:	e7d7      	b.n	8007e08 <_free_r+0x24>
 8007e58:	d902      	bls.n	8007e60 <_free_r+0x7c>
 8007e5a:	230c      	movs	r3, #12
 8007e5c:	602b      	str	r3, [r5, #0]
 8007e5e:	e7d3      	b.n	8007e08 <_free_r+0x24>
 8007e60:	6820      	ldr	r0, [r4, #0]
 8007e62:	1821      	adds	r1, r4, r0
 8007e64:	428a      	cmp	r2, r1
 8007e66:	bf04      	itt	eq
 8007e68:	6811      	ldreq	r1, [r2, #0]
 8007e6a:	6852      	ldreq	r2, [r2, #4]
 8007e6c:	6062      	str	r2, [r4, #4]
 8007e6e:	bf04      	itt	eq
 8007e70:	1809      	addeq	r1, r1, r0
 8007e72:	6021      	streq	r1, [r4, #0]
 8007e74:	605c      	str	r4, [r3, #4]
 8007e76:	e7c7      	b.n	8007e08 <_free_r+0x24>
 8007e78:	bd38      	pop	{r3, r4, r5, pc}
 8007e7a:	bf00      	nop
 8007e7c:	20000210 	.word	0x20000210

08007e80 <_malloc_r>:
 8007e80:	b570      	push	{r4, r5, r6, lr}
 8007e82:	1ccd      	adds	r5, r1, #3
 8007e84:	f025 0503 	bic.w	r5, r5, #3
 8007e88:	3508      	adds	r5, #8
 8007e8a:	2d0c      	cmp	r5, #12
 8007e8c:	bf38      	it	cc
 8007e8e:	250c      	movcc	r5, #12
 8007e90:	2d00      	cmp	r5, #0
 8007e92:	4606      	mov	r6, r0
 8007e94:	db01      	blt.n	8007e9a <_malloc_r+0x1a>
 8007e96:	42a9      	cmp	r1, r5
 8007e98:	d903      	bls.n	8007ea2 <_malloc_r+0x22>
 8007e9a:	230c      	movs	r3, #12
 8007e9c:	6033      	str	r3, [r6, #0]
 8007e9e:	2000      	movs	r0, #0
 8007ea0:	bd70      	pop	{r4, r5, r6, pc}
 8007ea2:	f000 f857 	bl	8007f54 <__malloc_lock>
 8007ea6:	4a21      	ldr	r2, [pc, #132]	; (8007f2c <_malloc_r+0xac>)
 8007ea8:	6814      	ldr	r4, [r2, #0]
 8007eaa:	4621      	mov	r1, r4
 8007eac:	b991      	cbnz	r1, 8007ed4 <_malloc_r+0x54>
 8007eae:	4c20      	ldr	r4, [pc, #128]	; (8007f30 <_malloc_r+0xb0>)
 8007eb0:	6823      	ldr	r3, [r4, #0]
 8007eb2:	b91b      	cbnz	r3, 8007ebc <_malloc_r+0x3c>
 8007eb4:	4630      	mov	r0, r6
 8007eb6:	f000 f83d 	bl	8007f34 <_sbrk_r>
 8007eba:	6020      	str	r0, [r4, #0]
 8007ebc:	4629      	mov	r1, r5
 8007ebe:	4630      	mov	r0, r6
 8007ec0:	f000 f838 	bl	8007f34 <_sbrk_r>
 8007ec4:	1c43      	adds	r3, r0, #1
 8007ec6:	d124      	bne.n	8007f12 <_malloc_r+0x92>
 8007ec8:	230c      	movs	r3, #12
 8007eca:	6033      	str	r3, [r6, #0]
 8007ecc:	4630      	mov	r0, r6
 8007ece:	f000 f842 	bl	8007f56 <__malloc_unlock>
 8007ed2:	e7e4      	b.n	8007e9e <_malloc_r+0x1e>
 8007ed4:	680b      	ldr	r3, [r1, #0]
 8007ed6:	1b5b      	subs	r3, r3, r5
 8007ed8:	d418      	bmi.n	8007f0c <_malloc_r+0x8c>
 8007eda:	2b0b      	cmp	r3, #11
 8007edc:	d90f      	bls.n	8007efe <_malloc_r+0x7e>
 8007ede:	600b      	str	r3, [r1, #0]
 8007ee0:	50cd      	str	r5, [r1, r3]
 8007ee2:	18cc      	adds	r4, r1, r3
 8007ee4:	4630      	mov	r0, r6
 8007ee6:	f000 f836 	bl	8007f56 <__malloc_unlock>
 8007eea:	f104 000b 	add.w	r0, r4, #11
 8007eee:	1d23      	adds	r3, r4, #4
 8007ef0:	f020 0007 	bic.w	r0, r0, #7
 8007ef4:	1ac3      	subs	r3, r0, r3
 8007ef6:	d0d3      	beq.n	8007ea0 <_malloc_r+0x20>
 8007ef8:	425a      	negs	r2, r3
 8007efa:	50e2      	str	r2, [r4, r3]
 8007efc:	e7d0      	b.n	8007ea0 <_malloc_r+0x20>
 8007efe:	428c      	cmp	r4, r1
 8007f00:	684b      	ldr	r3, [r1, #4]
 8007f02:	bf16      	itet	ne
 8007f04:	6063      	strne	r3, [r4, #4]
 8007f06:	6013      	streq	r3, [r2, #0]
 8007f08:	460c      	movne	r4, r1
 8007f0a:	e7eb      	b.n	8007ee4 <_malloc_r+0x64>
 8007f0c:	460c      	mov	r4, r1
 8007f0e:	6849      	ldr	r1, [r1, #4]
 8007f10:	e7cc      	b.n	8007eac <_malloc_r+0x2c>
 8007f12:	1cc4      	adds	r4, r0, #3
 8007f14:	f024 0403 	bic.w	r4, r4, #3
 8007f18:	42a0      	cmp	r0, r4
 8007f1a:	d005      	beq.n	8007f28 <_malloc_r+0xa8>
 8007f1c:	1a21      	subs	r1, r4, r0
 8007f1e:	4630      	mov	r0, r6
 8007f20:	f000 f808 	bl	8007f34 <_sbrk_r>
 8007f24:	3001      	adds	r0, #1
 8007f26:	d0cf      	beq.n	8007ec8 <_malloc_r+0x48>
 8007f28:	6025      	str	r5, [r4, #0]
 8007f2a:	e7db      	b.n	8007ee4 <_malloc_r+0x64>
 8007f2c:	20000210 	.word	0x20000210
 8007f30:	20000214 	.word	0x20000214

08007f34 <_sbrk_r>:
 8007f34:	b538      	push	{r3, r4, r5, lr}
 8007f36:	4c06      	ldr	r4, [pc, #24]	; (8007f50 <_sbrk_r+0x1c>)
 8007f38:	2300      	movs	r3, #0
 8007f3a:	4605      	mov	r5, r0
 8007f3c:	4608      	mov	r0, r1
 8007f3e:	6023      	str	r3, [r4, #0]
 8007f40:	f7f8 fdbc 	bl	8000abc <_sbrk>
 8007f44:	1c43      	adds	r3, r0, #1
 8007f46:	d102      	bne.n	8007f4e <_sbrk_r+0x1a>
 8007f48:	6823      	ldr	r3, [r4, #0]
 8007f4a:	b103      	cbz	r3, 8007f4e <_sbrk_r+0x1a>
 8007f4c:	602b      	str	r3, [r5, #0]
 8007f4e:	bd38      	pop	{r3, r4, r5, pc}
 8007f50:	200053ac 	.word	0x200053ac

08007f54 <__malloc_lock>:
 8007f54:	4770      	bx	lr

08007f56 <__malloc_unlock>:
 8007f56:	4770      	bx	lr

08007f58 <_init>:
 8007f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f5a:	bf00      	nop
 8007f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f5e:	bc08      	pop	{r3}
 8007f60:	469e      	mov	lr, r3
 8007f62:	4770      	bx	lr

08007f64 <_fini>:
 8007f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f66:	bf00      	nop
 8007f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f6a:	bc08      	pop	{r3}
 8007f6c:	469e      	mov	lr, r3
 8007f6e:	4770      	bx	lr
